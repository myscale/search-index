// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/data_format/features.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fdata_5fformat_2ffeatures_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fdata_5fformat_2ffeatures_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "scann/coscann/v2_restricts.pb.h"
#include "scann/proto/restricts.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fdata_5fformat_2ffeatures_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fdata_5fformat_2ffeatures_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto;
namespace research_scann {
class GenericFeatureVector;
struct GenericFeatureVectorDefaultTypeInternal;
extern GenericFeatureVectorDefaultTypeInternal _GenericFeatureVector_default_instance_;
class GenericFeatureVector_Crowding;
struct GenericFeatureVector_CrowdingDefaultTypeInternal;
extern GenericFeatureVector_CrowdingDefaultTypeInternal _GenericFeatureVector_Crowding_default_instance_;
class GenericFeatureVector_FixedPointMetadata;
struct GenericFeatureVector_FixedPointMetadataDefaultTypeInternal;
extern GenericFeatureVector_FixedPointMetadataDefaultTypeInternal _GenericFeatureVector_FixedPointMetadata_default_instance_;
class GenericFeatureVector_RestrictTokens;
struct GenericFeatureVector_RestrictTokensDefaultTypeInternal;
extern GenericFeatureVector_RestrictTokensDefaultTypeInternal _GenericFeatureVector_RestrictTokens_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::GenericFeatureVector* Arena::CreateMaybeMessage<::research_scann::GenericFeatureVector>(Arena*);
template<> ::research_scann::GenericFeatureVector_Crowding* Arena::CreateMaybeMessage<::research_scann::GenericFeatureVector_Crowding>(Arena*);
template<> ::research_scann::GenericFeatureVector_FixedPointMetadata* Arena::CreateMaybeMessage<::research_scann::GenericFeatureVector_FixedPointMetadata>(Arena*);
template<> ::research_scann::GenericFeatureVector_RestrictTokens* Arena::CreateMaybeMessage<::research_scann::GenericFeatureVector_RestrictTokens>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

enum GenericFeatureVector_FeatureType : int {
  GenericFeatureVector_FeatureType_UNKNOWN = 0,
  GenericFeatureVector_FeatureType_INT64 = 1,
  GenericFeatureVector_FeatureType_FLOAT = 2,
  GenericFeatureVector_FeatureType_DOUBLE = 3,
  GenericFeatureVector_FeatureType_STRING = 4,
  GenericFeatureVector_FeatureType_BINARY = 5
};
bool GenericFeatureVector_FeatureType_IsValid(int value);
constexpr GenericFeatureVector_FeatureType GenericFeatureVector_FeatureType_FeatureType_MIN = GenericFeatureVector_FeatureType_UNKNOWN;
constexpr GenericFeatureVector_FeatureType GenericFeatureVector_FeatureType_FeatureType_MAX = GenericFeatureVector_FeatureType_BINARY;
constexpr int GenericFeatureVector_FeatureType_FeatureType_ARRAYSIZE = GenericFeatureVector_FeatureType_FeatureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GenericFeatureVector_FeatureType_descriptor();
template<typename T>
inline const std::string& GenericFeatureVector_FeatureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GenericFeatureVector_FeatureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GenericFeatureVector_FeatureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GenericFeatureVector_FeatureType_descriptor(), enum_t_value);
}
inline bool GenericFeatureVector_FeatureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GenericFeatureVector_FeatureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GenericFeatureVector_FeatureType>(
    GenericFeatureVector_FeatureType_descriptor(), name, value);
}
enum GenericFeatureVector_FeatureNorm : int {
  GenericFeatureVector_FeatureNorm_NONE = 0,
  GenericFeatureVector_FeatureNorm_UNITL2NORM = 1,
  GenericFeatureVector_FeatureNorm_STDGAUSSNORM = 2,
  GenericFeatureVector_FeatureNorm_UNITL1NORM = 3
};
bool GenericFeatureVector_FeatureNorm_IsValid(int value);
constexpr GenericFeatureVector_FeatureNorm GenericFeatureVector_FeatureNorm_FeatureNorm_MIN = GenericFeatureVector_FeatureNorm_NONE;
constexpr GenericFeatureVector_FeatureNorm GenericFeatureVector_FeatureNorm_FeatureNorm_MAX = GenericFeatureVector_FeatureNorm_UNITL1NORM;
constexpr int GenericFeatureVector_FeatureNorm_FeatureNorm_ARRAYSIZE = GenericFeatureVector_FeatureNorm_FeatureNorm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GenericFeatureVector_FeatureNorm_descriptor();
template<typename T>
inline const std::string& GenericFeatureVector_FeatureNorm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GenericFeatureVector_FeatureNorm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GenericFeatureVector_FeatureNorm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GenericFeatureVector_FeatureNorm_descriptor(), enum_t_value);
}
inline bool GenericFeatureVector_FeatureNorm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GenericFeatureVector_FeatureNorm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GenericFeatureVector_FeatureNorm>(
    GenericFeatureVector_FeatureNorm_descriptor(), name, value);
}
// ===================================================================

class GenericFeatureVector_Crowding final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.GenericFeatureVector.Crowding) */ {
 public:
  inline GenericFeatureVector_Crowding() : GenericFeatureVector_Crowding(nullptr) {}
  ~GenericFeatureVector_Crowding() override;
  explicit constexpr GenericFeatureVector_Crowding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericFeatureVector_Crowding(const GenericFeatureVector_Crowding& from);
  GenericFeatureVector_Crowding(GenericFeatureVector_Crowding&& from) noexcept
    : GenericFeatureVector_Crowding() {
    *this = ::std::move(from);
  }

  inline GenericFeatureVector_Crowding& operator=(const GenericFeatureVector_Crowding& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericFeatureVector_Crowding& operator=(GenericFeatureVector_Crowding&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenericFeatureVector_Crowding& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericFeatureVector_Crowding* internal_default_instance() {
    return reinterpret_cast<const GenericFeatureVector_Crowding*>(
               &_GenericFeatureVector_Crowding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenericFeatureVector_Crowding& a, GenericFeatureVector_Crowding& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericFeatureVector_Crowding* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericFeatureVector_Crowding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericFeatureVector_Crowding* New() const final {
    return new GenericFeatureVector_Crowding();
  }

  GenericFeatureVector_Crowding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericFeatureVector_Crowding>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenericFeatureVector_Crowding& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenericFeatureVector_Crowding& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericFeatureVector_Crowding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.GenericFeatureVector.Crowding";
  }
  protected:
  explicit GenericFeatureVector_Crowding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrowdingAttributeFieldNumber = 1,
  };
  // optional int64 crowding_attribute = 1;
  bool has_crowding_attribute() const;
  private:
  bool _internal_has_crowding_attribute() const;
  public:
  void clear_crowding_attribute();
  ::PROTOBUF_NAMESPACE_ID::int64 crowding_attribute() const;
  void set_crowding_attribute(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_crowding_attribute() const;
  void _internal_set_crowding_attribute(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:research_scann.GenericFeatureVector.Crowding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 crowding_attribute_;
  friend struct ::TableStruct_scann_2fdata_5fformat_2ffeatures_2eproto;
};
// -------------------------------------------------------------------

class GenericFeatureVector_RestrictTokens final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.GenericFeatureVector.RestrictTokens) */ {
 public:
  inline GenericFeatureVector_RestrictTokens() : GenericFeatureVector_RestrictTokens(nullptr) {}
  ~GenericFeatureVector_RestrictTokens() override;
  explicit constexpr GenericFeatureVector_RestrictTokens(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericFeatureVector_RestrictTokens(const GenericFeatureVector_RestrictTokens& from);
  GenericFeatureVector_RestrictTokens(GenericFeatureVector_RestrictTokens&& from) noexcept
    : GenericFeatureVector_RestrictTokens() {
    *this = ::std::move(from);
  }

  inline GenericFeatureVector_RestrictTokens& operator=(const GenericFeatureVector_RestrictTokens& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericFeatureVector_RestrictTokens& operator=(GenericFeatureVector_RestrictTokens&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenericFeatureVector_RestrictTokens& default_instance() {
    return *internal_default_instance();
  }
  enum V2RestrictsCase {
    kEasyDefinition = 6,
    kTokens = 5,
    kDefinition = 4,
    V2_RESTRICTS_NOT_SET = 0,
  };

  static inline const GenericFeatureVector_RestrictTokens* internal_default_instance() {
    return reinterpret_cast<const GenericFeatureVector_RestrictTokens*>(
               &_GenericFeatureVector_RestrictTokens_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenericFeatureVector_RestrictTokens& a, GenericFeatureVector_RestrictTokens& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericFeatureVector_RestrictTokens* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericFeatureVector_RestrictTokens* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericFeatureVector_RestrictTokens* New() const final {
    return new GenericFeatureVector_RestrictTokens();
  }

  GenericFeatureVector_RestrictTokens* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericFeatureVector_RestrictTokens>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenericFeatureVector_RestrictTokens& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenericFeatureVector_RestrictTokens& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericFeatureVector_RestrictTokens* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.GenericFeatureVector.RestrictTokens";
  }
  protected:
  explicit GenericFeatureVector_RestrictTokens(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenMembershipFieldNumber = 1,
    kWhitelistTokenFieldNumber = 2,
    kBlacklistTokenFieldNumber = 3,
    kV3CompatibleNamespaceFieldNumber = 8,
    kV3FieldNumber = 7,
    kEasyDefinitionFieldNumber = 6,
    kTokensFieldNumber = 5,
    kDefinitionFieldNumber = 4,
  };
  // repeated int64 token_membership = 1 [packed = true];
  int token_membership_size() const;
  private:
  int _internal_token_membership_size() const;
  public:
  void clear_token_membership();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_token_membership(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_token_membership() const;
  void _internal_add_token_membership(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_token_membership();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 token_membership(int index) const;
  void set_token_membership(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_token_membership(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      token_membership() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_token_membership();

  // repeated int64 whitelist_token = 2 [packed = true];
  int whitelist_token_size() const;
  private:
  int _internal_whitelist_token_size() const;
  public:
  void clear_whitelist_token();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_whitelist_token(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_whitelist_token() const;
  void _internal_add_whitelist_token(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_whitelist_token();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 whitelist_token(int index) const;
  void set_whitelist_token(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_whitelist_token(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      whitelist_token() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_whitelist_token();

  // repeated int64 blacklist_token = 3 [packed = true];
  int blacklist_token_size() const;
  private:
  int _internal_blacklist_token_size() const;
  public:
  void clear_blacklist_token();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_blacklist_token(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_blacklist_token() const;
  void _internal_add_blacklist_token(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_blacklist_token();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 blacklist_token(int index) const;
  void set_blacklist_token(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_blacklist_token(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      blacklist_token() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_blacklist_token();

  // optional string v3_compatible_namespace = 8;
  bool has_v3_compatible_namespace() const;
  private:
  bool _internal_has_v3_compatible_namespace() const;
  public:
  void clear_v3_compatible_namespace();
  const std::string& v3_compatible_namespace() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_v3_compatible_namespace(ArgT0&& arg0, ArgT... args);
  std::string* mutable_v3_compatible_namespace();
  PROTOBUF_MUST_USE_RESULT std::string* release_v3_compatible_namespace();
  void set_allocated_v3_compatible_namespace(std::string* v3_compatible_namespace);
  private:
  const std::string& _internal_v3_compatible_namespace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v3_compatible_namespace(const std::string& value);
  std::string* _internal_mutable_v3_compatible_namespace();
  public:

  // optional .research_scann.V3Restrict v3 = 7;
  bool has_v3() const;
  private:
  bool _internal_has_v3() const;
  public:
  void clear_v3();
  const ::research_scann::V3Restrict& v3() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::V3Restrict* release_v3();
  ::research_scann::V3Restrict* mutable_v3();
  void set_allocated_v3(::research_scann::V3Restrict* v3);
  private:
  const ::research_scann::V3Restrict& _internal_v3() const;
  ::research_scann::V3Restrict* _internal_mutable_v3();
  public:
  void unsafe_arena_set_allocated_v3(
      ::research_scann::V3Restrict* v3);
  ::research_scann::V3Restrict* unsafe_arena_release_v3();

  // .research_scann.coscann.EasyRestrictDefinition easy_definition = 6;
  bool has_easy_definition() const;
  private:
  bool _internal_has_easy_definition() const;
  public:
  void clear_easy_definition();
  const ::research_scann::coscann::EasyRestrictDefinition& easy_definition() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::coscann::EasyRestrictDefinition* release_easy_definition();
  ::research_scann::coscann::EasyRestrictDefinition* mutable_easy_definition();
  void set_allocated_easy_definition(::research_scann::coscann::EasyRestrictDefinition* easy_definition);
  private:
  const ::research_scann::coscann::EasyRestrictDefinition& _internal_easy_definition() const;
  ::research_scann::coscann::EasyRestrictDefinition* _internal_mutable_easy_definition();
  public:
  void unsafe_arena_set_allocated_easy_definition(
      ::research_scann::coscann::EasyRestrictDefinition* easy_definition);
  ::research_scann::coscann::EasyRestrictDefinition* unsafe_arena_release_easy_definition();

  // .research_scann.coscann.RestrictTokensV2 tokens = 5;
  bool has_tokens() const;
  private:
  bool _internal_has_tokens() const;
  public:
  void clear_tokens();
  const ::research_scann::coscann::RestrictTokensV2& tokens() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::coscann::RestrictTokensV2* release_tokens();
  ::research_scann::coscann::RestrictTokensV2* mutable_tokens();
  void set_allocated_tokens(::research_scann::coscann::RestrictTokensV2* tokens);
  private:
  const ::research_scann::coscann::RestrictTokensV2& _internal_tokens() const;
  ::research_scann::coscann::RestrictTokensV2* _internal_mutable_tokens();
  public:
  void unsafe_arena_set_allocated_tokens(
      ::research_scann::coscann::RestrictTokensV2* tokens);
  ::research_scann::coscann::RestrictTokensV2* unsafe_arena_release_tokens();

  // .research_scann.coscann.RestrictDefinition definition = 4;
  bool has_definition() const;
  private:
  bool _internal_has_definition() const;
  public:
  void clear_definition();
  const ::research_scann::coscann::RestrictDefinition& definition() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::coscann::RestrictDefinition* release_definition();
  ::research_scann::coscann::RestrictDefinition* mutable_definition();
  void set_allocated_definition(::research_scann::coscann::RestrictDefinition* definition);
  private:
  const ::research_scann::coscann::RestrictDefinition& _internal_definition() const;
  ::research_scann::coscann::RestrictDefinition* _internal_mutable_definition();
  public:
  void unsafe_arena_set_allocated_definition(
      ::research_scann::coscann::RestrictDefinition* definition);
  ::research_scann::coscann::RestrictDefinition* unsafe_arena_release_definition();

  void clear_v2_restricts();
  V2RestrictsCase v2_restricts_case() const;
  // @@protoc_insertion_point(class_scope:research_scann.GenericFeatureVector.RestrictTokens)
 private:
  class _Internal;
  void set_has_easy_definition();
  void set_has_tokens();
  void set_has_definition();

  inline bool has_v2_restricts() const;
  inline void clear_has_v2_restricts();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > token_membership_;
  mutable std::atomic<int> _token_membership_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > whitelist_token_;
  mutable std::atomic<int> _whitelist_token_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > blacklist_token_;
  mutable std::atomic<int> _blacklist_token_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v3_compatible_namespace_;
  ::research_scann::V3Restrict* v3_;
  union V2RestrictsUnion {
    constexpr V2RestrictsUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::research_scann::coscann::EasyRestrictDefinition* easy_definition_;
    ::research_scann::coscann::RestrictTokensV2* tokens_;
    ::research_scann::coscann::RestrictDefinition* definition_;
  } v2_restricts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_scann_2fdata_5fformat_2ffeatures_2eproto;
};
// -------------------------------------------------------------------

class GenericFeatureVector_FixedPointMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.GenericFeatureVector.FixedPointMetadata) */ {
 public:
  inline GenericFeatureVector_FixedPointMetadata() : GenericFeatureVector_FixedPointMetadata(nullptr) {}
  ~GenericFeatureVector_FixedPointMetadata() override;
  explicit constexpr GenericFeatureVector_FixedPointMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericFeatureVector_FixedPointMetadata(const GenericFeatureVector_FixedPointMetadata& from);
  GenericFeatureVector_FixedPointMetadata(GenericFeatureVector_FixedPointMetadata&& from) noexcept
    : GenericFeatureVector_FixedPointMetadata() {
    *this = ::std::move(from);
  }

  inline GenericFeatureVector_FixedPointMetadata& operator=(const GenericFeatureVector_FixedPointMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericFeatureVector_FixedPointMetadata& operator=(GenericFeatureVector_FixedPointMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenericFeatureVector_FixedPointMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericFeatureVector_FixedPointMetadata* internal_default_instance() {
    return reinterpret_cast<const GenericFeatureVector_FixedPointMetadata*>(
               &_GenericFeatureVector_FixedPointMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GenericFeatureVector_FixedPointMetadata& a, GenericFeatureVector_FixedPointMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericFeatureVector_FixedPointMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericFeatureVector_FixedPointMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericFeatureVector_FixedPointMetadata* New() const final {
    return new GenericFeatureVector_FixedPointMetadata();
  }

  GenericFeatureVector_FixedPointMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericFeatureVector_FixedPointMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenericFeatureVector_FixedPointMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenericFeatureVector_FixedPointMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericFeatureVector_FixedPointMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.GenericFeatureVector.FixedPointMetadata";
  }
  protected:
  explicit GenericFeatureVector_FixedPointMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSquaredL2NormFieldNumber = 1,
  };
  // optional float squared_l2_norm = 1;
  bool has_squared_l2_norm() const;
  private:
  bool _internal_has_squared_l2_norm() const;
  public:
  void clear_squared_l2_norm();
  float squared_l2_norm() const;
  void set_squared_l2_norm(float value);
  private:
  float _internal_squared_l2_norm() const;
  void _internal_set_squared_l2_norm(float value);
  public:

  // @@protoc_insertion_point(class_scope:research_scann.GenericFeatureVector.FixedPointMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float squared_l2_norm_;
  friend struct ::TableStruct_scann_2fdata_5fformat_2ffeatures_2eproto;
};
// -------------------------------------------------------------------

class GenericFeatureVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.GenericFeatureVector) */ {
 public:
  inline GenericFeatureVector() : GenericFeatureVector(nullptr) {}
  ~GenericFeatureVector() override;
  explicit constexpr GenericFeatureVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericFeatureVector(const GenericFeatureVector& from);
  GenericFeatureVector(GenericFeatureVector&& from) noexcept
    : GenericFeatureVector() {
    *this = ::std::move(from);
  }

  inline GenericFeatureVector& operator=(const GenericFeatureVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericFeatureVector& operator=(GenericFeatureVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenericFeatureVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericFeatureVector* internal_default_instance() {
    return reinterpret_cast<const GenericFeatureVector*>(
               &_GenericFeatureVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GenericFeatureVector& a, GenericFeatureVector& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericFeatureVector* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericFeatureVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericFeatureVector* New() const final {
    return new GenericFeatureVector();
  }

  GenericFeatureVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericFeatureVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenericFeatureVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenericFeatureVector& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericFeatureVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.GenericFeatureVector";
  }
  protected:
  explicit GenericFeatureVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GenericFeatureVector_Crowding Crowding;
  typedef GenericFeatureVector_RestrictTokens RestrictTokens;
  typedef GenericFeatureVector_FixedPointMetadata FixedPointMetadata;

  typedef GenericFeatureVector_FeatureType FeatureType;
  static constexpr FeatureType UNKNOWN =
    GenericFeatureVector_FeatureType_UNKNOWN;
  static constexpr FeatureType INT64 =
    GenericFeatureVector_FeatureType_INT64;
  static constexpr FeatureType FLOAT =
    GenericFeatureVector_FeatureType_FLOAT;
  static constexpr FeatureType DOUBLE =
    GenericFeatureVector_FeatureType_DOUBLE;
  static constexpr FeatureType STRING =
    GenericFeatureVector_FeatureType_STRING;
  static constexpr FeatureType BINARY =
    GenericFeatureVector_FeatureType_BINARY;
  static inline bool FeatureType_IsValid(int value) {
    return GenericFeatureVector_FeatureType_IsValid(value);
  }
  static constexpr FeatureType FeatureType_MIN =
    GenericFeatureVector_FeatureType_FeatureType_MIN;
  static constexpr FeatureType FeatureType_MAX =
    GenericFeatureVector_FeatureType_FeatureType_MAX;
  static constexpr int FeatureType_ARRAYSIZE =
    GenericFeatureVector_FeatureType_FeatureType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FeatureType_descriptor() {
    return GenericFeatureVector_FeatureType_descriptor();
  }
  template<typename T>
  static inline const std::string& FeatureType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FeatureType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FeatureType_Name.");
    return GenericFeatureVector_FeatureType_Name(enum_t_value);
  }
  static inline bool FeatureType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FeatureType* value) {
    return GenericFeatureVector_FeatureType_Parse(name, value);
  }

  typedef GenericFeatureVector_FeatureNorm FeatureNorm;
  static constexpr FeatureNorm NONE =
    GenericFeatureVector_FeatureNorm_NONE;
  static constexpr FeatureNorm UNITL2NORM =
    GenericFeatureVector_FeatureNorm_UNITL2NORM;
  static constexpr FeatureNorm STDGAUSSNORM =
    GenericFeatureVector_FeatureNorm_STDGAUSSNORM;
  static constexpr FeatureNorm UNITL1NORM =
    GenericFeatureVector_FeatureNorm_UNITL1NORM;
  static inline bool FeatureNorm_IsValid(int value) {
    return GenericFeatureVector_FeatureNorm_IsValid(value);
  }
  static constexpr FeatureNorm FeatureNorm_MIN =
    GenericFeatureVector_FeatureNorm_FeatureNorm_MIN;
  static constexpr FeatureNorm FeatureNorm_MAX =
    GenericFeatureVector_FeatureNorm_FeatureNorm_MAX;
  static constexpr int FeatureNorm_ARRAYSIZE =
    GenericFeatureVector_FeatureNorm_FeatureNorm_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FeatureNorm_descriptor() {
    return GenericFeatureVector_FeatureNorm_descriptor();
  }
  template<typename T>
  static inline const std::string& FeatureNorm_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FeatureNorm>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FeatureNorm_Name.");
    return GenericFeatureVector_FeatureNorm_Name(enum_t_value);
  }
  static inline bool FeatureNorm_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FeatureNorm* value) {
    return GenericFeatureVector_FeatureNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureValueInt64FieldNumber = 3,
    kFeatureValueFloatFieldNumber = 4,
    kFeatureValueDoubleFieldNumber = 5,
    kFeatureIndexFieldNumber = 6,
    kTokensFieldNumber = 14,
    kDataIdStrFieldNumber = 2,
    kFeatureValueStringFieldNumber = 13,
    kClassLabelFieldNumber = 16,
    kUserinfoFieldNumber = 17,
    kRestrictTokensFieldNumber = 15,
    kCrowdingFieldNumber = 18,
    kFixedPointMetadataFieldNumber = 19,
    kExpirationTimestampFieldNumber = 20,
    kFeatureTypeFieldNumber = 1,
    kWeightFieldNumber = 8,
    kNormTypeFieldNumber = 9,
    kFeatureDimFieldNumber = 10,
  };
  // repeated int64 feature_value_int64 = 3 [packed = true];
  int feature_value_int64_size() const;
  private:
  int _internal_feature_value_int64_size() const;
  public:
  void clear_feature_value_int64();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_feature_value_int64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_feature_value_int64() const;
  void _internal_add_feature_value_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_feature_value_int64();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 feature_value_int64(int index) const;
  void set_feature_value_int64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_feature_value_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      feature_value_int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_feature_value_int64();

  // repeated float feature_value_float = 4 [packed = true];
  int feature_value_float_size() const;
  private:
  int _internal_feature_value_float_size() const;
  public:
  void clear_feature_value_float();
  private:
  float _internal_feature_value_float(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_feature_value_float() const;
  void _internal_add_feature_value_float(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_feature_value_float();
  public:
  float feature_value_float(int index) const;
  void set_feature_value_float(int index, float value);
  void add_feature_value_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      feature_value_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_feature_value_float();

  // repeated double feature_value_double = 5 [packed = true];
  int feature_value_double_size() const;
  private:
  int _internal_feature_value_double_size() const;
  public:
  void clear_feature_value_double();
  private:
  double _internal_feature_value_double(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_feature_value_double() const;
  void _internal_add_feature_value_double(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_feature_value_double();
  public:
  double feature_value_double(int index) const;
  void set_feature_value_double(int index, double value);
  void add_feature_value_double(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      feature_value_double() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_feature_value_double();

  // repeated uint64 feature_index = 6 [packed = true];
  int feature_index_size() const;
  private:
  int _internal_feature_index_size() const;
  public:
  void clear_feature_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_feature_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_feature_index() const;
  void _internal_add_feature_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_feature_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 feature_index(int index) const;
  void set_feature_index(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_feature_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      feature_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_feature_index();

  // repeated int32 tokens = 14 [packed = true, deprecated = true];
  PROTOBUF_DEPRECATED int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_tokens();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tokens(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_tokens() const;
  void _internal_add_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_tokens();
  public:
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 tokens(int index) const;
  PROTOBUF_DEPRECATED void set_tokens(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  PROTOBUF_DEPRECATED void add_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      tokens() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_tokens();

  // optional bytes data_id_str = 2;
  bool has_data_id_str() const;
  private:
  bool _internal_has_data_id_str() const;
  public:
  void clear_data_id_str();
  const std::string& data_id_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_id_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_id_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_data_id_str();
  void set_allocated_data_id_str(std::string* data_id_str);
  private:
  const std::string& _internal_data_id_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_id_str(const std::string& value);
  std::string* _internal_mutable_data_id_str();
  public:

  // optional bytes feature_value_string = 13;
  bool has_feature_value_string() const;
  private:
  bool _internal_has_feature_value_string() const;
  public:
  void clear_feature_value_string();
  const std::string& feature_value_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_feature_value_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_feature_value_string();
  PROTOBUF_MUST_USE_RESULT std::string* release_feature_value_string();
  void set_allocated_feature_value_string(std::string* feature_value_string);
  private:
  const std::string& _internal_feature_value_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feature_value_string(const std::string& value);
  std::string* _internal_mutable_feature_value_string();
  public:

  // optional string class_label = 16;
  bool has_class_label() const;
  private:
  bool _internal_has_class_label() const;
  public:
  void clear_class_label();
  const std::string& class_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_label();
  PROTOBUF_MUST_USE_RESULT std::string* release_class_label();
  void set_allocated_class_label(std::string* class_label);
  private:
  const std::string& _internal_class_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_label(const std::string& value);
  std::string* _internal_mutable_class_label();
  public:

  // optional bytes userinfo = 17 [ctype = CORD];
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
 private:
  // Hidden due to unknown ctype option.
  const std::string& userinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userinfo();
  PROTOBUF_MUST_USE_RESULT std::string* release_userinfo();
  void set_allocated_userinfo(std::string* userinfo);
  private:
  const std::string& _internal_userinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userinfo(const std::string& value);
  std::string* _internal_mutable_userinfo();
  public:
 public:

  // optional .research_scann.GenericFeatureVector.RestrictTokens restrict_tokens = 15;
  bool has_restrict_tokens() const;
  private:
  bool _internal_has_restrict_tokens() const;
  public:
  void clear_restrict_tokens();
  const ::research_scann::GenericFeatureVector_RestrictTokens& restrict_tokens() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::GenericFeatureVector_RestrictTokens* release_restrict_tokens();
  ::research_scann::GenericFeatureVector_RestrictTokens* mutable_restrict_tokens();
  void set_allocated_restrict_tokens(::research_scann::GenericFeatureVector_RestrictTokens* restrict_tokens);
  private:
  const ::research_scann::GenericFeatureVector_RestrictTokens& _internal_restrict_tokens() const;
  ::research_scann::GenericFeatureVector_RestrictTokens* _internal_mutable_restrict_tokens();
  public:
  void unsafe_arena_set_allocated_restrict_tokens(
      ::research_scann::GenericFeatureVector_RestrictTokens* restrict_tokens);
  ::research_scann::GenericFeatureVector_RestrictTokens* unsafe_arena_release_restrict_tokens();

  // optional .research_scann.GenericFeatureVector.Crowding crowding = 18;
  bool has_crowding() const;
  private:
  bool _internal_has_crowding() const;
  public:
  void clear_crowding();
  const ::research_scann::GenericFeatureVector_Crowding& crowding() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::GenericFeatureVector_Crowding* release_crowding();
  ::research_scann::GenericFeatureVector_Crowding* mutable_crowding();
  void set_allocated_crowding(::research_scann::GenericFeatureVector_Crowding* crowding);
  private:
  const ::research_scann::GenericFeatureVector_Crowding& _internal_crowding() const;
  ::research_scann::GenericFeatureVector_Crowding* _internal_mutable_crowding();
  public:
  void unsafe_arena_set_allocated_crowding(
      ::research_scann::GenericFeatureVector_Crowding* crowding);
  ::research_scann::GenericFeatureVector_Crowding* unsafe_arena_release_crowding();

  // optional .research_scann.GenericFeatureVector.FixedPointMetadata fixed_point_metadata = 19;
  bool has_fixed_point_metadata() const;
  private:
  bool _internal_has_fixed_point_metadata() const;
  public:
  void clear_fixed_point_metadata();
  const ::research_scann::GenericFeatureVector_FixedPointMetadata& fixed_point_metadata() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::GenericFeatureVector_FixedPointMetadata* release_fixed_point_metadata();
  ::research_scann::GenericFeatureVector_FixedPointMetadata* mutable_fixed_point_metadata();
  void set_allocated_fixed_point_metadata(::research_scann::GenericFeatureVector_FixedPointMetadata* fixed_point_metadata);
  private:
  const ::research_scann::GenericFeatureVector_FixedPointMetadata& _internal_fixed_point_metadata() const;
  ::research_scann::GenericFeatureVector_FixedPointMetadata* _internal_mutable_fixed_point_metadata();
  public:
  void unsafe_arena_set_allocated_fixed_point_metadata(
      ::research_scann::GenericFeatureVector_FixedPointMetadata* fixed_point_metadata);
  ::research_scann::GenericFeatureVector_FixedPointMetadata* unsafe_arena_release_fixed_point_metadata();

  // optional .google.protobuf.Timestamp expiration_timestamp = 20;
  bool has_expiration_timestamp() const;
  private:
  bool _internal_has_expiration_timestamp() const;
  public:
  void clear_expiration_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expiration_timestamp() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_expiration_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiration_timestamp();
  void set_allocated_expiration_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* expiration_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiration_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiration_timestamp();
  public:
  void unsafe_arena_set_allocated_expiration_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* expiration_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiration_timestamp();

  // required .research_scann.GenericFeatureVector.FeatureType feature_type = 1;
  bool has_feature_type() const;
  private:
  bool _internal_has_feature_type() const;
  public:
  void clear_feature_type();
  ::research_scann::GenericFeatureVector_FeatureType feature_type() const;
  void set_feature_type(::research_scann::GenericFeatureVector_FeatureType value);
  private:
  ::research_scann::GenericFeatureVector_FeatureType _internal_feature_type() const;
  void _internal_set_feature_type(::research_scann::GenericFeatureVector_FeatureType value);
  public:

  // optional float weight = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  PROTOBUF_DEPRECATED void clear_weight();
  PROTOBUF_DEPRECATED float weight() const;
  PROTOBUF_DEPRECATED void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // optional .research_scann.GenericFeatureVector.FeatureNorm norm_type = 9 [default = NONE];
  bool has_norm_type() const;
  private:
  bool _internal_has_norm_type() const;
  public:
  void clear_norm_type();
  ::research_scann::GenericFeatureVector_FeatureNorm norm_type() const;
  void set_norm_type(::research_scann::GenericFeatureVector_FeatureNorm value);
  private:
  ::research_scann::GenericFeatureVector_FeatureNorm _internal_norm_type() const;
  void _internal_set_norm_type(::research_scann::GenericFeatureVector_FeatureNorm value);
  public:

  // optional uint64 feature_dim = 10 [default = 18446744073709551615, deprecated = true];
  PROTOBUF_DEPRECATED bool has_feature_dim() const;
  private:
  bool _internal_has_feature_dim() const;
  public:
  PROTOBUF_DEPRECATED void clear_feature_dim();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint64 feature_dim() const;
  PROTOBUF_DEPRECATED void set_feature_dim(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_feature_dim() const;
  void _internal_set_feature_dim(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(GenericFeatureVector)
  // @@protoc_insertion_point(class_scope:research_scann.GenericFeatureVector)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > feature_value_int64_;
  mutable std::atomic<int> _feature_value_int64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > feature_value_float_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > feature_value_double_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > feature_index_;
  mutable std::atomic<int> _feature_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > tokens_;
  mutable std::atomic<int> _tokens_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_id_str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_value_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userinfo_;
  ::research_scann::GenericFeatureVector_RestrictTokens* restrict_tokens_;
  ::research_scann::GenericFeatureVector_Crowding* crowding_;
  ::research_scann::GenericFeatureVector_FixedPointMetadata* fixed_point_metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expiration_timestamp_;
  int feature_type_;
  float weight_;
  int norm_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 feature_dim_;
  friend struct ::TableStruct_scann_2fdata_5fformat_2ffeatures_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GenericFeatureVector_Crowding

// optional int64 crowding_attribute = 1;
inline bool GenericFeatureVector_Crowding::_internal_has_crowding_attribute() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GenericFeatureVector_Crowding::has_crowding_attribute() const {
  return _internal_has_crowding_attribute();
}
inline void GenericFeatureVector_Crowding::clear_crowding_attribute() {
  crowding_attribute_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericFeatureVector_Crowding::_internal_crowding_attribute() const {
  return crowding_attribute_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericFeatureVector_Crowding::crowding_attribute() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.Crowding.crowding_attribute)
  return _internal_crowding_attribute();
}
inline void GenericFeatureVector_Crowding::_internal_set_crowding_attribute(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  crowding_attribute_ = value;
}
inline void GenericFeatureVector_Crowding::set_crowding_attribute(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_crowding_attribute(value);
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.Crowding.crowding_attribute)
}

// -------------------------------------------------------------------

// GenericFeatureVector_RestrictTokens

// optional .research_scann.V3Restrict v3 = 7;
inline bool GenericFeatureVector_RestrictTokens::_internal_has_v3() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || v3_ != nullptr);
  return value;
}
inline bool GenericFeatureVector_RestrictTokens::has_v3() const {
  return _internal_has_v3();
}
inline const ::research_scann::V3Restrict& GenericFeatureVector_RestrictTokens::_internal_v3() const {
  const ::research_scann::V3Restrict* p = v3_;
  return p != nullptr ? *p : reinterpret_cast<const ::research_scann::V3Restrict&>(
      ::research_scann::_V3Restrict_default_instance_);
}
inline const ::research_scann::V3Restrict& GenericFeatureVector_RestrictTokens::v3() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.RestrictTokens.v3)
  return _internal_v3();
}
inline void GenericFeatureVector_RestrictTokens::unsafe_arena_set_allocated_v3(
    ::research_scann::V3Restrict* v3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v3_);
  }
  v3_ = v3;
  if (v3) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.GenericFeatureVector.RestrictTokens.v3)
}
inline ::research_scann::V3Restrict* GenericFeatureVector_RestrictTokens::release_v3() {
  _has_bits_[0] &= ~0x00000002u;
  ::research_scann::V3Restrict* temp = v3_;
  v3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::research_scann::V3Restrict* GenericFeatureVector_RestrictTokens::unsafe_arena_release_v3() {
  // @@protoc_insertion_point(field_release:research_scann.GenericFeatureVector.RestrictTokens.v3)
  _has_bits_[0] &= ~0x00000002u;
  ::research_scann::V3Restrict* temp = v3_;
  v3_ = nullptr;
  return temp;
}
inline ::research_scann::V3Restrict* GenericFeatureVector_RestrictTokens::_internal_mutable_v3() {
  _has_bits_[0] |= 0x00000002u;
  if (v3_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::V3Restrict>(GetArenaForAllocation());
    v3_ = p;
  }
  return v3_;
}
inline ::research_scann::V3Restrict* GenericFeatureVector_RestrictTokens::mutable_v3() {
  ::research_scann::V3Restrict* _msg = _internal_mutable_v3();
  // @@protoc_insertion_point(field_mutable:research_scann.GenericFeatureVector.RestrictTokens.v3)
  return _msg;
}
inline void GenericFeatureVector_RestrictTokens::set_allocated_v3(::research_scann::V3Restrict* v3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(v3_);
  }
  if (v3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v3));
    if (message_arena != submessage_arena) {
      v3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  v3_ = v3;
  // @@protoc_insertion_point(field_set_allocated:research_scann.GenericFeatureVector.RestrictTokens.v3)
}

// repeated int64 token_membership = 1 [packed = true];
inline int GenericFeatureVector_RestrictTokens::_internal_token_membership_size() const {
  return token_membership_.size();
}
inline int GenericFeatureVector_RestrictTokens::token_membership_size() const {
  return _internal_token_membership_size();
}
inline void GenericFeatureVector_RestrictTokens::clear_token_membership() {
  token_membership_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericFeatureVector_RestrictTokens::_internal_token_membership(int index) const {
  return token_membership_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericFeatureVector_RestrictTokens::token_membership(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.RestrictTokens.token_membership)
  return _internal_token_membership(index);
}
inline void GenericFeatureVector_RestrictTokens::set_token_membership(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  token_membership_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.RestrictTokens.token_membership)
}
inline void GenericFeatureVector_RestrictTokens::_internal_add_token_membership(::PROTOBUF_NAMESPACE_ID::int64 value) {
  token_membership_.Add(value);
}
inline void GenericFeatureVector_RestrictTokens::add_token_membership(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_token_membership(value);
  // @@protoc_insertion_point(field_add:research_scann.GenericFeatureVector.RestrictTokens.token_membership)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GenericFeatureVector_RestrictTokens::_internal_token_membership() const {
  return token_membership_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GenericFeatureVector_RestrictTokens::token_membership() const {
  // @@protoc_insertion_point(field_list:research_scann.GenericFeatureVector.RestrictTokens.token_membership)
  return _internal_token_membership();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GenericFeatureVector_RestrictTokens::_internal_mutable_token_membership() {
  return &token_membership_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GenericFeatureVector_RestrictTokens::mutable_token_membership() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.GenericFeatureVector.RestrictTokens.token_membership)
  return _internal_mutable_token_membership();
}

// repeated int64 whitelist_token = 2 [packed = true];
inline int GenericFeatureVector_RestrictTokens::_internal_whitelist_token_size() const {
  return whitelist_token_.size();
}
inline int GenericFeatureVector_RestrictTokens::whitelist_token_size() const {
  return _internal_whitelist_token_size();
}
inline void GenericFeatureVector_RestrictTokens::clear_whitelist_token() {
  whitelist_token_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericFeatureVector_RestrictTokens::_internal_whitelist_token(int index) const {
  return whitelist_token_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericFeatureVector_RestrictTokens::whitelist_token(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.RestrictTokens.whitelist_token)
  return _internal_whitelist_token(index);
}
inline void GenericFeatureVector_RestrictTokens::set_whitelist_token(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  whitelist_token_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.RestrictTokens.whitelist_token)
}
inline void GenericFeatureVector_RestrictTokens::_internal_add_whitelist_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  whitelist_token_.Add(value);
}
inline void GenericFeatureVector_RestrictTokens::add_whitelist_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_whitelist_token(value);
  // @@protoc_insertion_point(field_add:research_scann.GenericFeatureVector.RestrictTokens.whitelist_token)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GenericFeatureVector_RestrictTokens::_internal_whitelist_token() const {
  return whitelist_token_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GenericFeatureVector_RestrictTokens::whitelist_token() const {
  // @@protoc_insertion_point(field_list:research_scann.GenericFeatureVector.RestrictTokens.whitelist_token)
  return _internal_whitelist_token();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GenericFeatureVector_RestrictTokens::_internal_mutable_whitelist_token() {
  return &whitelist_token_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GenericFeatureVector_RestrictTokens::mutable_whitelist_token() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.GenericFeatureVector.RestrictTokens.whitelist_token)
  return _internal_mutable_whitelist_token();
}

// repeated int64 blacklist_token = 3 [packed = true];
inline int GenericFeatureVector_RestrictTokens::_internal_blacklist_token_size() const {
  return blacklist_token_.size();
}
inline int GenericFeatureVector_RestrictTokens::blacklist_token_size() const {
  return _internal_blacklist_token_size();
}
inline void GenericFeatureVector_RestrictTokens::clear_blacklist_token() {
  blacklist_token_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericFeatureVector_RestrictTokens::_internal_blacklist_token(int index) const {
  return blacklist_token_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericFeatureVector_RestrictTokens::blacklist_token(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.RestrictTokens.blacklist_token)
  return _internal_blacklist_token(index);
}
inline void GenericFeatureVector_RestrictTokens::set_blacklist_token(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  blacklist_token_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.RestrictTokens.blacklist_token)
}
inline void GenericFeatureVector_RestrictTokens::_internal_add_blacklist_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  blacklist_token_.Add(value);
}
inline void GenericFeatureVector_RestrictTokens::add_blacklist_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_blacklist_token(value);
  // @@protoc_insertion_point(field_add:research_scann.GenericFeatureVector.RestrictTokens.blacklist_token)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GenericFeatureVector_RestrictTokens::_internal_blacklist_token() const {
  return blacklist_token_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GenericFeatureVector_RestrictTokens::blacklist_token() const {
  // @@protoc_insertion_point(field_list:research_scann.GenericFeatureVector.RestrictTokens.blacklist_token)
  return _internal_blacklist_token();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GenericFeatureVector_RestrictTokens::_internal_mutable_blacklist_token() {
  return &blacklist_token_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GenericFeatureVector_RestrictTokens::mutable_blacklist_token() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.GenericFeatureVector.RestrictTokens.blacklist_token)
  return _internal_mutable_blacklist_token();
}

// .research_scann.coscann.EasyRestrictDefinition easy_definition = 6;
inline bool GenericFeatureVector_RestrictTokens::_internal_has_easy_definition() const {
  return v2_restricts_case() == kEasyDefinition;
}
inline bool GenericFeatureVector_RestrictTokens::has_easy_definition() const {
  return _internal_has_easy_definition();
}
inline void GenericFeatureVector_RestrictTokens::set_has_easy_definition() {
  _oneof_case_[0] = kEasyDefinition;
}
inline ::research_scann::coscann::EasyRestrictDefinition* GenericFeatureVector_RestrictTokens::release_easy_definition() {
  // @@protoc_insertion_point(field_release:research_scann.GenericFeatureVector.RestrictTokens.easy_definition)
  if (_internal_has_easy_definition()) {
    clear_has_v2_restricts();
      ::research_scann::coscann::EasyRestrictDefinition* temp = v2_restricts_.easy_definition_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    v2_restricts_.easy_definition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::research_scann::coscann::EasyRestrictDefinition& GenericFeatureVector_RestrictTokens::_internal_easy_definition() const {
  return _internal_has_easy_definition()
      ? *v2_restricts_.easy_definition_
      : reinterpret_cast< ::research_scann::coscann::EasyRestrictDefinition&>(::research_scann::coscann::_EasyRestrictDefinition_default_instance_);
}
inline const ::research_scann::coscann::EasyRestrictDefinition& GenericFeatureVector_RestrictTokens::easy_definition() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.RestrictTokens.easy_definition)
  return _internal_easy_definition();
}
inline ::research_scann::coscann::EasyRestrictDefinition* GenericFeatureVector_RestrictTokens::unsafe_arena_release_easy_definition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.GenericFeatureVector.RestrictTokens.easy_definition)
  if (_internal_has_easy_definition()) {
    clear_has_v2_restricts();
    ::research_scann::coscann::EasyRestrictDefinition* temp = v2_restricts_.easy_definition_;
    v2_restricts_.easy_definition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GenericFeatureVector_RestrictTokens::unsafe_arena_set_allocated_easy_definition(::research_scann::coscann::EasyRestrictDefinition* easy_definition) {
  clear_v2_restricts();
  if (easy_definition) {
    set_has_easy_definition();
    v2_restricts_.easy_definition_ = easy_definition;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.GenericFeatureVector.RestrictTokens.easy_definition)
}
inline ::research_scann::coscann::EasyRestrictDefinition* GenericFeatureVector_RestrictTokens::_internal_mutable_easy_definition() {
  if (!_internal_has_easy_definition()) {
    clear_v2_restricts();
    set_has_easy_definition();
    v2_restricts_.easy_definition_ = CreateMaybeMessage< ::research_scann::coscann::EasyRestrictDefinition >(GetArenaForAllocation());
  }
  return v2_restricts_.easy_definition_;
}
inline ::research_scann::coscann::EasyRestrictDefinition* GenericFeatureVector_RestrictTokens::mutable_easy_definition() {
  ::research_scann::coscann::EasyRestrictDefinition* _msg = _internal_mutable_easy_definition();
  // @@protoc_insertion_point(field_mutable:research_scann.GenericFeatureVector.RestrictTokens.easy_definition)
  return _msg;
}

// .research_scann.coscann.RestrictTokensV2 tokens = 5;
inline bool GenericFeatureVector_RestrictTokens::_internal_has_tokens() const {
  return v2_restricts_case() == kTokens;
}
inline bool GenericFeatureVector_RestrictTokens::has_tokens() const {
  return _internal_has_tokens();
}
inline void GenericFeatureVector_RestrictTokens::set_has_tokens() {
  _oneof_case_[0] = kTokens;
}
inline ::research_scann::coscann::RestrictTokensV2* GenericFeatureVector_RestrictTokens::release_tokens() {
  // @@protoc_insertion_point(field_release:research_scann.GenericFeatureVector.RestrictTokens.tokens)
  if (_internal_has_tokens()) {
    clear_has_v2_restricts();
      ::research_scann::coscann::RestrictTokensV2* temp = v2_restricts_.tokens_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    v2_restricts_.tokens_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::research_scann::coscann::RestrictTokensV2& GenericFeatureVector_RestrictTokens::_internal_tokens() const {
  return _internal_has_tokens()
      ? *v2_restricts_.tokens_
      : reinterpret_cast< ::research_scann::coscann::RestrictTokensV2&>(::research_scann::coscann::_RestrictTokensV2_default_instance_);
}
inline const ::research_scann::coscann::RestrictTokensV2& GenericFeatureVector_RestrictTokens::tokens() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.RestrictTokens.tokens)
  return _internal_tokens();
}
inline ::research_scann::coscann::RestrictTokensV2* GenericFeatureVector_RestrictTokens::unsafe_arena_release_tokens() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.GenericFeatureVector.RestrictTokens.tokens)
  if (_internal_has_tokens()) {
    clear_has_v2_restricts();
    ::research_scann::coscann::RestrictTokensV2* temp = v2_restricts_.tokens_;
    v2_restricts_.tokens_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GenericFeatureVector_RestrictTokens::unsafe_arena_set_allocated_tokens(::research_scann::coscann::RestrictTokensV2* tokens) {
  clear_v2_restricts();
  if (tokens) {
    set_has_tokens();
    v2_restricts_.tokens_ = tokens;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.GenericFeatureVector.RestrictTokens.tokens)
}
inline ::research_scann::coscann::RestrictTokensV2* GenericFeatureVector_RestrictTokens::_internal_mutable_tokens() {
  if (!_internal_has_tokens()) {
    clear_v2_restricts();
    set_has_tokens();
    v2_restricts_.tokens_ = CreateMaybeMessage< ::research_scann::coscann::RestrictTokensV2 >(GetArenaForAllocation());
  }
  return v2_restricts_.tokens_;
}
inline ::research_scann::coscann::RestrictTokensV2* GenericFeatureVector_RestrictTokens::mutable_tokens() {
  ::research_scann::coscann::RestrictTokensV2* _msg = _internal_mutable_tokens();
  // @@protoc_insertion_point(field_mutable:research_scann.GenericFeatureVector.RestrictTokens.tokens)
  return _msg;
}

// .research_scann.coscann.RestrictDefinition definition = 4;
inline bool GenericFeatureVector_RestrictTokens::_internal_has_definition() const {
  return v2_restricts_case() == kDefinition;
}
inline bool GenericFeatureVector_RestrictTokens::has_definition() const {
  return _internal_has_definition();
}
inline void GenericFeatureVector_RestrictTokens::set_has_definition() {
  _oneof_case_[0] = kDefinition;
}
inline ::research_scann::coscann::RestrictDefinition* GenericFeatureVector_RestrictTokens::release_definition() {
  // @@protoc_insertion_point(field_release:research_scann.GenericFeatureVector.RestrictTokens.definition)
  if (_internal_has_definition()) {
    clear_has_v2_restricts();
      ::research_scann::coscann::RestrictDefinition* temp = v2_restricts_.definition_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    v2_restricts_.definition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::research_scann::coscann::RestrictDefinition& GenericFeatureVector_RestrictTokens::_internal_definition() const {
  return _internal_has_definition()
      ? *v2_restricts_.definition_
      : reinterpret_cast< ::research_scann::coscann::RestrictDefinition&>(::research_scann::coscann::_RestrictDefinition_default_instance_);
}
inline const ::research_scann::coscann::RestrictDefinition& GenericFeatureVector_RestrictTokens::definition() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.RestrictTokens.definition)
  return _internal_definition();
}
inline ::research_scann::coscann::RestrictDefinition* GenericFeatureVector_RestrictTokens::unsafe_arena_release_definition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.GenericFeatureVector.RestrictTokens.definition)
  if (_internal_has_definition()) {
    clear_has_v2_restricts();
    ::research_scann::coscann::RestrictDefinition* temp = v2_restricts_.definition_;
    v2_restricts_.definition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GenericFeatureVector_RestrictTokens::unsafe_arena_set_allocated_definition(::research_scann::coscann::RestrictDefinition* definition) {
  clear_v2_restricts();
  if (definition) {
    set_has_definition();
    v2_restricts_.definition_ = definition;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.GenericFeatureVector.RestrictTokens.definition)
}
inline ::research_scann::coscann::RestrictDefinition* GenericFeatureVector_RestrictTokens::_internal_mutable_definition() {
  if (!_internal_has_definition()) {
    clear_v2_restricts();
    set_has_definition();
    v2_restricts_.definition_ = CreateMaybeMessage< ::research_scann::coscann::RestrictDefinition >(GetArenaForAllocation());
  }
  return v2_restricts_.definition_;
}
inline ::research_scann::coscann::RestrictDefinition* GenericFeatureVector_RestrictTokens::mutable_definition() {
  ::research_scann::coscann::RestrictDefinition* _msg = _internal_mutable_definition();
  // @@protoc_insertion_point(field_mutable:research_scann.GenericFeatureVector.RestrictTokens.definition)
  return _msg;
}

// optional string v3_compatible_namespace = 8;
inline bool GenericFeatureVector_RestrictTokens::_internal_has_v3_compatible_namespace() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GenericFeatureVector_RestrictTokens::has_v3_compatible_namespace() const {
  return _internal_has_v3_compatible_namespace();
}
inline void GenericFeatureVector_RestrictTokens::clear_v3_compatible_namespace() {
  v3_compatible_namespace_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GenericFeatureVector_RestrictTokens::v3_compatible_namespace() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.RestrictTokens.v3_compatible_namespace)
  return _internal_v3_compatible_namespace();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericFeatureVector_RestrictTokens::set_v3_compatible_namespace(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 v3_compatible_namespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.RestrictTokens.v3_compatible_namespace)
}
inline std::string* GenericFeatureVector_RestrictTokens::mutable_v3_compatible_namespace() {
  std::string* _s = _internal_mutable_v3_compatible_namespace();
  // @@protoc_insertion_point(field_mutable:research_scann.GenericFeatureVector.RestrictTokens.v3_compatible_namespace)
  return _s;
}
inline const std::string& GenericFeatureVector_RestrictTokens::_internal_v3_compatible_namespace() const {
  return v3_compatible_namespace_.Get();
}
inline void GenericFeatureVector_RestrictTokens::_internal_set_v3_compatible_namespace(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  v3_compatible_namespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericFeatureVector_RestrictTokens::_internal_mutable_v3_compatible_namespace() {
  _has_bits_[0] |= 0x00000001u;
  return v3_compatible_namespace_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericFeatureVector_RestrictTokens::release_v3_compatible_namespace() {
  // @@protoc_insertion_point(field_release:research_scann.GenericFeatureVector.RestrictTokens.v3_compatible_namespace)
  if (!_internal_has_v3_compatible_namespace()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return v3_compatible_namespace_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericFeatureVector_RestrictTokens::set_allocated_v3_compatible_namespace(std::string* v3_compatible_namespace) {
  if (v3_compatible_namespace != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  v3_compatible_namespace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v3_compatible_namespace,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:research_scann.GenericFeatureVector.RestrictTokens.v3_compatible_namespace)
}

inline bool GenericFeatureVector_RestrictTokens::has_v2_restricts() const {
  return v2_restricts_case() != V2_RESTRICTS_NOT_SET;
}
inline void GenericFeatureVector_RestrictTokens::clear_has_v2_restricts() {
  _oneof_case_[0] = V2_RESTRICTS_NOT_SET;
}
inline GenericFeatureVector_RestrictTokens::V2RestrictsCase GenericFeatureVector_RestrictTokens::v2_restricts_case() const {
  return GenericFeatureVector_RestrictTokens::V2RestrictsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GenericFeatureVector_FixedPointMetadata

// optional float squared_l2_norm = 1;
inline bool GenericFeatureVector_FixedPointMetadata::_internal_has_squared_l2_norm() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GenericFeatureVector_FixedPointMetadata::has_squared_l2_norm() const {
  return _internal_has_squared_l2_norm();
}
inline void GenericFeatureVector_FixedPointMetadata::clear_squared_l2_norm() {
  squared_l2_norm_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float GenericFeatureVector_FixedPointMetadata::_internal_squared_l2_norm() const {
  return squared_l2_norm_;
}
inline float GenericFeatureVector_FixedPointMetadata::squared_l2_norm() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.FixedPointMetadata.squared_l2_norm)
  return _internal_squared_l2_norm();
}
inline void GenericFeatureVector_FixedPointMetadata::_internal_set_squared_l2_norm(float value) {
  _has_bits_[0] |= 0x00000001u;
  squared_l2_norm_ = value;
}
inline void GenericFeatureVector_FixedPointMetadata::set_squared_l2_norm(float value) {
  _internal_set_squared_l2_norm(value);
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.FixedPointMetadata.squared_l2_norm)
}

// -------------------------------------------------------------------

// GenericFeatureVector

// required .research_scann.GenericFeatureVector.FeatureType feature_type = 1;
inline bool GenericFeatureVector::_internal_has_feature_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GenericFeatureVector::has_feature_type() const {
  return _internal_has_feature_type();
}
inline void GenericFeatureVector::clear_feature_type() {
  feature_type_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::research_scann::GenericFeatureVector_FeatureType GenericFeatureVector::_internal_feature_type() const {
  return static_cast< ::research_scann::GenericFeatureVector_FeatureType >(feature_type_);
}
inline ::research_scann::GenericFeatureVector_FeatureType GenericFeatureVector::feature_type() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.feature_type)
  return _internal_feature_type();
}
inline void GenericFeatureVector::_internal_set_feature_type(::research_scann::GenericFeatureVector_FeatureType value) {
  assert(::research_scann::GenericFeatureVector_FeatureType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  feature_type_ = value;
}
inline void GenericFeatureVector::set_feature_type(::research_scann::GenericFeatureVector_FeatureType value) {
  _internal_set_feature_type(value);
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.feature_type)
}

// optional bytes data_id_str = 2;
inline bool GenericFeatureVector::_internal_has_data_id_str() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GenericFeatureVector::has_data_id_str() const {
  return _internal_has_data_id_str();
}
inline void GenericFeatureVector::clear_data_id_str() {
  data_id_str_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GenericFeatureVector::data_id_str() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.data_id_str)
  return _internal_data_id_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericFeatureVector::set_data_id_str(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_id_str_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.data_id_str)
}
inline std::string* GenericFeatureVector::mutable_data_id_str() {
  std::string* _s = _internal_mutable_data_id_str();
  // @@protoc_insertion_point(field_mutable:research_scann.GenericFeatureVector.data_id_str)
  return _s;
}
inline const std::string& GenericFeatureVector::_internal_data_id_str() const {
  return data_id_str_.Get();
}
inline void GenericFeatureVector::_internal_set_data_id_str(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericFeatureVector::_internal_mutable_data_id_str() {
  _has_bits_[0] |= 0x00000001u;
  return data_id_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericFeatureVector::release_data_id_str() {
  // @@protoc_insertion_point(field_release:research_scann.GenericFeatureVector.data_id_str)
  if (!_internal_has_data_id_str()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_id_str_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericFeatureVector::set_allocated_data_id_str(std::string* data_id_str) {
  if (data_id_str != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_id_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_id_str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:research_scann.GenericFeatureVector.data_id_str)
}

// repeated float feature_value_float = 4 [packed = true];
inline int GenericFeatureVector::_internal_feature_value_float_size() const {
  return feature_value_float_.size();
}
inline int GenericFeatureVector::feature_value_float_size() const {
  return _internal_feature_value_float_size();
}
inline void GenericFeatureVector::clear_feature_value_float() {
  feature_value_float_.Clear();
}
inline float GenericFeatureVector::_internal_feature_value_float(int index) const {
  return feature_value_float_.Get(index);
}
inline float GenericFeatureVector::feature_value_float(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.feature_value_float)
  return _internal_feature_value_float(index);
}
inline void GenericFeatureVector::set_feature_value_float(int index, float value) {
  feature_value_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.feature_value_float)
}
inline void GenericFeatureVector::_internal_add_feature_value_float(float value) {
  feature_value_float_.Add(value);
}
inline void GenericFeatureVector::add_feature_value_float(float value) {
  _internal_add_feature_value_float(value);
  // @@protoc_insertion_point(field_add:research_scann.GenericFeatureVector.feature_value_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GenericFeatureVector::_internal_feature_value_float() const {
  return feature_value_float_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GenericFeatureVector::feature_value_float() const {
  // @@protoc_insertion_point(field_list:research_scann.GenericFeatureVector.feature_value_float)
  return _internal_feature_value_float();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GenericFeatureVector::_internal_mutable_feature_value_float() {
  return &feature_value_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GenericFeatureVector::mutable_feature_value_float() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.GenericFeatureVector.feature_value_float)
  return _internal_mutable_feature_value_float();
}

// repeated double feature_value_double = 5 [packed = true];
inline int GenericFeatureVector::_internal_feature_value_double_size() const {
  return feature_value_double_.size();
}
inline int GenericFeatureVector::feature_value_double_size() const {
  return _internal_feature_value_double_size();
}
inline void GenericFeatureVector::clear_feature_value_double() {
  feature_value_double_.Clear();
}
inline double GenericFeatureVector::_internal_feature_value_double(int index) const {
  return feature_value_double_.Get(index);
}
inline double GenericFeatureVector::feature_value_double(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.feature_value_double)
  return _internal_feature_value_double(index);
}
inline void GenericFeatureVector::set_feature_value_double(int index, double value) {
  feature_value_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.feature_value_double)
}
inline void GenericFeatureVector::_internal_add_feature_value_double(double value) {
  feature_value_double_.Add(value);
}
inline void GenericFeatureVector::add_feature_value_double(double value) {
  _internal_add_feature_value_double(value);
  // @@protoc_insertion_point(field_add:research_scann.GenericFeatureVector.feature_value_double)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GenericFeatureVector::_internal_feature_value_double() const {
  return feature_value_double_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GenericFeatureVector::feature_value_double() const {
  // @@protoc_insertion_point(field_list:research_scann.GenericFeatureVector.feature_value_double)
  return _internal_feature_value_double();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GenericFeatureVector::_internal_mutable_feature_value_double() {
  return &feature_value_double_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GenericFeatureVector::mutable_feature_value_double() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.GenericFeatureVector.feature_value_double)
  return _internal_mutable_feature_value_double();
}

// repeated int64 feature_value_int64 = 3 [packed = true];
inline int GenericFeatureVector::_internal_feature_value_int64_size() const {
  return feature_value_int64_.size();
}
inline int GenericFeatureVector::feature_value_int64_size() const {
  return _internal_feature_value_int64_size();
}
inline void GenericFeatureVector::clear_feature_value_int64() {
  feature_value_int64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericFeatureVector::_internal_feature_value_int64(int index) const {
  return feature_value_int64_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericFeatureVector::feature_value_int64(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.feature_value_int64)
  return _internal_feature_value_int64(index);
}
inline void GenericFeatureVector::set_feature_value_int64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  feature_value_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.feature_value_int64)
}
inline void GenericFeatureVector::_internal_add_feature_value_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  feature_value_int64_.Add(value);
}
inline void GenericFeatureVector::add_feature_value_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_feature_value_int64(value);
  // @@protoc_insertion_point(field_add:research_scann.GenericFeatureVector.feature_value_int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GenericFeatureVector::_internal_feature_value_int64() const {
  return feature_value_int64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GenericFeatureVector::feature_value_int64() const {
  // @@protoc_insertion_point(field_list:research_scann.GenericFeatureVector.feature_value_int64)
  return _internal_feature_value_int64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GenericFeatureVector::_internal_mutable_feature_value_int64() {
  return &feature_value_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GenericFeatureVector::mutable_feature_value_int64() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.GenericFeatureVector.feature_value_int64)
  return _internal_mutable_feature_value_int64();
}

// optional bytes feature_value_string = 13;
inline bool GenericFeatureVector::_internal_has_feature_value_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GenericFeatureVector::has_feature_value_string() const {
  return _internal_has_feature_value_string();
}
inline void GenericFeatureVector::clear_feature_value_string() {
  feature_value_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GenericFeatureVector::feature_value_string() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.feature_value_string)
  return _internal_feature_value_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericFeatureVector::set_feature_value_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 feature_value_string_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.feature_value_string)
}
inline std::string* GenericFeatureVector::mutable_feature_value_string() {
  std::string* _s = _internal_mutable_feature_value_string();
  // @@protoc_insertion_point(field_mutable:research_scann.GenericFeatureVector.feature_value_string)
  return _s;
}
inline const std::string& GenericFeatureVector::_internal_feature_value_string() const {
  return feature_value_string_.Get();
}
inline void GenericFeatureVector::_internal_set_feature_value_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  feature_value_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericFeatureVector::_internal_mutable_feature_value_string() {
  _has_bits_[0] |= 0x00000002u;
  return feature_value_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericFeatureVector::release_feature_value_string() {
  // @@protoc_insertion_point(field_release:research_scann.GenericFeatureVector.feature_value_string)
  if (!_internal_has_feature_value_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return feature_value_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericFeatureVector::set_allocated_feature_value_string(std::string* feature_value_string) {
  if (feature_value_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  feature_value_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), feature_value_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:research_scann.GenericFeatureVector.feature_value_string)
}

// repeated uint64 feature_index = 6 [packed = true];
inline int GenericFeatureVector::_internal_feature_index_size() const {
  return feature_index_.size();
}
inline int GenericFeatureVector::feature_index_size() const {
  return _internal_feature_index_size();
}
inline void GenericFeatureVector::clear_feature_index() {
  feature_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenericFeatureVector::_internal_feature_index(int index) const {
  return feature_index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenericFeatureVector::feature_index(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.feature_index)
  return _internal_feature_index(index);
}
inline void GenericFeatureVector::set_feature_index(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  feature_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.feature_index)
}
inline void GenericFeatureVector::_internal_add_feature_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  feature_index_.Add(value);
}
inline void GenericFeatureVector::add_feature_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_feature_index(value);
  // @@protoc_insertion_point(field_add:research_scann.GenericFeatureVector.feature_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GenericFeatureVector::_internal_feature_index() const {
  return feature_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GenericFeatureVector::feature_index() const {
  // @@protoc_insertion_point(field_list:research_scann.GenericFeatureVector.feature_index)
  return _internal_feature_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GenericFeatureVector::_internal_mutable_feature_index() {
  return &feature_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GenericFeatureVector::mutable_feature_index() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.GenericFeatureVector.feature_index)
  return _internal_mutable_feature_index();
}

// optional .research_scann.GenericFeatureVector.FeatureNorm norm_type = 9 [default = NONE];
inline bool GenericFeatureVector::_internal_has_norm_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GenericFeatureVector::has_norm_type() const {
  return _internal_has_norm_type();
}
inline void GenericFeatureVector::clear_norm_type() {
  norm_type_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::research_scann::GenericFeatureVector_FeatureNorm GenericFeatureVector::_internal_norm_type() const {
  return static_cast< ::research_scann::GenericFeatureVector_FeatureNorm >(norm_type_);
}
inline ::research_scann::GenericFeatureVector_FeatureNorm GenericFeatureVector::norm_type() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.norm_type)
  return _internal_norm_type();
}
inline void GenericFeatureVector::_internal_set_norm_type(::research_scann::GenericFeatureVector_FeatureNorm value) {
  assert(::research_scann::GenericFeatureVector_FeatureNorm_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  norm_type_ = value;
}
inline void GenericFeatureVector::set_norm_type(::research_scann::GenericFeatureVector_FeatureNorm value) {
  _internal_set_norm_type(value);
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.norm_type)
}

// optional string class_label = 16;
inline bool GenericFeatureVector::_internal_has_class_label() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GenericFeatureVector::has_class_label() const {
  return _internal_has_class_label();
}
inline void GenericFeatureVector::clear_class_label() {
  class_label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GenericFeatureVector::class_label() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.class_label)
  return _internal_class_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericFeatureVector::set_class_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 class_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.class_label)
}
inline std::string* GenericFeatureVector::mutable_class_label() {
  std::string* _s = _internal_mutable_class_label();
  // @@protoc_insertion_point(field_mutable:research_scann.GenericFeatureVector.class_label)
  return _s;
}
inline const std::string& GenericFeatureVector::_internal_class_label() const {
  return class_label_.Get();
}
inline void GenericFeatureVector::_internal_set_class_label(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  class_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericFeatureVector::_internal_mutable_class_label() {
  _has_bits_[0] |= 0x00000004u;
  return class_label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericFeatureVector::release_class_label() {
  // @@protoc_insertion_point(field_release:research_scann.GenericFeatureVector.class_label)
  if (!_internal_has_class_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return class_label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericFeatureVector::set_allocated_class_label(std::string* class_label) {
  if (class_label != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  class_label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:research_scann.GenericFeatureVector.class_label)
}

// optional .research_scann.GenericFeatureVector.Crowding crowding = 18;
inline bool GenericFeatureVector::_internal_has_crowding() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || crowding_ != nullptr);
  return value;
}
inline bool GenericFeatureVector::has_crowding() const {
  return _internal_has_crowding();
}
inline void GenericFeatureVector::clear_crowding() {
  if (crowding_ != nullptr) crowding_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::research_scann::GenericFeatureVector_Crowding& GenericFeatureVector::_internal_crowding() const {
  const ::research_scann::GenericFeatureVector_Crowding* p = crowding_;
  return p != nullptr ? *p : reinterpret_cast<const ::research_scann::GenericFeatureVector_Crowding&>(
      ::research_scann::_GenericFeatureVector_Crowding_default_instance_);
}
inline const ::research_scann::GenericFeatureVector_Crowding& GenericFeatureVector::crowding() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.crowding)
  return _internal_crowding();
}
inline void GenericFeatureVector::unsafe_arena_set_allocated_crowding(
    ::research_scann::GenericFeatureVector_Crowding* crowding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crowding_);
  }
  crowding_ = crowding;
  if (crowding) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.GenericFeatureVector.crowding)
}
inline ::research_scann::GenericFeatureVector_Crowding* GenericFeatureVector::release_crowding() {
  _has_bits_[0] &= ~0x00000020u;
  ::research_scann::GenericFeatureVector_Crowding* temp = crowding_;
  crowding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::research_scann::GenericFeatureVector_Crowding* GenericFeatureVector::unsafe_arena_release_crowding() {
  // @@protoc_insertion_point(field_release:research_scann.GenericFeatureVector.crowding)
  _has_bits_[0] &= ~0x00000020u;
  ::research_scann::GenericFeatureVector_Crowding* temp = crowding_;
  crowding_ = nullptr;
  return temp;
}
inline ::research_scann::GenericFeatureVector_Crowding* GenericFeatureVector::_internal_mutable_crowding() {
  _has_bits_[0] |= 0x00000020u;
  if (crowding_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::GenericFeatureVector_Crowding>(GetArenaForAllocation());
    crowding_ = p;
  }
  return crowding_;
}
inline ::research_scann::GenericFeatureVector_Crowding* GenericFeatureVector::mutable_crowding() {
  ::research_scann::GenericFeatureVector_Crowding* _msg = _internal_mutable_crowding();
  // @@protoc_insertion_point(field_mutable:research_scann.GenericFeatureVector.crowding)
  return _msg;
}
inline void GenericFeatureVector::set_allocated_crowding(::research_scann::GenericFeatureVector_Crowding* crowding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete crowding_;
  }
  if (crowding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::research_scann::GenericFeatureVector_Crowding>::GetOwningArena(crowding);
    if (message_arena != submessage_arena) {
      crowding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crowding, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  crowding_ = crowding;
  // @@protoc_insertion_point(field_set_allocated:research_scann.GenericFeatureVector.crowding)
}

// optional .research_scann.GenericFeatureVector.RestrictTokens restrict_tokens = 15;
inline bool GenericFeatureVector::_internal_has_restrict_tokens() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || restrict_tokens_ != nullptr);
  return value;
}
inline bool GenericFeatureVector::has_restrict_tokens() const {
  return _internal_has_restrict_tokens();
}
inline void GenericFeatureVector::clear_restrict_tokens() {
  if (restrict_tokens_ != nullptr) restrict_tokens_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::research_scann::GenericFeatureVector_RestrictTokens& GenericFeatureVector::_internal_restrict_tokens() const {
  const ::research_scann::GenericFeatureVector_RestrictTokens* p = restrict_tokens_;
  return p != nullptr ? *p : reinterpret_cast<const ::research_scann::GenericFeatureVector_RestrictTokens&>(
      ::research_scann::_GenericFeatureVector_RestrictTokens_default_instance_);
}
inline const ::research_scann::GenericFeatureVector_RestrictTokens& GenericFeatureVector::restrict_tokens() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.restrict_tokens)
  return _internal_restrict_tokens();
}
inline void GenericFeatureVector::unsafe_arena_set_allocated_restrict_tokens(
    ::research_scann::GenericFeatureVector_RestrictTokens* restrict_tokens) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restrict_tokens_);
  }
  restrict_tokens_ = restrict_tokens;
  if (restrict_tokens) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.GenericFeatureVector.restrict_tokens)
}
inline ::research_scann::GenericFeatureVector_RestrictTokens* GenericFeatureVector::release_restrict_tokens() {
  _has_bits_[0] &= ~0x00000010u;
  ::research_scann::GenericFeatureVector_RestrictTokens* temp = restrict_tokens_;
  restrict_tokens_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::research_scann::GenericFeatureVector_RestrictTokens* GenericFeatureVector::unsafe_arena_release_restrict_tokens() {
  // @@protoc_insertion_point(field_release:research_scann.GenericFeatureVector.restrict_tokens)
  _has_bits_[0] &= ~0x00000010u;
  ::research_scann::GenericFeatureVector_RestrictTokens* temp = restrict_tokens_;
  restrict_tokens_ = nullptr;
  return temp;
}
inline ::research_scann::GenericFeatureVector_RestrictTokens* GenericFeatureVector::_internal_mutable_restrict_tokens() {
  _has_bits_[0] |= 0x00000010u;
  if (restrict_tokens_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::GenericFeatureVector_RestrictTokens>(GetArenaForAllocation());
    restrict_tokens_ = p;
  }
  return restrict_tokens_;
}
inline ::research_scann::GenericFeatureVector_RestrictTokens* GenericFeatureVector::mutable_restrict_tokens() {
  ::research_scann::GenericFeatureVector_RestrictTokens* _msg = _internal_mutable_restrict_tokens();
  // @@protoc_insertion_point(field_mutable:research_scann.GenericFeatureVector.restrict_tokens)
  return _msg;
}
inline void GenericFeatureVector::set_allocated_restrict_tokens(::research_scann::GenericFeatureVector_RestrictTokens* restrict_tokens) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete restrict_tokens_;
  }
  if (restrict_tokens) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::research_scann::GenericFeatureVector_RestrictTokens>::GetOwningArena(restrict_tokens);
    if (message_arena != submessage_arena) {
      restrict_tokens = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restrict_tokens, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  restrict_tokens_ = restrict_tokens;
  // @@protoc_insertion_point(field_set_allocated:research_scann.GenericFeatureVector.restrict_tokens)
}

// optional .research_scann.GenericFeatureVector.FixedPointMetadata fixed_point_metadata = 19;
inline bool GenericFeatureVector::_internal_has_fixed_point_metadata() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || fixed_point_metadata_ != nullptr);
  return value;
}
inline bool GenericFeatureVector::has_fixed_point_metadata() const {
  return _internal_has_fixed_point_metadata();
}
inline void GenericFeatureVector::clear_fixed_point_metadata() {
  if (fixed_point_metadata_ != nullptr) fixed_point_metadata_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::research_scann::GenericFeatureVector_FixedPointMetadata& GenericFeatureVector::_internal_fixed_point_metadata() const {
  const ::research_scann::GenericFeatureVector_FixedPointMetadata* p = fixed_point_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::research_scann::GenericFeatureVector_FixedPointMetadata&>(
      ::research_scann::_GenericFeatureVector_FixedPointMetadata_default_instance_);
}
inline const ::research_scann::GenericFeatureVector_FixedPointMetadata& GenericFeatureVector::fixed_point_metadata() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.fixed_point_metadata)
  return _internal_fixed_point_metadata();
}
inline void GenericFeatureVector::unsafe_arena_set_allocated_fixed_point_metadata(
    ::research_scann::GenericFeatureVector_FixedPointMetadata* fixed_point_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fixed_point_metadata_);
  }
  fixed_point_metadata_ = fixed_point_metadata;
  if (fixed_point_metadata) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.GenericFeatureVector.fixed_point_metadata)
}
inline ::research_scann::GenericFeatureVector_FixedPointMetadata* GenericFeatureVector::release_fixed_point_metadata() {
  _has_bits_[0] &= ~0x00000040u;
  ::research_scann::GenericFeatureVector_FixedPointMetadata* temp = fixed_point_metadata_;
  fixed_point_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::research_scann::GenericFeatureVector_FixedPointMetadata* GenericFeatureVector::unsafe_arena_release_fixed_point_metadata() {
  // @@protoc_insertion_point(field_release:research_scann.GenericFeatureVector.fixed_point_metadata)
  _has_bits_[0] &= ~0x00000040u;
  ::research_scann::GenericFeatureVector_FixedPointMetadata* temp = fixed_point_metadata_;
  fixed_point_metadata_ = nullptr;
  return temp;
}
inline ::research_scann::GenericFeatureVector_FixedPointMetadata* GenericFeatureVector::_internal_mutable_fixed_point_metadata() {
  _has_bits_[0] |= 0x00000040u;
  if (fixed_point_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::GenericFeatureVector_FixedPointMetadata>(GetArenaForAllocation());
    fixed_point_metadata_ = p;
  }
  return fixed_point_metadata_;
}
inline ::research_scann::GenericFeatureVector_FixedPointMetadata* GenericFeatureVector::mutable_fixed_point_metadata() {
  ::research_scann::GenericFeatureVector_FixedPointMetadata* _msg = _internal_mutable_fixed_point_metadata();
  // @@protoc_insertion_point(field_mutable:research_scann.GenericFeatureVector.fixed_point_metadata)
  return _msg;
}
inline void GenericFeatureVector::set_allocated_fixed_point_metadata(::research_scann::GenericFeatureVector_FixedPointMetadata* fixed_point_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fixed_point_metadata_;
  }
  if (fixed_point_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::research_scann::GenericFeatureVector_FixedPointMetadata>::GetOwningArena(fixed_point_metadata);
    if (message_arena != submessage_arena) {
      fixed_point_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_point_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  fixed_point_metadata_ = fixed_point_metadata;
  // @@protoc_insertion_point(field_set_allocated:research_scann.GenericFeatureVector.fixed_point_metadata)
}

// optional bytes userinfo = 17 [ctype = CORD];
inline bool GenericFeatureVector::_internal_has_userinfo() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GenericFeatureVector::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void GenericFeatureVector::clear_userinfo() {
  userinfo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& GenericFeatureVector::userinfo() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.userinfo)
  return _internal_userinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericFeatureVector::set_userinfo(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 userinfo_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.userinfo)
}
inline std::string* GenericFeatureVector::mutable_userinfo() {
  std::string* _s = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:research_scann.GenericFeatureVector.userinfo)
  return _s;
}
inline const std::string& GenericFeatureVector::_internal_userinfo() const {
  return userinfo_.Get();
}
inline void GenericFeatureVector::_internal_set_userinfo(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  userinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericFeatureVector::_internal_mutable_userinfo() {
  _has_bits_[0] |= 0x00000008u;
  return userinfo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericFeatureVector::release_userinfo() {
  // @@protoc_insertion_point(field_release:research_scann.GenericFeatureVector.userinfo)
  if (!_internal_has_userinfo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return userinfo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericFeatureVector::set_allocated_userinfo(std::string* userinfo) {
  if (userinfo != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  userinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userinfo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:research_scann.GenericFeatureVector.userinfo)
}

// optional .google.protobuf.Timestamp expiration_timestamp = 20;
inline bool GenericFeatureVector::_internal_has_expiration_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || expiration_timestamp_ != nullptr);
  return value;
}
inline bool GenericFeatureVector::has_expiration_timestamp() const {
  return _internal_has_expiration_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GenericFeatureVector::_internal_expiration_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expiration_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GenericFeatureVector::expiration_timestamp() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.expiration_timestamp)
  return _internal_expiration_timestamp();
}
inline void GenericFeatureVector::unsafe_arena_set_allocated_expiration_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* expiration_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_timestamp_);
  }
  expiration_timestamp_ = expiration_timestamp;
  if (expiration_timestamp) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.GenericFeatureVector.expiration_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GenericFeatureVector::release_expiration_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiration_timestamp_;
  expiration_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GenericFeatureVector::unsafe_arena_release_expiration_timestamp() {
  // @@protoc_insertion_point(field_release:research_scann.GenericFeatureVector.expiration_timestamp)
  _has_bits_[0] &= ~0x00000080u;
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiration_timestamp_;
  expiration_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GenericFeatureVector::_internal_mutable_expiration_timestamp() {
  _has_bits_[0] |= 0x00000080u;
  if (expiration_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    expiration_timestamp_ = p;
  }
  return expiration_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GenericFeatureVector::mutable_expiration_timestamp() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expiration_timestamp();
  // @@protoc_insertion_point(field_mutable:research_scann.GenericFeatureVector.expiration_timestamp)
  return _msg;
}
inline void GenericFeatureVector::set_allocated_expiration_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* expiration_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_timestamp_);
  }
  if (expiration_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_timestamp));
    if (message_arena != submessage_arena) {
      expiration_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration_timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  expiration_timestamp_ = expiration_timestamp;
  // @@protoc_insertion_point(field_set_allocated:research_scann.GenericFeatureVector.expiration_timestamp)
}

// optional uint64 feature_dim = 10 [default = 18446744073709551615, deprecated = true];
inline bool GenericFeatureVector::_internal_has_feature_dim() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool GenericFeatureVector::has_feature_dim() const {
  return _internal_has_feature_dim();
}
inline void GenericFeatureVector::clear_feature_dim() {
  feature_dim_ = uint64_t{18446744073709551615u};
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenericFeatureVector::_internal_feature_dim() const {
  return feature_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenericFeatureVector::feature_dim() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.feature_dim)
  return _internal_feature_dim();
}
inline void GenericFeatureVector::_internal_set_feature_dim(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  feature_dim_ = value;
}
inline void GenericFeatureVector::set_feature_dim(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_feature_dim(value);
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.feature_dim)
}

// optional float weight = 8 [deprecated = true];
inline bool GenericFeatureVector::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GenericFeatureVector::has_weight() const {
  return _internal_has_weight();
}
inline void GenericFeatureVector::clear_weight() {
  weight_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float GenericFeatureVector::_internal_weight() const {
  return weight_;
}
inline float GenericFeatureVector::weight() const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.weight)
  return _internal_weight();
}
inline void GenericFeatureVector::_internal_set_weight(float value) {
  _has_bits_[0] |= 0x00000200u;
  weight_ = value;
}
inline void GenericFeatureVector::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.weight)
}

// repeated int32 tokens = 14 [packed = true, deprecated = true];
inline int GenericFeatureVector::_internal_tokens_size() const {
  return tokens_.size();
}
inline int GenericFeatureVector::tokens_size() const {
  return _internal_tokens_size();
}
inline void GenericFeatureVector::clear_tokens() {
  tokens_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericFeatureVector::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericFeatureVector::tokens(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.GenericFeatureVector.tokens)
  return _internal_tokens(index);
}
inline void GenericFeatureVector::set_tokens(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  tokens_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.GenericFeatureVector.tokens)
}
inline void GenericFeatureVector::_internal_add_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  tokens_.Add(value);
}
inline void GenericFeatureVector::add_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_tokens(value);
  // @@protoc_insertion_point(field_add:research_scann.GenericFeatureVector.tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GenericFeatureVector::_internal_tokens() const {
  return tokens_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GenericFeatureVector::tokens() const {
  // @@protoc_insertion_point(field_list:research_scann.GenericFeatureVector.tokens)
  return _internal_tokens();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GenericFeatureVector::_internal_mutable_tokens() {
  return &tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GenericFeatureVector::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.GenericFeatureVector.tokens)
  return _internal_mutable_tokens();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::research_scann::GenericFeatureVector_FeatureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::research_scann::GenericFeatureVector_FeatureType>() {
  return ::research_scann::GenericFeatureVector_FeatureType_descriptor();
}
template <> struct is_proto_enum< ::research_scann::GenericFeatureVector_FeatureNorm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::research_scann::GenericFeatureVector_FeatureNorm>() {
  return ::research_scann::GenericFeatureVector_FeatureNorm_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fdata_5fformat_2ffeatures_2eproto
