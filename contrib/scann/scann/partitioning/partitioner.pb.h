// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/partitioning/partitioner.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fpartitioning_2fpartitioner_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fpartitioning_2fpartitioner_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "scann/partitioning/kmeans_tree_partitioner.pb.h"
#include "scann/partitioning/linear_projection_tree.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fpartitioning_2fpartitioner_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fpartitioning_2fpartitioner_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fpartitioning_2fpartitioner_2eproto;
namespace research_scann {
class SerializedPartitioner;
struct SerializedPartitionerDefaultTypeInternal;
extern SerializedPartitionerDefaultTypeInternal _SerializedPartitioner_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::SerializedPartitioner* Arena::CreateMaybeMessage<::research_scann::SerializedPartitioner>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

// ===================================================================

class SerializedPartitioner final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.SerializedPartitioner) */ {
 public:
  inline SerializedPartitioner() : SerializedPartitioner(nullptr) {}
  ~SerializedPartitioner() override;
  explicit constexpr SerializedPartitioner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedPartitioner(const SerializedPartitioner& from);
  SerializedPartitioner(SerializedPartitioner&& from) noexcept
    : SerializedPartitioner() {
    *this = ::std::move(from);
  }

  inline SerializedPartitioner& operator=(const SerializedPartitioner& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedPartitioner& operator=(SerializedPartitioner&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedPartitioner& default_instance() {
    return *internal_default_instance();
  }
  enum PartitionerPayloadCase {
    kKmeans = 2,
    kLinearProjection = 4,
    PARTITIONERPAYLOAD_NOT_SET = 0,
  };

  static inline const SerializedPartitioner* internal_default_instance() {
    return reinterpret_cast<const SerializedPartitioner*>(
               &_SerializedPartitioner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SerializedPartitioner& a, SerializedPartitioner& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedPartitioner* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedPartitioner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedPartitioner* New() const final {
    return new SerializedPartitioner();
  }

  SerializedPartitioner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedPartitioner>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedPartitioner& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedPartitioner& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedPartitioner* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.SerializedPartitioner";
  }
  protected:
  explicit SerializedPartitioner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNTokensFieldNumber = 1,
    kUsesProjectionFieldNumber = 3,
    kKmeansFieldNumber = 2,
    kLinearProjectionFieldNumber = 4,
  };
  // optional int32 n_tokens = 1;
  bool has_n_tokens() const;
  private:
  bool _internal_has_n_tokens() const;
  public:
  void clear_n_tokens();
  ::PROTOBUF_NAMESPACE_ID::int32 n_tokens() const;
  void set_n_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n_tokens() const;
  void _internal_set_n_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool uses_projection = 3 [default = false];
  bool has_uses_projection() const;
  private:
  bool _internal_has_uses_projection() const;
  public:
  void clear_uses_projection();
  bool uses_projection() const;
  void set_uses_projection(bool value);
  private:
  bool _internal_uses_projection() const;
  void _internal_set_uses_projection(bool value);
  public:

  // .research_scann.SerializedKMeansTreePartitioner kmeans = 2;
  bool has_kmeans() const;
  private:
  bool _internal_has_kmeans() const;
  public:
  void clear_kmeans();
  const ::research_scann::SerializedKMeansTreePartitioner& kmeans() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::SerializedKMeansTreePartitioner* release_kmeans();
  ::research_scann::SerializedKMeansTreePartitioner* mutable_kmeans();
  void set_allocated_kmeans(::research_scann::SerializedKMeansTreePartitioner* kmeans);
  private:
  const ::research_scann::SerializedKMeansTreePartitioner& _internal_kmeans() const;
  ::research_scann::SerializedKMeansTreePartitioner* _internal_mutable_kmeans();
  public:
  void unsafe_arena_set_allocated_kmeans(
      ::research_scann::SerializedKMeansTreePartitioner* kmeans);
  ::research_scann::SerializedKMeansTreePartitioner* unsafe_arena_release_kmeans();

  // .research_scann.SerializedLinearProjectionTree linear_projection = 4;
  bool has_linear_projection() const;
  private:
  bool _internal_has_linear_projection() const;
  public:
  void clear_linear_projection();
  const ::research_scann::SerializedLinearProjectionTree& linear_projection() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::SerializedLinearProjectionTree* release_linear_projection();
  ::research_scann::SerializedLinearProjectionTree* mutable_linear_projection();
  void set_allocated_linear_projection(::research_scann::SerializedLinearProjectionTree* linear_projection);
  private:
  const ::research_scann::SerializedLinearProjectionTree& _internal_linear_projection() const;
  ::research_scann::SerializedLinearProjectionTree* _internal_mutable_linear_projection();
  public:
  void unsafe_arena_set_allocated_linear_projection(
      ::research_scann::SerializedLinearProjectionTree* linear_projection);
  ::research_scann::SerializedLinearProjectionTree* unsafe_arena_release_linear_projection();

  void clear_PartitionerPayload();
  PartitionerPayloadCase PartitionerPayload_case() const;
  // @@protoc_insertion_point(class_scope:research_scann.SerializedPartitioner)
 private:
  class _Internal;
  void set_has_kmeans();
  void set_has_linear_projection();

  inline bool has_PartitionerPayload() const;
  inline void clear_has_PartitionerPayload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_tokens_;
  bool uses_projection_;
  union PartitionerPayloadUnion {
    constexpr PartitionerPayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::research_scann::SerializedKMeansTreePartitioner* kmeans_;
    ::research_scann::SerializedLinearProjectionTree* linear_projection_;
  } PartitionerPayload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_scann_2fpartitioning_2fpartitioner_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SerializedPartitioner

// optional int32 n_tokens = 1;
inline bool SerializedPartitioner::_internal_has_n_tokens() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SerializedPartitioner::has_n_tokens() const {
  return _internal_has_n_tokens();
}
inline void SerializedPartitioner::clear_n_tokens() {
  n_tokens_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SerializedPartitioner::_internal_n_tokens() const {
  return n_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SerializedPartitioner::n_tokens() const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedPartitioner.n_tokens)
  return _internal_n_tokens();
}
inline void SerializedPartitioner::_internal_set_n_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  n_tokens_ = value;
}
inline void SerializedPartitioner::set_n_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n_tokens(value);
  // @@protoc_insertion_point(field_set:research_scann.SerializedPartitioner.n_tokens)
}

// optional bool uses_projection = 3 [default = false];
inline bool SerializedPartitioner::_internal_has_uses_projection() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SerializedPartitioner::has_uses_projection() const {
  return _internal_has_uses_projection();
}
inline void SerializedPartitioner::clear_uses_projection() {
  uses_projection_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SerializedPartitioner::_internal_uses_projection() const {
  return uses_projection_;
}
inline bool SerializedPartitioner::uses_projection() const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedPartitioner.uses_projection)
  return _internal_uses_projection();
}
inline void SerializedPartitioner::_internal_set_uses_projection(bool value) {
  _has_bits_[0] |= 0x00000002u;
  uses_projection_ = value;
}
inline void SerializedPartitioner::set_uses_projection(bool value) {
  _internal_set_uses_projection(value);
  // @@protoc_insertion_point(field_set:research_scann.SerializedPartitioner.uses_projection)
}

// .research_scann.SerializedKMeansTreePartitioner kmeans = 2;
inline bool SerializedPartitioner::_internal_has_kmeans() const {
  return PartitionerPayload_case() == kKmeans;
}
inline bool SerializedPartitioner::has_kmeans() const {
  return _internal_has_kmeans();
}
inline void SerializedPartitioner::set_has_kmeans() {
  _oneof_case_[0] = kKmeans;
}
inline ::research_scann::SerializedKMeansTreePartitioner* SerializedPartitioner::release_kmeans() {
  // @@protoc_insertion_point(field_release:research_scann.SerializedPartitioner.kmeans)
  if (_internal_has_kmeans()) {
    clear_has_PartitionerPayload();
      ::research_scann::SerializedKMeansTreePartitioner* temp = PartitionerPayload_.kmeans_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    PartitionerPayload_.kmeans_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::research_scann::SerializedKMeansTreePartitioner& SerializedPartitioner::_internal_kmeans() const {
  return _internal_has_kmeans()
      ? *PartitionerPayload_.kmeans_
      : reinterpret_cast< ::research_scann::SerializedKMeansTreePartitioner&>(::research_scann::_SerializedKMeansTreePartitioner_default_instance_);
}
inline const ::research_scann::SerializedKMeansTreePartitioner& SerializedPartitioner::kmeans() const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedPartitioner.kmeans)
  return _internal_kmeans();
}
inline ::research_scann::SerializedKMeansTreePartitioner* SerializedPartitioner::unsafe_arena_release_kmeans() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.SerializedPartitioner.kmeans)
  if (_internal_has_kmeans()) {
    clear_has_PartitionerPayload();
    ::research_scann::SerializedKMeansTreePartitioner* temp = PartitionerPayload_.kmeans_;
    PartitionerPayload_.kmeans_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializedPartitioner::unsafe_arena_set_allocated_kmeans(::research_scann::SerializedKMeansTreePartitioner* kmeans) {
  clear_PartitionerPayload();
  if (kmeans) {
    set_has_kmeans();
    PartitionerPayload_.kmeans_ = kmeans;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.SerializedPartitioner.kmeans)
}
inline ::research_scann::SerializedKMeansTreePartitioner* SerializedPartitioner::_internal_mutable_kmeans() {
  if (!_internal_has_kmeans()) {
    clear_PartitionerPayload();
    set_has_kmeans();
    PartitionerPayload_.kmeans_ = CreateMaybeMessage< ::research_scann::SerializedKMeansTreePartitioner >(GetArenaForAllocation());
  }
  return PartitionerPayload_.kmeans_;
}
inline ::research_scann::SerializedKMeansTreePartitioner* SerializedPartitioner::mutable_kmeans() {
  ::research_scann::SerializedKMeansTreePartitioner* _msg = _internal_mutable_kmeans();
  // @@protoc_insertion_point(field_mutable:research_scann.SerializedPartitioner.kmeans)
  return _msg;
}

// .research_scann.SerializedLinearProjectionTree linear_projection = 4;
inline bool SerializedPartitioner::_internal_has_linear_projection() const {
  return PartitionerPayload_case() == kLinearProjection;
}
inline bool SerializedPartitioner::has_linear_projection() const {
  return _internal_has_linear_projection();
}
inline void SerializedPartitioner::set_has_linear_projection() {
  _oneof_case_[0] = kLinearProjection;
}
inline ::research_scann::SerializedLinearProjectionTree* SerializedPartitioner::release_linear_projection() {
  // @@protoc_insertion_point(field_release:research_scann.SerializedPartitioner.linear_projection)
  if (_internal_has_linear_projection()) {
    clear_has_PartitionerPayload();
      ::research_scann::SerializedLinearProjectionTree* temp = PartitionerPayload_.linear_projection_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    PartitionerPayload_.linear_projection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::research_scann::SerializedLinearProjectionTree& SerializedPartitioner::_internal_linear_projection() const {
  return _internal_has_linear_projection()
      ? *PartitionerPayload_.linear_projection_
      : reinterpret_cast< ::research_scann::SerializedLinearProjectionTree&>(::research_scann::_SerializedLinearProjectionTree_default_instance_);
}
inline const ::research_scann::SerializedLinearProjectionTree& SerializedPartitioner::linear_projection() const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedPartitioner.linear_projection)
  return _internal_linear_projection();
}
inline ::research_scann::SerializedLinearProjectionTree* SerializedPartitioner::unsafe_arena_release_linear_projection() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.SerializedPartitioner.linear_projection)
  if (_internal_has_linear_projection()) {
    clear_has_PartitionerPayload();
    ::research_scann::SerializedLinearProjectionTree* temp = PartitionerPayload_.linear_projection_;
    PartitionerPayload_.linear_projection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SerializedPartitioner::unsafe_arena_set_allocated_linear_projection(::research_scann::SerializedLinearProjectionTree* linear_projection) {
  clear_PartitionerPayload();
  if (linear_projection) {
    set_has_linear_projection();
    PartitionerPayload_.linear_projection_ = linear_projection;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.SerializedPartitioner.linear_projection)
}
inline ::research_scann::SerializedLinearProjectionTree* SerializedPartitioner::_internal_mutable_linear_projection() {
  if (!_internal_has_linear_projection()) {
    clear_PartitionerPayload();
    set_has_linear_projection();
    PartitionerPayload_.linear_projection_ = CreateMaybeMessage< ::research_scann::SerializedLinearProjectionTree >(GetArenaForAllocation());
  }
  return PartitionerPayload_.linear_projection_;
}
inline ::research_scann::SerializedLinearProjectionTree* SerializedPartitioner::mutable_linear_projection() {
  ::research_scann::SerializedLinearProjectionTree* _msg = _internal_mutable_linear_projection();
  // @@protoc_insertion_point(field_mutable:research_scann.SerializedPartitioner.linear_projection)
  return _msg;
}

inline bool SerializedPartitioner::has_PartitionerPayload() const {
  return PartitionerPayload_case() != PARTITIONERPAYLOAD_NOT_SET;
}
inline void SerializedPartitioner::clear_has_PartitionerPayload() {
  _oneof_case_[0] = PARTITIONERPAYLOAD_NOT_SET;
}
inline SerializedPartitioner::PartitionerPayloadCase SerializedPartitioner::PartitionerPayload_case() const {
  return SerializedPartitioner::PartitionerPayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fpartitioning_2fpartitioner_2eproto
