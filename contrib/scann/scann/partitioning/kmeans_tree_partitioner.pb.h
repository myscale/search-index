// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/partitioning/kmeans_tree_partitioner.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fpartitioning_2fkmeans_5ftree_5fpartitioner_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fpartitioning_2fkmeans_5ftree_5fpartitioner_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "scann/trees/kmeans_tree/kmeans_tree.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fpartitioning_2fkmeans_5ftree_5fpartitioner_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fpartitioning_2fkmeans_5ftree_5fpartitioner_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fpartitioning_2fkmeans_5ftree_5fpartitioner_2eproto;
namespace research_scann {
class SerializedKMeansTreePartitioner;
struct SerializedKMeansTreePartitionerDefaultTypeInternal;
extern SerializedKMeansTreePartitionerDefaultTypeInternal _SerializedKMeansTreePartitioner_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::SerializedKMeansTreePartitioner* Arena::CreateMaybeMessage<::research_scann::SerializedKMeansTreePartitioner>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

// ===================================================================

class SerializedKMeansTreePartitioner final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.SerializedKMeansTreePartitioner) */ {
 public:
  inline SerializedKMeansTreePartitioner() : SerializedKMeansTreePartitioner(nullptr) {}
  ~SerializedKMeansTreePartitioner() override;
  explicit constexpr SerializedKMeansTreePartitioner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKMeansTreePartitioner(const SerializedKMeansTreePartitioner& from);
  SerializedKMeansTreePartitioner(SerializedKMeansTreePartitioner&& from) noexcept
    : SerializedKMeansTreePartitioner() {
    *this = ::std::move(from);
  }

  inline SerializedKMeansTreePartitioner& operator=(const SerializedKMeansTreePartitioner& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKMeansTreePartitioner& operator=(SerializedKMeansTreePartitioner&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKMeansTreePartitioner& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKMeansTreePartitioner* internal_default_instance() {
    return reinterpret_cast<const SerializedKMeansTreePartitioner*>(
               &_SerializedKMeansTreePartitioner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SerializedKMeansTreePartitioner& a, SerializedKMeansTreePartitioner& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKMeansTreePartitioner* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKMeansTreePartitioner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedKMeansTreePartitioner* New() const final {
    return new SerializedKMeansTreePartitioner();
  }

  SerializedKMeansTreePartitioner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedKMeansTreePartitioner>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKMeansTreePartitioner& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedKMeansTreePartitioner& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKMeansTreePartitioner* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.SerializedKMeansTreePartitioner";
  }
  protected:
  explicit SerializedKMeansTreePartitioner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKmeansTreeFieldNumber = 1,
  };
  // optional .research_scann.SerializedKMeansTree kmeans_tree = 1;
  bool has_kmeans_tree() const;
  private:
  bool _internal_has_kmeans_tree() const;
  public:
  void clear_kmeans_tree();
  const ::research_scann::SerializedKMeansTree& kmeans_tree() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::SerializedKMeansTree* release_kmeans_tree();
  ::research_scann::SerializedKMeansTree* mutable_kmeans_tree();
  void set_allocated_kmeans_tree(::research_scann::SerializedKMeansTree* kmeans_tree);
  private:
  const ::research_scann::SerializedKMeansTree& _internal_kmeans_tree() const;
  ::research_scann::SerializedKMeansTree* _internal_mutable_kmeans_tree();
  public:
  void unsafe_arena_set_allocated_kmeans_tree(
      ::research_scann::SerializedKMeansTree* kmeans_tree);
  ::research_scann::SerializedKMeansTree* unsafe_arena_release_kmeans_tree();

  // @@protoc_insertion_point(class_scope:research_scann.SerializedKMeansTreePartitioner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::research_scann::SerializedKMeansTree* kmeans_tree_;
  friend struct ::TableStruct_scann_2fpartitioning_2fkmeans_5ftree_5fpartitioner_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SerializedKMeansTreePartitioner

// optional .research_scann.SerializedKMeansTree kmeans_tree = 1;
inline bool SerializedKMeansTreePartitioner::_internal_has_kmeans_tree() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || kmeans_tree_ != nullptr);
  return value;
}
inline bool SerializedKMeansTreePartitioner::has_kmeans_tree() const {
  return _internal_has_kmeans_tree();
}
inline const ::research_scann::SerializedKMeansTree& SerializedKMeansTreePartitioner::_internal_kmeans_tree() const {
  const ::research_scann::SerializedKMeansTree* p = kmeans_tree_;
  return p != nullptr ? *p : reinterpret_cast<const ::research_scann::SerializedKMeansTree&>(
      ::research_scann::_SerializedKMeansTree_default_instance_);
}
inline const ::research_scann::SerializedKMeansTree& SerializedKMeansTreePartitioner::kmeans_tree() const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedKMeansTreePartitioner.kmeans_tree)
  return _internal_kmeans_tree();
}
inline void SerializedKMeansTreePartitioner::unsafe_arena_set_allocated_kmeans_tree(
    ::research_scann::SerializedKMeansTree* kmeans_tree) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kmeans_tree_);
  }
  kmeans_tree_ = kmeans_tree;
  if (kmeans_tree) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.SerializedKMeansTreePartitioner.kmeans_tree)
}
inline ::research_scann::SerializedKMeansTree* SerializedKMeansTreePartitioner::release_kmeans_tree() {
  _has_bits_[0] &= ~0x00000001u;
  ::research_scann::SerializedKMeansTree* temp = kmeans_tree_;
  kmeans_tree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::research_scann::SerializedKMeansTree* SerializedKMeansTreePartitioner::unsafe_arena_release_kmeans_tree() {
  // @@protoc_insertion_point(field_release:research_scann.SerializedKMeansTreePartitioner.kmeans_tree)
  _has_bits_[0] &= ~0x00000001u;
  ::research_scann::SerializedKMeansTree* temp = kmeans_tree_;
  kmeans_tree_ = nullptr;
  return temp;
}
inline ::research_scann::SerializedKMeansTree* SerializedKMeansTreePartitioner::_internal_mutable_kmeans_tree() {
  _has_bits_[0] |= 0x00000001u;
  if (kmeans_tree_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::SerializedKMeansTree>(GetArenaForAllocation());
    kmeans_tree_ = p;
  }
  return kmeans_tree_;
}
inline ::research_scann::SerializedKMeansTree* SerializedKMeansTreePartitioner::mutable_kmeans_tree() {
  ::research_scann::SerializedKMeansTree* _msg = _internal_mutable_kmeans_tree();
  // @@protoc_insertion_point(field_mutable:research_scann.SerializedKMeansTreePartitioner.kmeans_tree)
  return _msg;
}
inline void SerializedKMeansTreePartitioner::set_allocated_kmeans_tree(::research_scann::SerializedKMeansTree* kmeans_tree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(kmeans_tree_);
  }
  if (kmeans_tree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kmeans_tree));
    if (message_arena != submessage_arena) {
      kmeans_tree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kmeans_tree, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  kmeans_tree_ = kmeans_tree;
  // @@protoc_insertion_point(field_set_allocated:research_scann.SerializedKMeansTreePartitioner.kmeans_tree)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fpartitioning_2fkmeans_5ftree_5fpartitioner_2eproto
