// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/metadata.proto

#include "scann/proto/metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace research_scann {
constexpr MetadataConfig::MetadataConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MetadataConfigDefaultTypeInternal {
  constexpr MetadataConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetadataConfigDefaultTypeInternal() {}
  union {
    MetadataConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetadataConfigDefaultTypeInternal _MetadataConfig_default_instance_;
constexpr SparseIntersectionConfig::SparseIntersectionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_to_return_(4294967295u){}
struct SparseIntersectionConfigDefaultTypeInternal {
  constexpr SparseIntersectionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SparseIntersectionConfigDefaultTypeInternal() {}
  union {
    SparseIntersectionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SparseIntersectionConfigDefaultTypeInternal _SparseIntersectionConfig_default_instance_;
constexpr SparseIntersectionResult::SparseIntersectionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : intersecting_dimension_()
  , value_()
  , num_intersecting_dimensions_(0u){}
struct SparseIntersectionResultDefaultTypeInternal {
  constexpr SparseIntersectionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SparseIntersectionResultDefaultTypeInternal() {}
  union {
    SparseIntersectionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SparseIntersectionResultDefaultTypeInternal _SparseIntersectionResult_default_instance_;
constexpr UserInfoMetadataConfig::UserInfoMetadataConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : set_user_info_for_query_(false)
  , set_user_info_for_neighbor_(true){}
struct UserInfoMetadataConfigDefaultTypeInternal {
  constexpr UserInfoMetadataConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserInfoMetadataConfigDefaultTypeInternal() {}
  union {
    UserInfoMetadataConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserInfoMetadataConfigDefaultTypeInternal _UserInfoMetadataConfig_default_instance_;
constexpr ClassLabelMetadataConfig::ClassLabelMetadataConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ClassLabelMetadataConfigDefaultTypeInternal {
  constexpr ClassLabelMetadataConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClassLabelMetadataConfigDefaultTypeInternal() {}
  union {
    ClassLabelMetadataConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClassLabelMetadataConfigDefaultTypeInternal _ClassLabelMetadataConfig_default_instance_;
constexpr DatabaseVectorMetadataConfig::DatabaseVectorMetadataConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : return_database_vector_(false){}
struct DatabaseVectorMetadataConfigDefaultTypeInternal {
  constexpr DatabaseVectorMetadataConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatabaseVectorMetadataConfigDefaultTypeInternal() {}
  union {
    DatabaseVectorMetadataConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatabaseVectorMetadataConfigDefaultTypeInternal _DatabaseVectorMetadataConfig_default_instance_;
}  // namespace research_scann
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2fmetadata_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scann_2fproto_2fmetadata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2fmetadata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2fmetadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::research_scann::MetadataConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::research_scann::MetadataConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::research_scann::MetadataConfig, metadata_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionConfig, max_to_return_),
  0,
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionResult, intersecting_dimension_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionResult, value_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SparseIntersectionResult, num_intersecting_dimensions_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::research_scann::UserInfoMetadataConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::UserInfoMetadataConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::UserInfoMetadataConfig, set_user_info_for_query_),
  PROTOBUF_FIELD_OFFSET(::research_scann::UserInfoMetadataConfig, set_user_info_for_neighbor_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::research_scann::ClassLabelMetadataConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::DatabaseVectorMetadataConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::DatabaseVectorMetadataConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::DatabaseVectorMetadataConfig, return_database_vector_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::research_scann::MetadataConfig)},
  { 12, 18, sizeof(::research_scann::SparseIntersectionConfig)},
  { 19, 27, sizeof(::research_scann::SparseIntersectionResult)},
  { 30, 37, sizeof(::research_scann::UserInfoMetadataConfig)},
  { 39, -1, sizeof(::research_scann::ClassLabelMetadataConfig)},
  { 44, 50, sizeof(::research_scann::DatabaseVectorMetadataConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_MetadataConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_SparseIntersectionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_SparseIntersectionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_UserInfoMetadataConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_ClassLabelMetadataConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_DatabaseVectorMetadataConfig_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2fmetadata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032scann/proto/metadata.proto\022\016research_s"
  "cann\032\"scann/proto/distance_measure.proto"
  "\"\214\003\n\016MetadataConfig\022G\n\023sparse_intersecti"
  "on\030\001 \001(\0132(.research_scann.SparseIntersec"
  "tionConfigH\000\022\?\n\016exact_distance\030\002 \001(\0132%.r"
  "esearch_scann.DistanceMeasureConfigH\000\022:\n"
  "\010userinfo\030\003 \001(\0132&.research_scann.UserInf"
  "oMetadataConfigH\000\022\?\n\013class_label\030\006 \001(\0132("
  ".research_scann.ClassLabelMetadataConfig"
  "H\000\022G\n\017database_vector\030\005 \001(\0132,.research_s"
  "cann.DatabaseVectorMetadataConfigH\000\022\031\n\017c"
  "ustom_metadata\030\004 \001(\014H\000B\017\n\rmetadata_type\""
  "=\n\030SparseIntersectionConfig\022!\n\rmax_to_re"
  "turn\030\001 \001(\r:\n4294967295\"n\n\030SparseIntersec"
  "tionResult\022\036\n\026intersecting_dimension\030\001 \003"
  "(\004\022\r\n\005value\030\002 \003(\001\022#\n\033num_intersecting_di"
  "mensions\030\003 \001(\r\"j\n\026UserInfoMetadataConfig"
  "\022&\n\027set_user_info_for_query\030\001 \001(\010:\005false"
  "\022(\n\032set_user_info_for_neighbor\030\002 \001(\010:\004tr"
  "ue\"\032\n\030ClassLabelMetadataConfig\"E\n\034Databa"
  "seVectorMetadataConfig\022%\n\026return_databas"
  "e_vector\030\001 \001(\010:\005false"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fproto_2fmetadata_2eproto_deps[1] = {
  &::descriptor_table_scann_2fproto_2fdistance_5fmeasure_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2fmetadata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fmetadata_2eproto = {
  false, false, 861, descriptor_table_protodef_scann_2fproto_2fmetadata_2eproto, "scann/proto/metadata.proto", 
  &descriptor_table_scann_2fproto_2fmetadata_2eproto_once, descriptor_table_scann_2fproto_2fmetadata_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_scann_2fproto_2fmetadata_2eproto::offsets,
  file_level_metadata_scann_2fproto_2fmetadata_2eproto, file_level_enum_descriptors_scann_2fproto_2fmetadata_2eproto, file_level_service_descriptors_scann_2fproto_2fmetadata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_scann_2fproto_2fmetadata_2eproto_getter() {
  return &descriptor_table_scann_2fproto_2fmetadata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_scann_2fproto_2fmetadata_2eproto(&descriptor_table_scann_2fproto_2fmetadata_2eproto);
namespace research_scann {

// ===================================================================

class MetadataConfig::_Internal {
 public:
  static const ::research_scann::SparseIntersectionConfig& sparse_intersection(const MetadataConfig* msg);
  static const ::research_scann::DistanceMeasureConfig& exact_distance(const MetadataConfig* msg);
  static const ::research_scann::UserInfoMetadataConfig& userinfo(const MetadataConfig* msg);
  static const ::research_scann::ClassLabelMetadataConfig& class_label(const MetadataConfig* msg);
  static const ::research_scann::DatabaseVectorMetadataConfig& database_vector(const MetadataConfig* msg);
};

const ::research_scann::SparseIntersectionConfig&
MetadataConfig::_Internal::sparse_intersection(const MetadataConfig* msg) {
  return *msg->metadata_type_.sparse_intersection_;
}
const ::research_scann::DistanceMeasureConfig&
MetadataConfig::_Internal::exact_distance(const MetadataConfig* msg) {
  return *msg->metadata_type_.exact_distance_;
}
const ::research_scann::UserInfoMetadataConfig&
MetadataConfig::_Internal::userinfo(const MetadataConfig* msg) {
  return *msg->metadata_type_.userinfo_;
}
const ::research_scann::ClassLabelMetadataConfig&
MetadataConfig::_Internal::class_label(const MetadataConfig* msg) {
  return *msg->metadata_type_.class_label_;
}
const ::research_scann::DatabaseVectorMetadataConfig&
MetadataConfig::_Internal::database_vector(const MetadataConfig* msg) {
  return *msg->metadata_type_.database_vector_;
}
void MetadataConfig::set_allocated_sparse_intersection(::research_scann::SparseIntersectionConfig* sparse_intersection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_metadata_type();
  if (sparse_intersection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::research_scann::SparseIntersectionConfig>::GetOwningArena(sparse_intersection);
    if (message_arena != submessage_arena) {
      sparse_intersection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sparse_intersection, submessage_arena);
    }
    set_has_sparse_intersection();
    metadata_type_.sparse_intersection_ = sparse_intersection;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.MetadataConfig.sparse_intersection)
}
void MetadataConfig::set_allocated_exact_distance(::research_scann::DistanceMeasureConfig* exact_distance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_metadata_type();
  if (exact_distance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exact_distance));
    if (message_arena != submessage_arena) {
      exact_distance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exact_distance, submessage_arena);
    }
    set_has_exact_distance();
    metadata_type_.exact_distance_ = exact_distance;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.MetadataConfig.exact_distance)
}
void MetadataConfig::clear_exact_distance() {
  if (_internal_has_exact_distance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete metadata_type_.exact_distance_;
    }
    clear_has_metadata_type();
  }
}
void MetadataConfig::set_allocated_userinfo(::research_scann::UserInfoMetadataConfig* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_metadata_type();
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::research_scann::UserInfoMetadataConfig>::GetOwningArena(userinfo);
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    set_has_userinfo();
    metadata_type_.userinfo_ = userinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.MetadataConfig.userinfo)
}
void MetadataConfig::set_allocated_class_label(::research_scann::ClassLabelMetadataConfig* class_label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_metadata_type();
  if (class_label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::research_scann::ClassLabelMetadataConfig>::GetOwningArena(class_label);
    if (message_arena != submessage_arena) {
      class_label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, class_label, submessage_arena);
    }
    set_has_class_label();
    metadata_type_.class_label_ = class_label;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.MetadataConfig.class_label)
}
void MetadataConfig::set_allocated_database_vector(::research_scann::DatabaseVectorMetadataConfig* database_vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_metadata_type();
  if (database_vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::research_scann::DatabaseVectorMetadataConfig>::GetOwningArena(database_vector);
    if (message_arena != submessage_arena) {
      database_vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_vector, submessage_arena);
    }
    set_has_database_vector();
    metadata_type_.database_vector_ = database_vector;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.MetadataConfig.database_vector)
}
MetadataConfig::MetadataConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.MetadataConfig)
}
MetadataConfig::MetadataConfig(const MetadataConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_metadata_type();
  switch (from.metadata_type_case()) {
    case kSparseIntersection: {
      _internal_mutable_sparse_intersection()->::research_scann::SparseIntersectionConfig::MergeFrom(from._internal_sparse_intersection());
      break;
    }
    case kExactDistance: {
      _internal_mutable_exact_distance()->::research_scann::DistanceMeasureConfig::MergeFrom(from._internal_exact_distance());
      break;
    }
    case kUserinfo: {
      _internal_mutable_userinfo()->::research_scann::UserInfoMetadataConfig::MergeFrom(from._internal_userinfo());
      break;
    }
    case kClassLabel: {
      _internal_mutable_class_label()->::research_scann::ClassLabelMetadataConfig::MergeFrom(from._internal_class_label());
      break;
    }
    case kDatabaseVector: {
      _internal_mutable_database_vector()->::research_scann::DatabaseVectorMetadataConfig::MergeFrom(from._internal_database_vector());
      break;
    }
    case kCustomMetadata: {
      _internal_set_custom_metadata(from._internal_custom_metadata());
      break;
    }
    case METADATA_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.MetadataConfig)
}

inline void MetadataConfig::SharedCtor() {
clear_has_metadata_type();
}

MetadataConfig::~MetadataConfig() {
  // @@protoc_insertion_point(destructor:research_scann.MetadataConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetadataConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_metadata_type()) {
    clear_metadata_type();
  }
}

void MetadataConfig::ArenaDtor(void* object) {
  MetadataConfig* _this = reinterpret_cast< MetadataConfig* >(object);
  (void)_this;
}
void MetadataConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetadataConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetadataConfig::clear_metadata_type() {
// @@protoc_insertion_point(one_of_clear_start:research_scann.MetadataConfig)
  switch (metadata_type_case()) {
    case kSparseIntersection: {
      if (GetArenaForAllocation() == nullptr) {
        delete metadata_type_.sparse_intersection_;
      }
      break;
    }
    case kExactDistance: {
      if (GetArenaForAllocation() == nullptr) {
        delete metadata_type_.exact_distance_;
      }
      break;
    }
    case kUserinfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete metadata_type_.userinfo_;
      }
      break;
    }
    case kClassLabel: {
      if (GetArenaForAllocation() == nullptr) {
        delete metadata_type_.class_label_;
      }
      break;
    }
    case kDatabaseVector: {
      if (GetArenaForAllocation() == nullptr) {
        delete metadata_type_.database_vector_;
      }
      break;
    }
    case kCustomMetadata: {
      metadata_type_.custom_metadata_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case METADATA_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = METADATA_TYPE_NOT_SET;
}


void MetadataConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.MetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_metadata_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .research_scann.SparseIntersectionConfig sparse_intersection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sparse_intersection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .research_scann.DistanceMeasureConfig exact_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_exact_distance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .research_scann.UserInfoMetadataConfig userinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_userinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes custom_metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_custom_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .research_scann.DatabaseVectorMetadataConfig database_vector = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_vector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .research_scann.ClassLabelMetadataConfig class_label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_class_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetadataConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.MetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (metadata_type_case()) {
    case kSparseIntersection: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::sparse_intersection(this), target, stream);
      break;
    }
    case kExactDistance: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::exact_distance(this), target, stream);
      break;
    }
    case kUserinfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::userinfo(this), target, stream);
      break;
    }
    case kCustomMetadata: {
      target = stream->WriteBytesMaybeAliased(
          4, this->_internal_custom_metadata(), target);
      break;
    }
    case kDatabaseVector: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::database_vector(this), target, stream);
      break;
    }
    case kClassLabel: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::class_label(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.MetadataConfig)
  return target;
}

size_t MetadataConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.MetadataConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (metadata_type_case()) {
    // .research_scann.SparseIntersectionConfig sparse_intersection = 1;
    case kSparseIntersection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_type_.sparse_intersection_);
      break;
    }
    // .research_scann.DistanceMeasureConfig exact_distance = 2;
    case kExactDistance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_type_.exact_distance_);
      break;
    }
    // .research_scann.UserInfoMetadataConfig userinfo = 3;
    case kUserinfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_type_.userinfo_);
      break;
    }
    // .research_scann.ClassLabelMetadataConfig class_label = 6;
    case kClassLabel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_type_.class_label_);
      break;
    }
    // .research_scann.DatabaseVectorMetadataConfig database_vector = 5;
    case kDatabaseVector: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_type_.database_vector_);
      break;
    }
    // bytes custom_metadata = 4;
    case kCustomMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_custom_metadata());
      break;
    }
    case METADATA_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetadataConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetadataConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetadataConfig::GetClassData() const { return &_class_data_; }

void MetadataConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MetadataConfig *>(to)->MergeFrom(
      static_cast<const MetadataConfig &>(from));
}


void MetadataConfig::MergeFrom(const MetadataConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.MetadataConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.metadata_type_case()) {
    case kSparseIntersection: {
      _internal_mutable_sparse_intersection()->::research_scann::SparseIntersectionConfig::MergeFrom(from._internal_sparse_intersection());
      break;
    }
    case kExactDistance: {
      _internal_mutable_exact_distance()->::research_scann::DistanceMeasureConfig::MergeFrom(from._internal_exact_distance());
      break;
    }
    case kUserinfo: {
      _internal_mutable_userinfo()->::research_scann::UserInfoMetadataConfig::MergeFrom(from._internal_userinfo());
      break;
    }
    case kClassLabel: {
      _internal_mutable_class_label()->::research_scann::ClassLabelMetadataConfig::MergeFrom(from._internal_class_label());
      break;
    }
    case kDatabaseVector: {
      _internal_mutable_database_vector()->::research_scann::DatabaseVectorMetadataConfig::MergeFrom(from._internal_database_vector());
      break;
    }
    case kCustomMetadata: {
      _internal_set_custom_metadata(from._internal_custom_metadata());
      break;
    }
    case METADATA_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetadataConfig::CopyFrom(const MetadataConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.MetadataConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataConfig::IsInitialized() const {
  return true;
}

void MetadataConfig::InternalSwap(MetadataConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(metadata_type_, other->metadata_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2fproto_2fmetadata_2eproto_getter, &descriptor_table_scann_2fproto_2fmetadata_2eproto_once,
      file_level_metadata_scann_2fproto_2fmetadata_2eproto[0]);
}

// ===================================================================

class SparseIntersectionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseIntersectionConfig>()._has_bits_);
  static void set_has_max_to_return(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SparseIntersectionConfig::SparseIntersectionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.SparseIntersectionConfig)
}
SparseIntersectionConfig::SparseIntersectionConfig(const SparseIntersectionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_to_return_ = from.max_to_return_;
  // @@protoc_insertion_point(copy_constructor:research_scann.SparseIntersectionConfig)
}

inline void SparseIntersectionConfig::SharedCtor() {
max_to_return_ = 4294967295u;
}

SparseIntersectionConfig::~SparseIntersectionConfig() {
  // @@protoc_insertion_point(destructor:research_scann.SparseIntersectionConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SparseIntersectionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SparseIntersectionConfig::ArenaDtor(void* object) {
  SparseIntersectionConfig* _this = reinterpret_cast< SparseIntersectionConfig* >(object);
  (void)_this;
}
void SparseIntersectionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SparseIntersectionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SparseIntersectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.SparseIntersectionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_to_return_ = 4294967295u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseIntersectionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 max_to_return = 1 [default = 4294967295];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_to_return(&has_bits);
          max_to_return_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseIntersectionConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.SparseIntersectionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_to_return = 1 [default = 4294967295];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_to_return(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.SparseIntersectionConfig)
  return target;
}

size_t SparseIntersectionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.SparseIntersectionConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 max_to_return = 1 [default = 4294967295];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_to_return());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseIntersectionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SparseIntersectionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseIntersectionConfig::GetClassData() const { return &_class_data_; }

void SparseIntersectionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SparseIntersectionConfig *>(to)->MergeFrom(
      static_cast<const SparseIntersectionConfig &>(from));
}


void SparseIntersectionConfig::MergeFrom(const SparseIntersectionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.SparseIntersectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_to_return()) {
    _internal_set_max_to_return(from._internal_max_to_return());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseIntersectionConfig::CopyFrom(const SparseIntersectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.SparseIntersectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseIntersectionConfig::IsInitialized() const {
  return true;
}

void SparseIntersectionConfig::InternalSwap(SparseIntersectionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_to_return_, other->max_to_return_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseIntersectionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2fproto_2fmetadata_2eproto_getter, &descriptor_table_scann_2fproto_2fmetadata_2eproto_once,
      file_level_metadata_scann_2fproto_2fmetadata_2eproto[1]);
}

// ===================================================================

class SparseIntersectionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseIntersectionResult>()._has_bits_);
  static void set_has_num_intersecting_dimensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SparseIntersectionResult::SparseIntersectionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  intersecting_dimension_(arena),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.SparseIntersectionResult)
}
SparseIntersectionResult::SparseIntersectionResult(const SparseIntersectionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      intersecting_dimension_(from.intersecting_dimension_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_intersecting_dimensions_ = from.num_intersecting_dimensions_;
  // @@protoc_insertion_point(copy_constructor:research_scann.SparseIntersectionResult)
}

inline void SparseIntersectionResult::SharedCtor() {
num_intersecting_dimensions_ = 0u;
}

SparseIntersectionResult::~SparseIntersectionResult() {
  // @@protoc_insertion_point(destructor:research_scann.SparseIntersectionResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SparseIntersectionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SparseIntersectionResult::ArenaDtor(void* object) {
  SparseIntersectionResult* _this = reinterpret_cast< SparseIntersectionResult* >(object);
  (void)_this;
}
void SparseIntersectionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SparseIntersectionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SparseIntersectionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.SparseIntersectionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intersecting_dimension_.Clear();
  value_.Clear();
  num_intersecting_dimensions_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseIntersectionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 intersecting_dimension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_intersecting_dimension(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_intersecting_dimension(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_intersecting_dimensions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_intersecting_dimensions(&has_bits);
          num_intersecting_dimensions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseIntersectionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.SparseIntersectionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 intersecting_dimension = 1;
  for (int i = 0, n = this->_internal_intersecting_dimension_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_intersecting_dimension(i), target);
  }

  // repeated double value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_intersecting_dimensions = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_intersecting_dimensions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.SparseIntersectionResult)
  return target;
}

size_t SparseIntersectionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.SparseIntersectionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 intersecting_dimension = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->intersecting_dimension_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_intersecting_dimension_size());
    total_size += data_size;
  }

  // repeated double value = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_value_size());
    total_size += data_size;
  }

  // optional uint32 num_intersecting_dimensions = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_intersecting_dimensions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseIntersectionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SparseIntersectionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseIntersectionResult::GetClassData() const { return &_class_data_; }

void SparseIntersectionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SparseIntersectionResult *>(to)->MergeFrom(
      static_cast<const SparseIntersectionResult &>(from));
}


void SparseIntersectionResult::MergeFrom(const SparseIntersectionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.SparseIntersectionResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intersecting_dimension_.MergeFrom(from.intersecting_dimension_);
  value_.MergeFrom(from.value_);
  if (from._internal_has_num_intersecting_dimensions()) {
    _internal_set_num_intersecting_dimensions(from._internal_num_intersecting_dimensions());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseIntersectionResult::CopyFrom(const SparseIntersectionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.SparseIntersectionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseIntersectionResult::IsInitialized() const {
  return true;
}

void SparseIntersectionResult::InternalSwap(SparseIntersectionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  intersecting_dimension_.InternalSwap(&other->intersecting_dimension_);
  value_.InternalSwap(&other->value_);
  swap(num_intersecting_dimensions_, other->num_intersecting_dimensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseIntersectionResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2fproto_2fmetadata_2eproto_getter, &descriptor_table_scann_2fproto_2fmetadata_2eproto_once,
      file_level_metadata_scann_2fproto_2fmetadata_2eproto[2]);
}

// ===================================================================

class UserInfoMetadataConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInfoMetadataConfig>()._has_bits_);
  static void set_has_set_user_info_for_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_set_user_info_for_neighbor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserInfoMetadataConfig::UserInfoMetadataConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.UserInfoMetadataConfig)
}
UserInfoMetadataConfig::UserInfoMetadataConfig(const UserInfoMetadataConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&set_user_info_for_query_, &from.set_user_info_for_query_,
    static_cast<size_t>(reinterpret_cast<char*>(&set_user_info_for_neighbor_) -
    reinterpret_cast<char*>(&set_user_info_for_query_)) + sizeof(set_user_info_for_neighbor_));
  // @@protoc_insertion_point(copy_constructor:research_scann.UserInfoMetadataConfig)
}

inline void UserInfoMetadataConfig::SharedCtor() {
set_user_info_for_query_ = false;
set_user_info_for_neighbor_ = true;
}

UserInfoMetadataConfig::~UserInfoMetadataConfig() {
  // @@protoc_insertion_point(destructor:research_scann.UserInfoMetadataConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserInfoMetadataConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserInfoMetadataConfig::ArenaDtor(void* object) {
  UserInfoMetadataConfig* _this = reinterpret_cast< UserInfoMetadataConfig* >(object);
  (void)_this;
}
void UserInfoMetadataConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInfoMetadataConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserInfoMetadataConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.UserInfoMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    set_user_info_for_query_ = false;
    set_user_info_for_neighbor_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfoMetadataConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool set_user_info_for_query = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_set_user_info_for_query(&has_bits);
          set_user_info_for_query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool set_user_info_for_neighbor = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_set_user_info_for_neighbor(&has_bits);
          set_user_info_for_neighbor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfoMetadataConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.UserInfoMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool set_user_info_for_query = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_set_user_info_for_query(), target);
  }

  // optional bool set_user_info_for_neighbor = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_set_user_info_for_neighbor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.UserInfoMetadataConfig)
  return target;
}

size_t UserInfoMetadataConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.UserInfoMetadataConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool set_user_info_for_query = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool set_user_info_for_neighbor = 2 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfoMetadataConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserInfoMetadataConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfoMetadataConfig::GetClassData() const { return &_class_data_; }

void UserInfoMetadataConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UserInfoMetadataConfig *>(to)->MergeFrom(
      static_cast<const UserInfoMetadataConfig &>(from));
}


void UserInfoMetadataConfig::MergeFrom(const UserInfoMetadataConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.UserInfoMetadataConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      set_user_info_for_query_ = from.set_user_info_for_query_;
    }
    if (cached_has_bits & 0x00000002u) {
      set_user_info_for_neighbor_ = from.set_user_info_for_neighbor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfoMetadataConfig::CopyFrom(const UserInfoMetadataConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.UserInfoMetadataConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoMetadataConfig::IsInitialized() const {
  return true;
}

void UserInfoMetadataConfig::InternalSwap(UserInfoMetadataConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(set_user_info_for_query_, other->set_user_info_for_query_);
  swap(set_user_info_for_neighbor_, other->set_user_info_for_neighbor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoMetadataConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2fproto_2fmetadata_2eproto_getter, &descriptor_table_scann_2fproto_2fmetadata_2eproto_once,
      file_level_metadata_scann_2fproto_2fmetadata_2eproto[3]);
}

// ===================================================================

class ClassLabelMetadataConfig::_Internal {
 public:
};

ClassLabelMetadataConfig::ClassLabelMetadataConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.ClassLabelMetadataConfig)
}
ClassLabelMetadataConfig::ClassLabelMetadataConfig(const ClassLabelMetadataConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:research_scann.ClassLabelMetadataConfig)
}

inline void ClassLabelMetadataConfig::SharedCtor() {
}

ClassLabelMetadataConfig::~ClassLabelMetadataConfig() {
  // @@protoc_insertion_point(destructor:research_scann.ClassLabelMetadataConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClassLabelMetadataConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClassLabelMetadataConfig::ArenaDtor(void* object) {
  ClassLabelMetadataConfig* _this = reinterpret_cast< ClassLabelMetadataConfig* >(object);
  (void)_this;
}
void ClassLabelMetadataConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClassLabelMetadataConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClassLabelMetadataConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.ClassLabelMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassLabelMetadataConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassLabelMetadataConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.ClassLabelMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.ClassLabelMetadataConfig)
  return target;
}

size_t ClassLabelMetadataConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.ClassLabelMetadataConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassLabelMetadataConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClassLabelMetadataConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassLabelMetadataConfig::GetClassData() const { return &_class_data_; }

void ClassLabelMetadataConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ClassLabelMetadataConfig *>(to)->MergeFrom(
      static_cast<const ClassLabelMetadataConfig &>(from));
}


void ClassLabelMetadataConfig::MergeFrom(const ClassLabelMetadataConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.ClassLabelMetadataConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassLabelMetadataConfig::CopyFrom(const ClassLabelMetadataConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.ClassLabelMetadataConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassLabelMetadataConfig::IsInitialized() const {
  return true;
}

void ClassLabelMetadataConfig::InternalSwap(ClassLabelMetadataConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassLabelMetadataConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2fproto_2fmetadata_2eproto_getter, &descriptor_table_scann_2fproto_2fmetadata_2eproto_once,
      file_level_metadata_scann_2fproto_2fmetadata_2eproto[4]);
}

// ===================================================================

class DatabaseVectorMetadataConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DatabaseVectorMetadataConfig>()._has_bits_);
  static void set_has_return_database_vector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DatabaseVectorMetadataConfig::DatabaseVectorMetadataConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.DatabaseVectorMetadataConfig)
}
DatabaseVectorMetadataConfig::DatabaseVectorMetadataConfig(const DatabaseVectorMetadataConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  return_database_vector_ = from.return_database_vector_;
  // @@protoc_insertion_point(copy_constructor:research_scann.DatabaseVectorMetadataConfig)
}

inline void DatabaseVectorMetadataConfig::SharedCtor() {
return_database_vector_ = false;
}

DatabaseVectorMetadataConfig::~DatabaseVectorMetadataConfig() {
  // @@protoc_insertion_point(destructor:research_scann.DatabaseVectorMetadataConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DatabaseVectorMetadataConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DatabaseVectorMetadataConfig::ArenaDtor(void* object) {
  DatabaseVectorMetadataConfig* _this = reinterpret_cast< DatabaseVectorMetadataConfig* >(object);
  (void)_this;
}
void DatabaseVectorMetadataConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatabaseVectorMetadataConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DatabaseVectorMetadataConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.DatabaseVectorMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return_database_vector_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatabaseVectorMetadataConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool return_database_vector = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_return_database_vector(&has_bits);
          return_database_vector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DatabaseVectorMetadataConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.DatabaseVectorMetadataConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool return_database_vector = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_return_database_vector(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.DatabaseVectorMetadataConfig)
  return target;
}

size_t DatabaseVectorMetadataConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.DatabaseVectorMetadataConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool return_database_vector = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatabaseVectorMetadataConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DatabaseVectorMetadataConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatabaseVectorMetadataConfig::GetClassData() const { return &_class_data_; }

void DatabaseVectorMetadataConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DatabaseVectorMetadataConfig *>(to)->MergeFrom(
      static_cast<const DatabaseVectorMetadataConfig &>(from));
}


void DatabaseVectorMetadataConfig::MergeFrom(const DatabaseVectorMetadataConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.DatabaseVectorMetadataConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_return_database_vector()) {
    _internal_set_return_database_vector(from._internal_return_database_vector());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatabaseVectorMetadataConfig::CopyFrom(const DatabaseVectorMetadataConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.DatabaseVectorMetadataConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseVectorMetadataConfig::IsInitialized() const {
  return true;
}

void DatabaseVectorMetadataConfig::InternalSwap(DatabaseVectorMetadataConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(return_database_vector_, other->return_database_vector_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatabaseVectorMetadataConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2fproto_2fmetadata_2eproto_getter, &descriptor_table_scann_2fproto_2fmetadata_2eproto_once,
      file_level_metadata_scann_2fproto_2fmetadata_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::MetadataConfig* Arena::CreateMaybeMessage< ::research_scann::MetadataConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::MetadataConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::SparseIntersectionConfig* Arena::CreateMaybeMessage< ::research_scann::SparseIntersectionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::SparseIntersectionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::SparseIntersectionResult* Arena::CreateMaybeMessage< ::research_scann::SparseIntersectionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::SparseIntersectionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::UserInfoMetadataConfig* Arena::CreateMaybeMessage< ::research_scann::UserInfoMetadataConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::UserInfoMetadataConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::ClassLabelMetadataConfig* Arena::CreateMaybeMessage< ::research_scann::ClassLabelMetadataConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::ClassLabelMetadataConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::DatabaseVectorMetadataConfig* Arena::CreateMaybeMessage< ::research_scann::DatabaseVectorMetadataConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::DatabaseVectorMetadataConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
