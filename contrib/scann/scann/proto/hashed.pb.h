// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/hashed.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fhashed_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fhashed_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "scann/data_format/features.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fhashed_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fproto_2fhashed_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fhashed_2eproto;
namespace research_scann {
class HashedItem;
struct HashedItemDefaultTypeInternal;
extern HashedItemDefaultTypeInternal _HashedItem_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::HashedItem* Arena::CreateMaybeMessage<::research_scann::HashedItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

enum HashedItem_PackingStrategy : int {
  HashedItem_PackingStrategy_NONE = 0,
  HashedItem_PackingStrategy_NIBBLE = 1,
  HashedItem_PackingStrategy_BINARY = 2
};
bool HashedItem_PackingStrategy_IsValid(int value);
constexpr HashedItem_PackingStrategy HashedItem_PackingStrategy_PackingStrategy_MIN = HashedItem_PackingStrategy_NONE;
constexpr HashedItem_PackingStrategy HashedItem_PackingStrategy_PackingStrategy_MAX = HashedItem_PackingStrategy_BINARY;
constexpr int HashedItem_PackingStrategy_PackingStrategy_ARRAYSIZE = HashedItem_PackingStrategy_PackingStrategy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HashedItem_PackingStrategy_descriptor();
template<typename T>
inline const std::string& HashedItem_PackingStrategy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HashedItem_PackingStrategy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HashedItem_PackingStrategy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HashedItem_PackingStrategy_descriptor(), enum_t_value);
}
inline bool HashedItem_PackingStrategy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HashedItem_PackingStrategy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HashedItem_PackingStrategy>(
    HashedItem_PackingStrategy_descriptor(), name, value);
}
// ===================================================================

class HashedItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.HashedItem) */ {
 public:
  inline HashedItem() : HashedItem(nullptr) {}
  ~HashedItem() override;
  explicit constexpr HashedItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HashedItem(const HashedItem& from);
  HashedItem(HashedItem&& from) noexcept
    : HashedItem() {
    *this = ::std::move(from);
  }

  inline HashedItem& operator=(const HashedItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashedItem& operator=(HashedItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HashedItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashedItem* internal_default_instance() {
    return reinterpret_cast<const HashedItem*>(
               &_HashedItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HashedItem& a, HashedItem& b) {
    a.Swap(&b);
  }
  inline void Swap(HashedItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashedItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashedItem* New() const final {
    return new HashedItem();
  }

  HashedItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashedItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HashedItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HashedItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashedItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.HashedItem";
  }
  protected:
  explicit HashedItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HashedItem_PackingStrategy PackingStrategy;
  static constexpr PackingStrategy NONE =
    HashedItem_PackingStrategy_NONE;
  static constexpr PackingStrategy NIBBLE =
    HashedItem_PackingStrategy_NIBBLE;
  static constexpr PackingStrategy BINARY =
    HashedItem_PackingStrategy_BINARY;
  static inline bool PackingStrategy_IsValid(int value) {
    return HashedItem_PackingStrategy_IsValid(value);
  }
  static constexpr PackingStrategy PackingStrategy_MIN =
    HashedItem_PackingStrategy_PackingStrategy_MIN;
  static constexpr PackingStrategy PackingStrategy_MAX =
    HashedItem_PackingStrategy_PackingStrategy_MAX;
  static constexpr int PackingStrategy_ARRAYSIZE =
    HashedItem_PackingStrategy_PackingStrategy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PackingStrategy_descriptor() {
    return HashedItem_PackingStrategy_descriptor();
  }
  template<typename T>
  static inline const std::string& PackingStrategy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PackingStrategy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PackingStrategy_Name.");
    return HashedItem_PackingStrategy_Name(enum_t_value);
  }
  static inline bool PackingStrategy_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PackingStrategy* value) {
    return HashedItem_PackingStrategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeprecatedTokenMembershipFieldNumber = 3,
    kDataIdStrFieldNumber = 1,
    kIndicatorVarsFieldNumber = 2,
    kRestrictFieldNumber = 4,
    kPackingStrategyFieldNumber = 5,
  };
  // repeated int64 deprecated_token_membership = 3;
  int deprecated_token_membership_size() const;
  private:
  int _internal_deprecated_token_membership_size() const;
  public:
  void clear_deprecated_token_membership();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deprecated_token_membership(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_deprecated_token_membership() const;
  void _internal_add_deprecated_token_membership(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_deprecated_token_membership();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 deprecated_token_membership(int index) const;
  void set_deprecated_token_membership(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_deprecated_token_membership(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      deprecated_token_membership() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_deprecated_token_membership();

  // optional bytes data_id_str = 1;
  bool has_data_id_str() const;
  private:
  bool _internal_has_data_id_str() const;
  public:
  void clear_data_id_str();
  const std::string& data_id_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_id_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_id_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_data_id_str();
  void set_allocated_data_id_str(std::string* data_id_str);
  private:
  const std::string& _internal_data_id_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_id_str(const std::string& value);
  std::string* _internal_mutable_data_id_str();
  public:

  // required bytes indicator_vars = 2;
  bool has_indicator_vars() const;
  private:
  bool _internal_has_indicator_vars() const;
  public:
  void clear_indicator_vars();
  const std::string& indicator_vars() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_indicator_vars(ArgT0&& arg0, ArgT... args);
  std::string* mutable_indicator_vars();
  PROTOBUF_MUST_USE_RESULT std::string* release_indicator_vars();
  void set_allocated_indicator_vars(std::string* indicator_vars);
  private:
  const std::string& _internal_indicator_vars() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_indicator_vars(const std::string& value);
  std::string* _internal_mutable_indicator_vars();
  public:

  // optional .research_scann.GenericFeatureVector.RestrictTokens restrict = 4;
  bool has_restrict() const;
  private:
  bool _internal_has_restrict() const;
  public:
  void clear_restrict();
  const ::research_scann::GenericFeatureVector_RestrictTokens& restrict() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::GenericFeatureVector_RestrictTokens* release_restrict();
  ::research_scann::GenericFeatureVector_RestrictTokens* mutable_restrict();
  void set_allocated_restrict(::research_scann::GenericFeatureVector_RestrictTokens* restrict);
  private:
  const ::research_scann::GenericFeatureVector_RestrictTokens& _internal_restrict() const;
  ::research_scann::GenericFeatureVector_RestrictTokens* _internal_mutable_restrict();
  public:
  void unsafe_arena_set_allocated_restrict(
      ::research_scann::GenericFeatureVector_RestrictTokens* restrict);
  ::research_scann::GenericFeatureVector_RestrictTokens* unsafe_arena_release_restrict();

  // optional .research_scann.HashedItem.PackingStrategy packing_strategy = 5 [default = BINARY];
  bool has_packing_strategy() const;
  private:
  bool _internal_has_packing_strategy() const;
  public:
  void clear_packing_strategy();
  ::research_scann::HashedItem_PackingStrategy packing_strategy() const;
  void set_packing_strategy(::research_scann::HashedItem_PackingStrategy value);
  private:
  ::research_scann::HashedItem_PackingStrategy _internal_packing_strategy() const;
  void _internal_set_packing_strategy(::research_scann::HashedItem_PackingStrategy value);
  public:

  // @@protoc_insertion_point(class_scope:research_scann.HashedItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > deprecated_token_membership_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_id_str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr indicator_vars_;
  ::research_scann::GenericFeatureVector_RestrictTokens* restrict_;
  int packing_strategy_;
  friend struct ::TableStruct_scann_2fproto_2fhashed_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HashedItem

// optional bytes data_id_str = 1;
inline bool HashedItem::_internal_has_data_id_str() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HashedItem::has_data_id_str() const {
  return _internal_has_data_id_str();
}
inline void HashedItem::clear_data_id_str() {
  data_id_str_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HashedItem::data_id_str() const {
  // @@protoc_insertion_point(field_get:research_scann.HashedItem.data_id_str)
  return _internal_data_id_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HashedItem::set_data_id_str(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_id_str_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.HashedItem.data_id_str)
}
inline std::string* HashedItem::mutable_data_id_str() {
  std::string* _s = _internal_mutable_data_id_str();
  // @@protoc_insertion_point(field_mutable:research_scann.HashedItem.data_id_str)
  return _s;
}
inline const std::string& HashedItem::_internal_data_id_str() const {
  return data_id_str_.Get();
}
inline void HashedItem::_internal_set_data_id_str(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_id_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HashedItem::_internal_mutable_data_id_str() {
  _has_bits_[0] |= 0x00000001u;
  return data_id_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HashedItem::release_data_id_str() {
  // @@protoc_insertion_point(field_release:research_scann.HashedItem.data_id_str)
  if (!_internal_has_data_id_str()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_id_str_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HashedItem::set_allocated_data_id_str(std::string* data_id_str) {
  if (data_id_str != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_id_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_id_str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:research_scann.HashedItem.data_id_str)
}

// required bytes indicator_vars = 2;
inline bool HashedItem::_internal_has_indicator_vars() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HashedItem::has_indicator_vars() const {
  return _internal_has_indicator_vars();
}
inline void HashedItem::clear_indicator_vars() {
  indicator_vars_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HashedItem::indicator_vars() const {
  // @@protoc_insertion_point(field_get:research_scann.HashedItem.indicator_vars)
  return _internal_indicator_vars();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HashedItem::set_indicator_vars(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 indicator_vars_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.HashedItem.indicator_vars)
}
inline std::string* HashedItem::mutable_indicator_vars() {
  std::string* _s = _internal_mutable_indicator_vars();
  // @@protoc_insertion_point(field_mutable:research_scann.HashedItem.indicator_vars)
  return _s;
}
inline const std::string& HashedItem::_internal_indicator_vars() const {
  return indicator_vars_.Get();
}
inline void HashedItem::_internal_set_indicator_vars(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  indicator_vars_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HashedItem::_internal_mutable_indicator_vars() {
  _has_bits_[0] |= 0x00000002u;
  return indicator_vars_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HashedItem::release_indicator_vars() {
  // @@protoc_insertion_point(field_release:research_scann.HashedItem.indicator_vars)
  if (!_internal_has_indicator_vars()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return indicator_vars_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HashedItem::set_allocated_indicator_vars(std::string* indicator_vars) {
  if (indicator_vars != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  indicator_vars_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), indicator_vars,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:research_scann.HashedItem.indicator_vars)
}

// optional .research_scann.GenericFeatureVector.RestrictTokens restrict = 4;
inline bool HashedItem::_internal_has_restrict() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || restrict_ != nullptr);
  return value;
}
inline bool HashedItem::has_restrict() const {
  return _internal_has_restrict();
}
inline const ::research_scann::GenericFeatureVector_RestrictTokens& HashedItem::_internal_restrict() const {
  const ::research_scann::GenericFeatureVector_RestrictTokens* p = restrict_;
  return p != nullptr ? *p : reinterpret_cast<const ::research_scann::GenericFeatureVector_RestrictTokens&>(
      ::research_scann::_GenericFeatureVector_RestrictTokens_default_instance_);
}
inline const ::research_scann::GenericFeatureVector_RestrictTokens& HashedItem::restrict() const {
  // @@protoc_insertion_point(field_get:research_scann.HashedItem.restrict)
  return _internal_restrict();
}
inline void HashedItem::unsafe_arena_set_allocated_restrict(
    ::research_scann::GenericFeatureVector_RestrictTokens* restrict) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restrict_);
  }
  restrict_ = restrict;
  if (restrict) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.HashedItem.restrict)
}
inline ::research_scann::GenericFeatureVector_RestrictTokens* HashedItem::release_restrict() {
  _has_bits_[0] &= ~0x00000004u;
  ::research_scann::GenericFeatureVector_RestrictTokens* temp = restrict_;
  restrict_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::research_scann::GenericFeatureVector_RestrictTokens* HashedItem::unsafe_arena_release_restrict() {
  // @@protoc_insertion_point(field_release:research_scann.HashedItem.restrict)
  _has_bits_[0] &= ~0x00000004u;
  ::research_scann::GenericFeatureVector_RestrictTokens* temp = restrict_;
  restrict_ = nullptr;
  return temp;
}
inline ::research_scann::GenericFeatureVector_RestrictTokens* HashedItem::_internal_mutable_restrict() {
  _has_bits_[0] |= 0x00000004u;
  if (restrict_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::GenericFeatureVector_RestrictTokens>(GetArenaForAllocation());
    restrict_ = p;
  }
  return restrict_;
}
inline ::research_scann::GenericFeatureVector_RestrictTokens* HashedItem::mutable_restrict() {
  ::research_scann::GenericFeatureVector_RestrictTokens* _msg = _internal_mutable_restrict();
  // @@protoc_insertion_point(field_mutable:research_scann.HashedItem.restrict)
  return _msg;
}
inline void HashedItem::set_allocated_restrict(::research_scann::GenericFeatureVector_RestrictTokens* restrict) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(restrict_);
  }
  if (restrict) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restrict));
    if (message_arena != submessage_arena) {
      restrict = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restrict, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  restrict_ = restrict;
  // @@protoc_insertion_point(field_set_allocated:research_scann.HashedItem.restrict)
}

// repeated int64 deprecated_token_membership = 3;
inline int HashedItem::_internal_deprecated_token_membership_size() const {
  return deprecated_token_membership_.size();
}
inline int HashedItem::deprecated_token_membership_size() const {
  return _internal_deprecated_token_membership_size();
}
inline void HashedItem::clear_deprecated_token_membership() {
  deprecated_token_membership_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HashedItem::_internal_deprecated_token_membership(int index) const {
  return deprecated_token_membership_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HashedItem::deprecated_token_membership(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.HashedItem.deprecated_token_membership)
  return _internal_deprecated_token_membership(index);
}
inline void HashedItem::set_deprecated_token_membership(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  deprecated_token_membership_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.HashedItem.deprecated_token_membership)
}
inline void HashedItem::_internal_add_deprecated_token_membership(::PROTOBUF_NAMESPACE_ID::int64 value) {
  deprecated_token_membership_.Add(value);
}
inline void HashedItem::add_deprecated_token_membership(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_deprecated_token_membership(value);
  // @@protoc_insertion_point(field_add:research_scann.HashedItem.deprecated_token_membership)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
HashedItem::_internal_deprecated_token_membership() const {
  return deprecated_token_membership_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
HashedItem::deprecated_token_membership() const {
  // @@protoc_insertion_point(field_list:research_scann.HashedItem.deprecated_token_membership)
  return _internal_deprecated_token_membership();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
HashedItem::_internal_mutable_deprecated_token_membership() {
  return &deprecated_token_membership_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
HashedItem::mutable_deprecated_token_membership() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.HashedItem.deprecated_token_membership)
  return _internal_mutable_deprecated_token_membership();
}

// optional .research_scann.HashedItem.PackingStrategy packing_strategy = 5 [default = BINARY];
inline bool HashedItem::_internal_has_packing_strategy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HashedItem::has_packing_strategy() const {
  return _internal_has_packing_strategy();
}
inline void HashedItem::clear_packing_strategy() {
  packing_strategy_ = 2;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::research_scann::HashedItem_PackingStrategy HashedItem::_internal_packing_strategy() const {
  return static_cast< ::research_scann::HashedItem_PackingStrategy >(packing_strategy_);
}
inline ::research_scann::HashedItem_PackingStrategy HashedItem::packing_strategy() const {
  // @@protoc_insertion_point(field_get:research_scann.HashedItem.packing_strategy)
  return _internal_packing_strategy();
}
inline void HashedItem::_internal_set_packing_strategy(::research_scann::HashedItem_PackingStrategy value) {
  assert(::research_scann::HashedItem_PackingStrategy_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  packing_strategy_ = value;
}
inline void HashedItem::set_packing_strategy(::research_scann::HashedItem_PackingStrategy value) {
  _internal_set_packing_strategy(value);
  // @@protoc_insertion_point(field_set:research_scann.HashedItem.packing_strategy)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::research_scann::HashedItem_PackingStrategy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::research_scann::HashedItem_PackingStrategy>() {
  return ::research_scann::HashedItem_PackingStrategy_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fhashed_2eproto
