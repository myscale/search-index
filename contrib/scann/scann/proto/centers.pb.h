// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/centers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fcenters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fcenters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "scann/data_format/features.pb.h"
#include "scann/proto/hash.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fcenters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fproto_2fcenters_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fcenters_2eproto;
namespace research_scann {
class CentersForAllSubspaces;
struct CentersForAllSubspacesDefaultTypeInternal;
extern CentersForAllSubspacesDefaultTypeInternal _CentersForAllSubspaces_default_instance_;
class CentersForSubspace;
struct CentersForSubspaceDefaultTypeInternal;
extern CentersForSubspaceDefaultTypeInternal _CentersForSubspace_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::CentersForAllSubspaces* Arena::CreateMaybeMessage<::research_scann::CentersForAllSubspaces>(Arena*);
template<> ::research_scann::CentersForSubspace* Arena::CreateMaybeMessage<::research_scann::CentersForSubspace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

// ===================================================================

class CentersForAllSubspaces final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.CentersForAllSubspaces) */ {
 public:
  inline CentersForAllSubspaces() : CentersForAllSubspaces(nullptr) {}
  ~CentersForAllSubspaces() override;
  explicit constexpr CentersForAllSubspaces(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CentersForAllSubspaces(const CentersForAllSubspaces& from);
  CentersForAllSubspaces(CentersForAllSubspaces&& from) noexcept
    : CentersForAllSubspaces() {
    *this = ::std::move(from);
  }

  inline CentersForAllSubspaces& operator=(const CentersForAllSubspaces& from) {
    CopyFrom(from);
    return *this;
  }
  inline CentersForAllSubspaces& operator=(CentersForAllSubspaces&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CentersForAllSubspaces& default_instance() {
    return *internal_default_instance();
  }
  static inline const CentersForAllSubspaces* internal_default_instance() {
    return reinterpret_cast<const CentersForAllSubspaces*>(
               &_CentersForAllSubspaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CentersForAllSubspaces& a, CentersForAllSubspaces& b) {
    a.Swap(&b);
  }
  inline void Swap(CentersForAllSubspaces* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CentersForAllSubspaces* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CentersForAllSubspaces* New() const final {
    return new CentersForAllSubspaces();
  }

  CentersForAllSubspaces* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CentersForAllSubspaces>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CentersForAllSubspaces& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CentersForAllSubspaces& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CentersForAllSubspaces* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.CentersForAllSubspaces";
  }
  protected:
  explicit CentersForAllSubspaces(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubspaceCentersFieldNumber = 1,
    kQuantizationSchemeFieldNumber = 2,
  };
  // repeated .research_scann.CentersForSubspace subspace_centers = 1;
  int subspace_centers_size() const;
  private:
  int _internal_subspace_centers_size() const;
  public:
  void clear_subspace_centers();
  ::research_scann::CentersForSubspace* mutable_subspace_centers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::CentersForSubspace >*
      mutable_subspace_centers();
  private:
  const ::research_scann::CentersForSubspace& _internal_subspace_centers(int index) const;
  ::research_scann::CentersForSubspace* _internal_add_subspace_centers();
  public:
  const ::research_scann::CentersForSubspace& subspace_centers(int index) const;
  ::research_scann::CentersForSubspace* add_subspace_centers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::CentersForSubspace >&
      subspace_centers() const;

  // optional .research_scann.AsymmetricHasherConfig.QuantizationScheme quantization_scheme = 2 [default = PRODUCT];
  bool has_quantization_scheme() const;
  private:
  bool _internal_has_quantization_scheme() const;
  public:
  void clear_quantization_scheme();
  ::research_scann::AsymmetricHasherConfig_QuantizationScheme quantization_scheme() const;
  void set_quantization_scheme(::research_scann::AsymmetricHasherConfig_QuantizationScheme value);
  private:
  ::research_scann::AsymmetricHasherConfig_QuantizationScheme _internal_quantization_scheme() const;
  void _internal_set_quantization_scheme(::research_scann::AsymmetricHasherConfig_QuantizationScheme value);
  public:

  // @@protoc_insertion_point(class_scope:research_scann.CentersForAllSubspaces)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::CentersForSubspace > subspace_centers_;
  int quantization_scheme_;
  friend struct ::TableStruct_scann_2fproto_2fcenters_2eproto;
};
// -------------------------------------------------------------------

class CentersForSubspace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.CentersForSubspace) */ {
 public:
  inline CentersForSubspace() : CentersForSubspace(nullptr) {}
  ~CentersForSubspace() override;
  explicit constexpr CentersForSubspace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CentersForSubspace(const CentersForSubspace& from);
  CentersForSubspace(CentersForSubspace&& from) noexcept
    : CentersForSubspace() {
    *this = ::std::move(from);
  }

  inline CentersForSubspace& operator=(const CentersForSubspace& from) {
    CopyFrom(from);
    return *this;
  }
  inline CentersForSubspace& operator=(CentersForSubspace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CentersForSubspace& default_instance() {
    return *internal_default_instance();
  }
  static inline const CentersForSubspace* internal_default_instance() {
    return reinterpret_cast<const CentersForSubspace*>(
               &_CentersForSubspace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CentersForSubspace& a, CentersForSubspace& b) {
    a.Swap(&b);
  }
  inline void Swap(CentersForSubspace* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CentersForSubspace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CentersForSubspace* New() const final {
    return new CentersForSubspace();
  }

  CentersForSubspace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CentersForSubspace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CentersForSubspace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CentersForSubspace& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CentersForSubspace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.CentersForSubspace";
  }
  protected:
  explicit CentersForSubspace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
  };
  // repeated .research_scann.GenericFeatureVector center = 1;
  int center_size() const;
  private:
  int _internal_center_size() const;
  public:
  void clear_center();
  ::research_scann::GenericFeatureVector* mutable_center(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::GenericFeatureVector >*
      mutable_center();
  private:
  const ::research_scann::GenericFeatureVector& _internal_center(int index) const;
  ::research_scann::GenericFeatureVector* _internal_add_center();
  public:
  const ::research_scann::GenericFeatureVector& center(int index) const;
  ::research_scann::GenericFeatureVector* add_center();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::GenericFeatureVector >&
      center() const;

  // @@protoc_insertion_point(class_scope:research_scann.CentersForSubspace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::GenericFeatureVector > center_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scann_2fproto_2fcenters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CentersForAllSubspaces

// repeated .research_scann.CentersForSubspace subspace_centers = 1;
inline int CentersForAllSubspaces::_internal_subspace_centers_size() const {
  return subspace_centers_.size();
}
inline int CentersForAllSubspaces::subspace_centers_size() const {
  return _internal_subspace_centers_size();
}
inline void CentersForAllSubspaces::clear_subspace_centers() {
  subspace_centers_.Clear();
}
inline ::research_scann::CentersForSubspace* CentersForAllSubspaces::mutable_subspace_centers(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.CentersForAllSubspaces.subspace_centers)
  return subspace_centers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::CentersForSubspace >*
CentersForAllSubspaces::mutable_subspace_centers() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.CentersForAllSubspaces.subspace_centers)
  return &subspace_centers_;
}
inline const ::research_scann::CentersForSubspace& CentersForAllSubspaces::_internal_subspace_centers(int index) const {
  return subspace_centers_.Get(index);
}
inline const ::research_scann::CentersForSubspace& CentersForAllSubspaces::subspace_centers(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.CentersForAllSubspaces.subspace_centers)
  return _internal_subspace_centers(index);
}
inline ::research_scann::CentersForSubspace* CentersForAllSubspaces::_internal_add_subspace_centers() {
  return subspace_centers_.Add();
}
inline ::research_scann::CentersForSubspace* CentersForAllSubspaces::add_subspace_centers() {
  ::research_scann::CentersForSubspace* _add = _internal_add_subspace_centers();
  // @@protoc_insertion_point(field_add:research_scann.CentersForAllSubspaces.subspace_centers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::CentersForSubspace >&
CentersForAllSubspaces::subspace_centers() const {
  // @@protoc_insertion_point(field_list:research_scann.CentersForAllSubspaces.subspace_centers)
  return subspace_centers_;
}

// optional .research_scann.AsymmetricHasherConfig.QuantizationScheme quantization_scheme = 2 [default = PRODUCT];
inline bool CentersForAllSubspaces::_internal_has_quantization_scheme() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CentersForAllSubspaces::has_quantization_scheme() const {
  return _internal_has_quantization_scheme();
}
inline void CentersForAllSubspaces::clear_quantization_scheme() {
  quantization_scheme_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::research_scann::AsymmetricHasherConfig_QuantizationScheme CentersForAllSubspaces::_internal_quantization_scheme() const {
  return static_cast< ::research_scann::AsymmetricHasherConfig_QuantizationScheme >(quantization_scheme_);
}
inline ::research_scann::AsymmetricHasherConfig_QuantizationScheme CentersForAllSubspaces::quantization_scheme() const {
  // @@protoc_insertion_point(field_get:research_scann.CentersForAllSubspaces.quantization_scheme)
  return _internal_quantization_scheme();
}
inline void CentersForAllSubspaces::_internal_set_quantization_scheme(::research_scann::AsymmetricHasherConfig_QuantizationScheme value) {
  assert(::research_scann::AsymmetricHasherConfig_QuantizationScheme_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  quantization_scheme_ = value;
}
inline void CentersForAllSubspaces::set_quantization_scheme(::research_scann::AsymmetricHasherConfig_QuantizationScheme value) {
  _internal_set_quantization_scheme(value);
  // @@protoc_insertion_point(field_set:research_scann.CentersForAllSubspaces.quantization_scheme)
}

// -------------------------------------------------------------------

// CentersForSubspace

// repeated .research_scann.GenericFeatureVector center = 1;
inline int CentersForSubspace::_internal_center_size() const {
  return center_.size();
}
inline int CentersForSubspace::center_size() const {
  return _internal_center_size();
}
inline ::research_scann::GenericFeatureVector* CentersForSubspace::mutable_center(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.CentersForSubspace.center)
  return center_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::GenericFeatureVector >*
CentersForSubspace::mutable_center() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.CentersForSubspace.center)
  return &center_;
}
inline const ::research_scann::GenericFeatureVector& CentersForSubspace::_internal_center(int index) const {
  return center_.Get(index);
}
inline const ::research_scann::GenericFeatureVector& CentersForSubspace::center(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.CentersForSubspace.center)
  return _internal_center(index);
}
inline ::research_scann::GenericFeatureVector* CentersForSubspace::_internal_add_center() {
  return center_.Add();
}
inline ::research_scann::GenericFeatureVector* CentersForSubspace::add_center() {
  ::research_scann::GenericFeatureVector* _add = _internal_add_center();
  // @@protoc_insertion_point(field_add:research_scann.CentersForSubspace.center)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::GenericFeatureVector >&
CentersForSubspace::center() const {
  // @@protoc_insertion_point(field_list:research_scann.CentersForSubspace.center)
  return center_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fcenters_2eproto
