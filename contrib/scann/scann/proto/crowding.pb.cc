// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/crowding.proto

#include "scann/proto/crowding.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace research_scann {
constexpr Crowding_Offline::Crowding_Offline(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : per_crowding_attribute_pre_reordering_num_neighbors_(2147483647)
  , per_crowding_attribute_post_reordering_num_neighbors_(2147483647){}
struct Crowding_OfflineDefaultTypeInternal {
  constexpr Crowding_OfflineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Crowding_OfflineDefaultTypeInternal() {}
  union {
    Crowding_Offline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Crowding_OfflineDefaultTypeInternal _Crowding_Offline_default_instance_;
constexpr Crowding::Crowding(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offline_(nullptr)
  , enabled_(false){}
struct CrowdingDefaultTypeInternal {
  constexpr CrowdingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CrowdingDefaultTypeInternal() {}
  union {
    Crowding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CrowdingDefaultTypeInternal _Crowding_default_instance_;
}  // namespace research_scann
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2fcrowding_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scann_2fproto_2fcrowding_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2fcrowding_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2fcrowding_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::Crowding_Offline, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::Crowding_Offline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::Crowding_Offline, per_crowding_attribute_pre_reordering_num_neighbors_),
  PROTOBUF_FIELD_OFFSET(::research_scann::Crowding_Offline, per_crowding_attribute_post_reordering_num_neighbors_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::research_scann::Crowding, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::Crowding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::Crowding, enabled_),
  PROTOBUF_FIELD_OFFSET(::research_scann::Crowding, offline_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::research_scann::Crowding_Offline)},
  { 9, 16, sizeof(::research_scann::Crowding)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_Crowding_Offline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_Crowding_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2fcrowding_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032scann/proto/crowding.proto\022\016research_s"
  "cann\"\364\001\n\010Crowding\022\026\n\007enabled\030\001 \001(\010:\005fals"
  "e\0221\n\007offline\030\002 \001(\0132 .research_scann.Crow"
  "ding.Offline\032\234\001\n\007Offline\022G\n3per_crowding"
  "_attribute_pre_reordering_num_neighbors\030"
  "\001 \001(\005:\n2147483647\022H\n4per_crowding_attrib"
  "ute_post_reordering_num_neighbors\030\002 \001(\005:"
  "\n2147483647"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2fcrowding_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fcrowding_2eproto = {
  false, false, 291, descriptor_table_protodef_scann_2fproto_2fcrowding_2eproto, "scann/proto/crowding.proto", 
  &descriptor_table_scann_2fproto_2fcrowding_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_scann_2fproto_2fcrowding_2eproto::offsets,
  file_level_metadata_scann_2fproto_2fcrowding_2eproto, file_level_enum_descriptors_scann_2fproto_2fcrowding_2eproto, file_level_service_descriptors_scann_2fproto_2fcrowding_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_scann_2fproto_2fcrowding_2eproto_getter() {
  return &descriptor_table_scann_2fproto_2fcrowding_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_scann_2fproto_2fcrowding_2eproto(&descriptor_table_scann_2fproto_2fcrowding_2eproto);
namespace research_scann {

// ===================================================================

class Crowding_Offline::_Internal {
 public:
  using HasBits = decltype(std::declval<Crowding_Offline>()._has_bits_);
  static void set_has_per_crowding_attribute_pre_reordering_num_neighbors(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_per_crowding_attribute_post_reordering_num_neighbors(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Crowding_Offline::Crowding_Offline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.Crowding.Offline)
}
Crowding_Offline::Crowding_Offline(const Crowding_Offline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&per_crowding_attribute_pre_reordering_num_neighbors_, &from.per_crowding_attribute_pre_reordering_num_neighbors_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_crowding_attribute_post_reordering_num_neighbors_) -
    reinterpret_cast<char*>(&per_crowding_attribute_pre_reordering_num_neighbors_)) + sizeof(per_crowding_attribute_post_reordering_num_neighbors_));
  // @@protoc_insertion_point(copy_constructor:research_scann.Crowding.Offline)
}

inline void Crowding_Offline::SharedCtor() {
per_crowding_attribute_pre_reordering_num_neighbors_ = 2147483647;
per_crowding_attribute_post_reordering_num_neighbors_ = 2147483647;
}

Crowding_Offline::~Crowding_Offline() {
  // @@protoc_insertion_point(destructor:research_scann.Crowding.Offline)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Crowding_Offline::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Crowding_Offline::ArenaDtor(void* object) {
  Crowding_Offline* _this = reinterpret_cast< Crowding_Offline* >(object);
  (void)_this;
}
void Crowding_Offline::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Crowding_Offline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Crowding_Offline::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.Crowding.Offline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    per_crowding_attribute_pre_reordering_num_neighbors_ = 2147483647;
    per_crowding_attribute_post_reordering_num_neighbors_ = 2147483647;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Crowding_Offline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 per_crowding_attribute_pre_reordering_num_neighbors = 1 [default = 2147483647];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_per_crowding_attribute_pre_reordering_num_neighbors(&has_bits);
          per_crowding_attribute_pre_reordering_num_neighbors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 per_crowding_attribute_post_reordering_num_neighbors = 2 [default = 2147483647];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_per_crowding_attribute_post_reordering_num_neighbors(&has_bits);
          per_crowding_attribute_post_reordering_num_neighbors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Crowding_Offline::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.Crowding.Offline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 per_crowding_attribute_pre_reordering_num_neighbors = 1 [default = 2147483647];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_per_crowding_attribute_pre_reordering_num_neighbors(), target);
  }

  // optional int32 per_crowding_attribute_post_reordering_num_neighbors = 2 [default = 2147483647];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_per_crowding_attribute_post_reordering_num_neighbors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.Crowding.Offline)
  return target;
}

size_t Crowding_Offline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.Crowding.Offline)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 per_crowding_attribute_pre_reordering_num_neighbors = 1 [default = 2147483647];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_per_crowding_attribute_pre_reordering_num_neighbors());
    }

    // optional int32 per_crowding_attribute_post_reordering_num_neighbors = 2 [default = 2147483647];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_per_crowding_attribute_post_reordering_num_neighbors());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Crowding_Offline::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Crowding_Offline::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Crowding_Offline::GetClassData() const { return &_class_data_; }

void Crowding_Offline::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Crowding_Offline *>(to)->MergeFrom(
      static_cast<const Crowding_Offline &>(from));
}


void Crowding_Offline::MergeFrom(const Crowding_Offline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.Crowding.Offline)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      per_crowding_attribute_pre_reordering_num_neighbors_ = from.per_crowding_attribute_pre_reordering_num_neighbors_;
    }
    if (cached_has_bits & 0x00000002u) {
      per_crowding_attribute_post_reordering_num_neighbors_ = from.per_crowding_attribute_post_reordering_num_neighbors_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Crowding_Offline::CopyFrom(const Crowding_Offline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.Crowding.Offline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crowding_Offline::IsInitialized() const {
  return true;
}

void Crowding_Offline::InternalSwap(Crowding_Offline* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(per_crowding_attribute_pre_reordering_num_neighbors_, other->per_crowding_attribute_pre_reordering_num_neighbors_);
  swap(per_crowding_attribute_post_reordering_num_neighbors_, other->per_crowding_attribute_post_reordering_num_neighbors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Crowding_Offline::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2fproto_2fcrowding_2eproto_getter, &descriptor_table_scann_2fproto_2fcrowding_2eproto_once,
      file_level_metadata_scann_2fproto_2fcrowding_2eproto[0]);
}

// ===================================================================

class Crowding::_Internal {
 public:
  using HasBits = decltype(std::declval<Crowding>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::research_scann::Crowding_Offline& offline(const Crowding* msg);
  static void set_has_offline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::research_scann::Crowding_Offline&
Crowding::_Internal::offline(const Crowding* msg) {
  return *msg->offline_;
}
Crowding::Crowding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.Crowding)
}
Crowding::Crowding(const Crowding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offline()) {
    offline_ = new ::research_scann::Crowding_Offline(*from.offline_);
  } else {
    offline_ = nullptr;
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:research_scann.Crowding)
}

inline void Crowding::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offline_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&offline_)) + sizeof(enabled_));
}

Crowding::~Crowding() {
  // @@protoc_insertion_point(destructor:research_scann.Crowding)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Crowding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete offline_;
}

void Crowding::ArenaDtor(void* object) {
  Crowding* _this = reinterpret_cast< Crowding* >(object);
  (void)_this;
}
void Crowding::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Crowding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Crowding::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.Crowding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(offline_ != nullptr);
    offline_->Clear();
  }
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Crowding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.Crowding.Offline offline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_offline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Crowding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.Crowding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional .research_scann.Crowding.Offline offline = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::offline(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.Crowding)
  return target;
}

size_t Crowding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.Crowding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .research_scann.Crowding.Offline offline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *offline_);
    }

    // optional bool enabled = 1 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Crowding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Crowding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Crowding::GetClassData() const { return &_class_data_; }

void Crowding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Crowding *>(to)->MergeFrom(
      static_cast<const Crowding &>(from));
}


void Crowding::MergeFrom(const Crowding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.Crowding)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_offline()->::research_scann::Crowding_Offline::MergeFrom(from._internal_offline());
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Crowding::CopyFrom(const Crowding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.Crowding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crowding::IsInitialized() const {
  return true;
}

void Crowding::InternalSwap(Crowding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Crowding, enabled_)
      + sizeof(Crowding::enabled_)
      - PROTOBUF_FIELD_OFFSET(Crowding, offline_)>(
          reinterpret_cast<char*>(&offline_),
          reinterpret_cast<char*>(&other->offline_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Crowding::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2fproto_2fcrowding_2eproto_getter, &descriptor_table_scann_2fproto_2fcrowding_2eproto_once,
      file_level_metadata_scann_2fproto_2fcrowding_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::Crowding_Offline* Arena::CreateMaybeMessage< ::research_scann::Crowding_Offline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::Crowding_Offline >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::Crowding* Arena::CreateMaybeMessage< ::research_scann::Crowding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::Crowding >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
