// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "scann/proto/distance_measure.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fproto_2fmetadata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fmetadata_2eproto;
namespace research_scann {
class ClassLabelMetadataConfig;
struct ClassLabelMetadataConfigDefaultTypeInternal;
extern ClassLabelMetadataConfigDefaultTypeInternal _ClassLabelMetadataConfig_default_instance_;
class DatabaseVectorMetadataConfig;
struct DatabaseVectorMetadataConfigDefaultTypeInternal;
extern DatabaseVectorMetadataConfigDefaultTypeInternal _DatabaseVectorMetadataConfig_default_instance_;
class MetadataConfig;
struct MetadataConfigDefaultTypeInternal;
extern MetadataConfigDefaultTypeInternal _MetadataConfig_default_instance_;
class SparseIntersectionConfig;
struct SparseIntersectionConfigDefaultTypeInternal;
extern SparseIntersectionConfigDefaultTypeInternal _SparseIntersectionConfig_default_instance_;
class SparseIntersectionResult;
struct SparseIntersectionResultDefaultTypeInternal;
extern SparseIntersectionResultDefaultTypeInternal _SparseIntersectionResult_default_instance_;
class UserInfoMetadataConfig;
struct UserInfoMetadataConfigDefaultTypeInternal;
extern UserInfoMetadataConfigDefaultTypeInternal _UserInfoMetadataConfig_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::ClassLabelMetadataConfig* Arena::CreateMaybeMessage<::research_scann::ClassLabelMetadataConfig>(Arena*);
template<> ::research_scann::DatabaseVectorMetadataConfig* Arena::CreateMaybeMessage<::research_scann::DatabaseVectorMetadataConfig>(Arena*);
template<> ::research_scann::MetadataConfig* Arena::CreateMaybeMessage<::research_scann::MetadataConfig>(Arena*);
template<> ::research_scann::SparseIntersectionConfig* Arena::CreateMaybeMessage<::research_scann::SparseIntersectionConfig>(Arena*);
template<> ::research_scann::SparseIntersectionResult* Arena::CreateMaybeMessage<::research_scann::SparseIntersectionResult>(Arena*);
template<> ::research_scann::UserInfoMetadataConfig* Arena::CreateMaybeMessage<::research_scann::UserInfoMetadataConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

// ===================================================================

class MetadataConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.MetadataConfig) */ {
 public:
  inline MetadataConfig() : MetadataConfig(nullptr) {}
  ~MetadataConfig() override;
  explicit constexpr MetadataConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetadataConfig(const MetadataConfig& from);
  MetadataConfig(MetadataConfig&& from) noexcept
    : MetadataConfig() {
    *this = ::std::move(from);
  }

  inline MetadataConfig& operator=(const MetadataConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataConfig& operator=(MetadataConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetadataConfig& default_instance() {
    return *internal_default_instance();
  }
  enum MetadataTypeCase {
    kSparseIntersection = 1,
    kExactDistance = 2,
    kUserinfo = 3,
    kClassLabel = 6,
    kDatabaseVector = 5,
    kCustomMetadata = 4,
    METADATA_TYPE_NOT_SET = 0,
  };

  static inline const MetadataConfig* internal_default_instance() {
    return reinterpret_cast<const MetadataConfig*>(
               &_MetadataConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetadataConfig& a, MetadataConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetadataConfig* New() const final {
    return new MetadataConfig();
  }

  MetadataConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetadataConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetadataConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MetadataConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.MetadataConfig";
  }
  protected:
  explicit MetadataConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSparseIntersectionFieldNumber = 1,
    kExactDistanceFieldNumber = 2,
    kUserinfoFieldNumber = 3,
    kClassLabelFieldNumber = 6,
    kDatabaseVectorFieldNumber = 5,
    kCustomMetadataFieldNumber = 4,
  };
  // .research_scann.SparseIntersectionConfig sparse_intersection = 1;
  bool has_sparse_intersection() const;
  private:
  bool _internal_has_sparse_intersection() const;
  public:
  void clear_sparse_intersection();
  const ::research_scann::SparseIntersectionConfig& sparse_intersection() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::SparseIntersectionConfig* release_sparse_intersection();
  ::research_scann::SparseIntersectionConfig* mutable_sparse_intersection();
  void set_allocated_sparse_intersection(::research_scann::SparseIntersectionConfig* sparse_intersection);
  private:
  const ::research_scann::SparseIntersectionConfig& _internal_sparse_intersection() const;
  ::research_scann::SparseIntersectionConfig* _internal_mutable_sparse_intersection();
  public:
  void unsafe_arena_set_allocated_sparse_intersection(
      ::research_scann::SparseIntersectionConfig* sparse_intersection);
  ::research_scann::SparseIntersectionConfig* unsafe_arena_release_sparse_intersection();

  // .research_scann.DistanceMeasureConfig exact_distance = 2;
  bool has_exact_distance() const;
  private:
  bool _internal_has_exact_distance() const;
  public:
  void clear_exact_distance();
  const ::research_scann::DistanceMeasureConfig& exact_distance() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::DistanceMeasureConfig* release_exact_distance();
  ::research_scann::DistanceMeasureConfig* mutable_exact_distance();
  void set_allocated_exact_distance(::research_scann::DistanceMeasureConfig* exact_distance);
  private:
  const ::research_scann::DistanceMeasureConfig& _internal_exact_distance() const;
  ::research_scann::DistanceMeasureConfig* _internal_mutable_exact_distance();
  public:
  void unsafe_arena_set_allocated_exact_distance(
      ::research_scann::DistanceMeasureConfig* exact_distance);
  ::research_scann::DistanceMeasureConfig* unsafe_arena_release_exact_distance();

  // .research_scann.UserInfoMetadataConfig userinfo = 3;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::research_scann::UserInfoMetadataConfig& userinfo() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::UserInfoMetadataConfig* release_userinfo();
  ::research_scann::UserInfoMetadataConfig* mutable_userinfo();
  void set_allocated_userinfo(::research_scann::UserInfoMetadataConfig* userinfo);
  private:
  const ::research_scann::UserInfoMetadataConfig& _internal_userinfo() const;
  ::research_scann::UserInfoMetadataConfig* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::research_scann::UserInfoMetadataConfig* userinfo);
  ::research_scann::UserInfoMetadataConfig* unsafe_arena_release_userinfo();

  // .research_scann.ClassLabelMetadataConfig class_label = 6;
  bool has_class_label() const;
  private:
  bool _internal_has_class_label() const;
  public:
  void clear_class_label();
  const ::research_scann::ClassLabelMetadataConfig& class_label() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::ClassLabelMetadataConfig* release_class_label();
  ::research_scann::ClassLabelMetadataConfig* mutable_class_label();
  void set_allocated_class_label(::research_scann::ClassLabelMetadataConfig* class_label);
  private:
  const ::research_scann::ClassLabelMetadataConfig& _internal_class_label() const;
  ::research_scann::ClassLabelMetadataConfig* _internal_mutable_class_label();
  public:
  void unsafe_arena_set_allocated_class_label(
      ::research_scann::ClassLabelMetadataConfig* class_label);
  ::research_scann::ClassLabelMetadataConfig* unsafe_arena_release_class_label();

  // .research_scann.DatabaseVectorMetadataConfig database_vector = 5;
  bool has_database_vector() const;
  private:
  bool _internal_has_database_vector() const;
  public:
  void clear_database_vector();
  const ::research_scann::DatabaseVectorMetadataConfig& database_vector() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::DatabaseVectorMetadataConfig* release_database_vector();
  ::research_scann::DatabaseVectorMetadataConfig* mutable_database_vector();
  void set_allocated_database_vector(::research_scann::DatabaseVectorMetadataConfig* database_vector);
  private:
  const ::research_scann::DatabaseVectorMetadataConfig& _internal_database_vector() const;
  ::research_scann::DatabaseVectorMetadataConfig* _internal_mutable_database_vector();
  public:
  void unsafe_arena_set_allocated_database_vector(
      ::research_scann::DatabaseVectorMetadataConfig* database_vector);
  ::research_scann::DatabaseVectorMetadataConfig* unsafe_arena_release_database_vector();

  // bytes custom_metadata = 4;
  bool has_custom_metadata() const;
  private:
  bool _internal_has_custom_metadata() const;
  public:
  void clear_custom_metadata();
  const std::string& custom_metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_metadata();
  PROTOBUF_MUST_USE_RESULT std::string* release_custom_metadata();
  void set_allocated_custom_metadata(std::string* custom_metadata);
  private:
  const std::string& _internal_custom_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_metadata(const std::string& value);
  std::string* _internal_mutable_custom_metadata();
  public:

  void clear_metadata_type();
  MetadataTypeCase metadata_type_case() const;
  // @@protoc_insertion_point(class_scope:research_scann.MetadataConfig)
 private:
  class _Internal;
  void set_has_sparse_intersection();
  void set_has_exact_distance();
  void set_has_userinfo();
  void set_has_class_label();
  void set_has_database_vector();
  void set_has_custom_metadata();

  inline bool has_metadata_type() const;
  inline void clear_has_metadata_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MetadataTypeUnion {
    constexpr MetadataTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::research_scann::SparseIntersectionConfig* sparse_intersection_;
    ::research_scann::DistanceMeasureConfig* exact_distance_;
    ::research_scann::UserInfoMetadataConfig* userinfo_;
    ::research_scann::ClassLabelMetadataConfig* class_label_;
    ::research_scann::DatabaseVectorMetadataConfig* database_vector_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_metadata_;
  } metadata_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_scann_2fproto_2fmetadata_2eproto;
};
// -------------------------------------------------------------------

class SparseIntersectionConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.SparseIntersectionConfig) */ {
 public:
  inline SparseIntersectionConfig() : SparseIntersectionConfig(nullptr) {}
  ~SparseIntersectionConfig() override;
  explicit constexpr SparseIntersectionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseIntersectionConfig(const SparseIntersectionConfig& from);
  SparseIntersectionConfig(SparseIntersectionConfig&& from) noexcept
    : SparseIntersectionConfig() {
    *this = ::std::move(from);
  }

  inline SparseIntersectionConfig& operator=(const SparseIntersectionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseIntersectionConfig& operator=(SparseIntersectionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseIntersectionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseIntersectionConfig* internal_default_instance() {
    return reinterpret_cast<const SparseIntersectionConfig*>(
               &_SparseIntersectionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SparseIntersectionConfig& a, SparseIntersectionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseIntersectionConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseIntersectionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseIntersectionConfig* New() const final {
    return new SparseIntersectionConfig();
  }

  SparseIntersectionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseIntersectionConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SparseIntersectionConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SparseIntersectionConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseIntersectionConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.SparseIntersectionConfig";
  }
  protected:
  explicit SparseIntersectionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxToReturnFieldNumber = 1,
  };
  // optional uint32 max_to_return = 1 [default = 4294967295];
  bool has_max_to_return() const;
  private:
  bool _internal_has_max_to_return() const;
  public:
  void clear_max_to_return();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_to_return() const;
  void set_max_to_return(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_to_return() const;
  void _internal_set_max_to_return(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:research_scann.SparseIntersectionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_to_return_;
  friend struct ::TableStruct_scann_2fproto_2fmetadata_2eproto;
};
// -------------------------------------------------------------------

class SparseIntersectionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.SparseIntersectionResult) */ {
 public:
  inline SparseIntersectionResult() : SparseIntersectionResult(nullptr) {}
  ~SparseIntersectionResult() override;
  explicit constexpr SparseIntersectionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseIntersectionResult(const SparseIntersectionResult& from);
  SparseIntersectionResult(SparseIntersectionResult&& from) noexcept
    : SparseIntersectionResult() {
    *this = ::std::move(from);
  }

  inline SparseIntersectionResult& operator=(const SparseIntersectionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseIntersectionResult& operator=(SparseIntersectionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseIntersectionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseIntersectionResult* internal_default_instance() {
    return reinterpret_cast<const SparseIntersectionResult*>(
               &_SparseIntersectionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SparseIntersectionResult& a, SparseIntersectionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseIntersectionResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseIntersectionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseIntersectionResult* New() const final {
    return new SparseIntersectionResult();
  }

  SparseIntersectionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseIntersectionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SparseIntersectionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SparseIntersectionResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseIntersectionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.SparseIntersectionResult";
  }
  protected:
  explicit SparseIntersectionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntersectingDimensionFieldNumber = 1,
    kValueFieldNumber = 2,
    kNumIntersectingDimensionsFieldNumber = 3,
  };
  // repeated uint64 intersecting_dimension = 1;
  int intersecting_dimension_size() const;
  private:
  int _internal_intersecting_dimension_size() const;
  public:
  void clear_intersecting_dimension();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_intersecting_dimension(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_intersecting_dimension() const;
  void _internal_add_intersecting_dimension(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_intersecting_dimension();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 intersecting_dimension(int index) const;
  void set_intersecting_dimension(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_intersecting_dimension(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      intersecting_dimension() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_intersecting_dimension();

  // repeated double value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // optional uint32 num_intersecting_dimensions = 3;
  bool has_num_intersecting_dimensions() const;
  private:
  bool _internal_has_num_intersecting_dimensions() const;
  public:
  void clear_num_intersecting_dimensions();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_intersecting_dimensions() const;
  void set_num_intersecting_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_intersecting_dimensions() const;
  void _internal_set_num_intersecting_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:research_scann.SparseIntersectionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > intersecting_dimension_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_intersecting_dimensions_;
  friend struct ::TableStruct_scann_2fproto_2fmetadata_2eproto;
};
// -------------------------------------------------------------------

class UserInfoMetadataConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.UserInfoMetadataConfig) */ {
 public:
  inline UserInfoMetadataConfig() : UserInfoMetadataConfig(nullptr) {}
  ~UserInfoMetadataConfig() override;
  explicit constexpr UserInfoMetadataConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoMetadataConfig(const UserInfoMetadataConfig& from);
  UserInfoMetadataConfig(UserInfoMetadataConfig&& from) noexcept
    : UserInfoMetadataConfig() {
    *this = ::std::move(from);
  }

  inline UserInfoMetadataConfig& operator=(const UserInfoMetadataConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoMetadataConfig& operator=(UserInfoMetadataConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfoMetadataConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoMetadataConfig* internal_default_instance() {
    return reinterpret_cast<const UserInfoMetadataConfig*>(
               &_UserInfoMetadataConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserInfoMetadataConfig& a, UserInfoMetadataConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoMetadataConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoMetadataConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfoMetadataConfig* New() const final {
    return new UserInfoMetadataConfig();
  }

  UserInfoMetadataConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoMetadataConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfoMetadataConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserInfoMetadataConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoMetadataConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.UserInfoMetadataConfig";
  }
  protected:
  explicit UserInfoMetadataConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetUserInfoForQueryFieldNumber = 1,
    kSetUserInfoForNeighborFieldNumber = 2,
  };
  // optional bool set_user_info_for_query = 1 [default = false];
  bool has_set_user_info_for_query() const;
  private:
  bool _internal_has_set_user_info_for_query() const;
  public:
  void clear_set_user_info_for_query();
  bool set_user_info_for_query() const;
  void set_set_user_info_for_query(bool value);
  private:
  bool _internal_set_user_info_for_query() const;
  void _internal_set_set_user_info_for_query(bool value);
  public:

  // optional bool set_user_info_for_neighbor = 2 [default = true];
  bool has_set_user_info_for_neighbor() const;
  private:
  bool _internal_has_set_user_info_for_neighbor() const;
  public:
  void clear_set_user_info_for_neighbor();
  bool set_user_info_for_neighbor() const;
  void set_set_user_info_for_neighbor(bool value);
  private:
  bool _internal_set_user_info_for_neighbor() const;
  void _internal_set_set_user_info_for_neighbor(bool value);
  public:

  // @@protoc_insertion_point(class_scope:research_scann.UserInfoMetadataConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool set_user_info_for_query_;
  bool set_user_info_for_neighbor_;
  friend struct ::TableStruct_scann_2fproto_2fmetadata_2eproto;
};
// -------------------------------------------------------------------

class ClassLabelMetadataConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.ClassLabelMetadataConfig) */ {
 public:
  inline ClassLabelMetadataConfig() : ClassLabelMetadataConfig(nullptr) {}
  ~ClassLabelMetadataConfig() override;
  explicit constexpr ClassLabelMetadataConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClassLabelMetadataConfig(const ClassLabelMetadataConfig& from);
  ClassLabelMetadataConfig(ClassLabelMetadataConfig&& from) noexcept
    : ClassLabelMetadataConfig() {
    *this = ::std::move(from);
  }

  inline ClassLabelMetadataConfig& operator=(const ClassLabelMetadataConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassLabelMetadataConfig& operator=(ClassLabelMetadataConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassLabelMetadataConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassLabelMetadataConfig* internal_default_instance() {
    return reinterpret_cast<const ClassLabelMetadataConfig*>(
               &_ClassLabelMetadataConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClassLabelMetadataConfig& a, ClassLabelMetadataConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassLabelMetadataConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassLabelMetadataConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassLabelMetadataConfig* New() const final {
    return new ClassLabelMetadataConfig();
  }

  ClassLabelMetadataConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassLabelMetadataConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClassLabelMetadataConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClassLabelMetadataConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassLabelMetadataConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.ClassLabelMetadataConfig";
  }
  protected:
  explicit ClassLabelMetadataConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:research_scann.ClassLabelMetadataConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scann_2fproto_2fmetadata_2eproto;
};
// -------------------------------------------------------------------

class DatabaseVectorMetadataConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.DatabaseVectorMetadataConfig) */ {
 public:
  inline DatabaseVectorMetadataConfig() : DatabaseVectorMetadataConfig(nullptr) {}
  ~DatabaseVectorMetadataConfig() override;
  explicit constexpr DatabaseVectorMetadataConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DatabaseVectorMetadataConfig(const DatabaseVectorMetadataConfig& from);
  DatabaseVectorMetadataConfig(DatabaseVectorMetadataConfig&& from) noexcept
    : DatabaseVectorMetadataConfig() {
    *this = ::std::move(from);
  }

  inline DatabaseVectorMetadataConfig& operator=(const DatabaseVectorMetadataConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseVectorMetadataConfig& operator=(DatabaseVectorMetadataConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DatabaseVectorMetadataConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DatabaseVectorMetadataConfig* internal_default_instance() {
    return reinterpret_cast<const DatabaseVectorMetadataConfig*>(
               &_DatabaseVectorMetadataConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DatabaseVectorMetadataConfig& a, DatabaseVectorMetadataConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DatabaseVectorMetadataConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatabaseVectorMetadataConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatabaseVectorMetadataConfig* New() const final {
    return new DatabaseVectorMetadataConfig();
  }

  DatabaseVectorMetadataConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatabaseVectorMetadataConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DatabaseVectorMetadataConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DatabaseVectorMetadataConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatabaseVectorMetadataConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.DatabaseVectorMetadataConfig";
  }
  protected:
  explicit DatabaseVectorMetadataConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnDatabaseVectorFieldNumber = 1,
  };
  // optional bool return_database_vector = 1 [default = false];
  bool has_return_database_vector() const;
  private:
  bool _internal_has_return_database_vector() const;
  public:
  void clear_return_database_vector();
  bool return_database_vector() const;
  void set_return_database_vector(bool value);
  private:
  bool _internal_return_database_vector() const;
  void _internal_set_return_database_vector(bool value);
  public:

  // @@protoc_insertion_point(class_scope:research_scann.DatabaseVectorMetadataConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool return_database_vector_;
  friend struct ::TableStruct_scann_2fproto_2fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetadataConfig

// .research_scann.SparseIntersectionConfig sparse_intersection = 1;
inline bool MetadataConfig::_internal_has_sparse_intersection() const {
  return metadata_type_case() == kSparseIntersection;
}
inline bool MetadataConfig::has_sparse_intersection() const {
  return _internal_has_sparse_intersection();
}
inline void MetadataConfig::set_has_sparse_intersection() {
  _oneof_case_[0] = kSparseIntersection;
}
inline void MetadataConfig::clear_sparse_intersection() {
  if (_internal_has_sparse_intersection()) {
    if (GetArenaForAllocation() == nullptr) {
      delete metadata_type_.sparse_intersection_;
    }
    clear_has_metadata_type();
  }
}
inline ::research_scann::SparseIntersectionConfig* MetadataConfig::release_sparse_intersection() {
  // @@protoc_insertion_point(field_release:research_scann.MetadataConfig.sparse_intersection)
  if (_internal_has_sparse_intersection()) {
    clear_has_metadata_type();
      ::research_scann::SparseIntersectionConfig* temp = metadata_type_.sparse_intersection_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    metadata_type_.sparse_intersection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::research_scann::SparseIntersectionConfig& MetadataConfig::_internal_sparse_intersection() const {
  return _internal_has_sparse_intersection()
      ? *metadata_type_.sparse_intersection_
      : reinterpret_cast< ::research_scann::SparseIntersectionConfig&>(::research_scann::_SparseIntersectionConfig_default_instance_);
}
inline const ::research_scann::SparseIntersectionConfig& MetadataConfig::sparse_intersection() const {
  // @@protoc_insertion_point(field_get:research_scann.MetadataConfig.sparse_intersection)
  return _internal_sparse_intersection();
}
inline ::research_scann::SparseIntersectionConfig* MetadataConfig::unsafe_arena_release_sparse_intersection() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.MetadataConfig.sparse_intersection)
  if (_internal_has_sparse_intersection()) {
    clear_has_metadata_type();
    ::research_scann::SparseIntersectionConfig* temp = metadata_type_.sparse_intersection_;
    metadata_type_.sparse_intersection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MetadataConfig::unsafe_arena_set_allocated_sparse_intersection(::research_scann::SparseIntersectionConfig* sparse_intersection) {
  clear_metadata_type();
  if (sparse_intersection) {
    set_has_sparse_intersection();
    metadata_type_.sparse_intersection_ = sparse_intersection;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.MetadataConfig.sparse_intersection)
}
inline ::research_scann::SparseIntersectionConfig* MetadataConfig::_internal_mutable_sparse_intersection() {
  if (!_internal_has_sparse_intersection()) {
    clear_metadata_type();
    set_has_sparse_intersection();
    metadata_type_.sparse_intersection_ = CreateMaybeMessage< ::research_scann::SparseIntersectionConfig >(GetArenaForAllocation());
  }
  return metadata_type_.sparse_intersection_;
}
inline ::research_scann::SparseIntersectionConfig* MetadataConfig::mutable_sparse_intersection() {
  ::research_scann::SparseIntersectionConfig* _msg = _internal_mutable_sparse_intersection();
  // @@protoc_insertion_point(field_mutable:research_scann.MetadataConfig.sparse_intersection)
  return _msg;
}

// .research_scann.DistanceMeasureConfig exact_distance = 2;
inline bool MetadataConfig::_internal_has_exact_distance() const {
  return metadata_type_case() == kExactDistance;
}
inline bool MetadataConfig::has_exact_distance() const {
  return _internal_has_exact_distance();
}
inline void MetadataConfig::set_has_exact_distance() {
  _oneof_case_[0] = kExactDistance;
}
inline ::research_scann::DistanceMeasureConfig* MetadataConfig::release_exact_distance() {
  // @@protoc_insertion_point(field_release:research_scann.MetadataConfig.exact_distance)
  if (_internal_has_exact_distance()) {
    clear_has_metadata_type();
      ::research_scann::DistanceMeasureConfig* temp = metadata_type_.exact_distance_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    metadata_type_.exact_distance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::research_scann::DistanceMeasureConfig& MetadataConfig::_internal_exact_distance() const {
  return _internal_has_exact_distance()
      ? *metadata_type_.exact_distance_
      : reinterpret_cast< ::research_scann::DistanceMeasureConfig&>(::research_scann::_DistanceMeasureConfig_default_instance_);
}
inline const ::research_scann::DistanceMeasureConfig& MetadataConfig::exact_distance() const {
  // @@protoc_insertion_point(field_get:research_scann.MetadataConfig.exact_distance)
  return _internal_exact_distance();
}
inline ::research_scann::DistanceMeasureConfig* MetadataConfig::unsafe_arena_release_exact_distance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.MetadataConfig.exact_distance)
  if (_internal_has_exact_distance()) {
    clear_has_metadata_type();
    ::research_scann::DistanceMeasureConfig* temp = metadata_type_.exact_distance_;
    metadata_type_.exact_distance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MetadataConfig::unsafe_arena_set_allocated_exact_distance(::research_scann::DistanceMeasureConfig* exact_distance) {
  clear_metadata_type();
  if (exact_distance) {
    set_has_exact_distance();
    metadata_type_.exact_distance_ = exact_distance;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.MetadataConfig.exact_distance)
}
inline ::research_scann::DistanceMeasureConfig* MetadataConfig::_internal_mutable_exact_distance() {
  if (!_internal_has_exact_distance()) {
    clear_metadata_type();
    set_has_exact_distance();
    metadata_type_.exact_distance_ = CreateMaybeMessage< ::research_scann::DistanceMeasureConfig >(GetArenaForAllocation());
  }
  return metadata_type_.exact_distance_;
}
inline ::research_scann::DistanceMeasureConfig* MetadataConfig::mutable_exact_distance() {
  ::research_scann::DistanceMeasureConfig* _msg = _internal_mutable_exact_distance();
  // @@protoc_insertion_point(field_mutable:research_scann.MetadataConfig.exact_distance)
  return _msg;
}

// .research_scann.UserInfoMetadataConfig userinfo = 3;
inline bool MetadataConfig::_internal_has_userinfo() const {
  return metadata_type_case() == kUserinfo;
}
inline bool MetadataConfig::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void MetadataConfig::set_has_userinfo() {
  _oneof_case_[0] = kUserinfo;
}
inline void MetadataConfig::clear_userinfo() {
  if (_internal_has_userinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete metadata_type_.userinfo_;
    }
    clear_has_metadata_type();
  }
}
inline ::research_scann::UserInfoMetadataConfig* MetadataConfig::release_userinfo() {
  // @@protoc_insertion_point(field_release:research_scann.MetadataConfig.userinfo)
  if (_internal_has_userinfo()) {
    clear_has_metadata_type();
      ::research_scann::UserInfoMetadataConfig* temp = metadata_type_.userinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    metadata_type_.userinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::research_scann::UserInfoMetadataConfig& MetadataConfig::_internal_userinfo() const {
  return _internal_has_userinfo()
      ? *metadata_type_.userinfo_
      : reinterpret_cast< ::research_scann::UserInfoMetadataConfig&>(::research_scann::_UserInfoMetadataConfig_default_instance_);
}
inline const ::research_scann::UserInfoMetadataConfig& MetadataConfig::userinfo() const {
  // @@protoc_insertion_point(field_get:research_scann.MetadataConfig.userinfo)
  return _internal_userinfo();
}
inline ::research_scann::UserInfoMetadataConfig* MetadataConfig::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.MetadataConfig.userinfo)
  if (_internal_has_userinfo()) {
    clear_has_metadata_type();
    ::research_scann::UserInfoMetadataConfig* temp = metadata_type_.userinfo_;
    metadata_type_.userinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MetadataConfig::unsafe_arena_set_allocated_userinfo(::research_scann::UserInfoMetadataConfig* userinfo) {
  clear_metadata_type();
  if (userinfo) {
    set_has_userinfo();
    metadata_type_.userinfo_ = userinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.MetadataConfig.userinfo)
}
inline ::research_scann::UserInfoMetadataConfig* MetadataConfig::_internal_mutable_userinfo() {
  if (!_internal_has_userinfo()) {
    clear_metadata_type();
    set_has_userinfo();
    metadata_type_.userinfo_ = CreateMaybeMessage< ::research_scann::UserInfoMetadataConfig >(GetArenaForAllocation());
  }
  return metadata_type_.userinfo_;
}
inline ::research_scann::UserInfoMetadataConfig* MetadataConfig::mutable_userinfo() {
  ::research_scann::UserInfoMetadataConfig* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:research_scann.MetadataConfig.userinfo)
  return _msg;
}

// .research_scann.ClassLabelMetadataConfig class_label = 6;
inline bool MetadataConfig::_internal_has_class_label() const {
  return metadata_type_case() == kClassLabel;
}
inline bool MetadataConfig::has_class_label() const {
  return _internal_has_class_label();
}
inline void MetadataConfig::set_has_class_label() {
  _oneof_case_[0] = kClassLabel;
}
inline void MetadataConfig::clear_class_label() {
  if (_internal_has_class_label()) {
    if (GetArenaForAllocation() == nullptr) {
      delete metadata_type_.class_label_;
    }
    clear_has_metadata_type();
  }
}
inline ::research_scann::ClassLabelMetadataConfig* MetadataConfig::release_class_label() {
  // @@protoc_insertion_point(field_release:research_scann.MetadataConfig.class_label)
  if (_internal_has_class_label()) {
    clear_has_metadata_type();
      ::research_scann::ClassLabelMetadataConfig* temp = metadata_type_.class_label_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    metadata_type_.class_label_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::research_scann::ClassLabelMetadataConfig& MetadataConfig::_internal_class_label() const {
  return _internal_has_class_label()
      ? *metadata_type_.class_label_
      : reinterpret_cast< ::research_scann::ClassLabelMetadataConfig&>(::research_scann::_ClassLabelMetadataConfig_default_instance_);
}
inline const ::research_scann::ClassLabelMetadataConfig& MetadataConfig::class_label() const {
  // @@protoc_insertion_point(field_get:research_scann.MetadataConfig.class_label)
  return _internal_class_label();
}
inline ::research_scann::ClassLabelMetadataConfig* MetadataConfig::unsafe_arena_release_class_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.MetadataConfig.class_label)
  if (_internal_has_class_label()) {
    clear_has_metadata_type();
    ::research_scann::ClassLabelMetadataConfig* temp = metadata_type_.class_label_;
    metadata_type_.class_label_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MetadataConfig::unsafe_arena_set_allocated_class_label(::research_scann::ClassLabelMetadataConfig* class_label) {
  clear_metadata_type();
  if (class_label) {
    set_has_class_label();
    metadata_type_.class_label_ = class_label;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.MetadataConfig.class_label)
}
inline ::research_scann::ClassLabelMetadataConfig* MetadataConfig::_internal_mutable_class_label() {
  if (!_internal_has_class_label()) {
    clear_metadata_type();
    set_has_class_label();
    metadata_type_.class_label_ = CreateMaybeMessage< ::research_scann::ClassLabelMetadataConfig >(GetArenaForAllocation());
  }
  return metadata_type_.class_label_;
}
inline ::research_scann::ClassLabelMetadataConfig* MetadataConfig::mutable_class_label() {
  ::research_scann::ClassLabelMetadataConfig* _msg = _internal_mutable_class_label();
  // @@protoc_insertion_point(field_mutable:research_scann.MetadataConfig.class_label)
  return _msg;
}

// .research_scann.DatabaseVectorMetadataConfig database_vector = 5;
inline bool MetadataConfig::_internal_has_database_vector() const {
  return metadata_type_case() == kDatabaseVector;
}
inline bool MetadataConfig::has_database_vector() const {
  return _internal_has_database_vector();
}
inline void MetadataConfig::set_has_database_vector() {
  _oneof_case_[0] = kDatabaseVector;
}
inline void MetadataConfig::clear_database_vector() {
  if (_internal_has_database_vector()) {
    if (GetArenaForAllocation() == nullptr) {
      delete metadata_type_.database_vector_;
    }
    clear_has_metadata_type();
  }
}
inline ::research_scann::DatabaseVectorMetadataConfig* MetadataConfig::release_database_vector() {
  // @@protoc_insertion_point(field_release:research_scann.MetadataConfig.database_vector)
  if (_internal_has_database_vector()) {
    clear_has_metadata_type();
      ::research_scann::DatabaseVectorMetadataConfig* temp = metadata_type_.database_vector_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    metadata_type_.database_vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::research_scann::DatabaseVectorMetadataConfig& MetadataConfig::_internal_database_vector() const {
  return _internal_has_database_vector()
      ? *metadata_type_.database_vector_
      : reinterpret_cast< ::research_scann::DatabaseVectorMetadataConfig&>(::research_scann::_DatabaseVectorMetadataConfig_default_instance_);
}
inline const ::research_scann::DatabaseVectorMetadataConfig& MetadataConfig::database_vector() const {
  // @@protoc_insertion_point(field_get:research_scann.MetadataConfig.database_vector)
  return _internal_database_vector();
}
inline ::research_scann::DatabaseVectorMetadataConfig* MetadataConfig::unsafe_arena_release_database_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.MetadataConfig.database_vector)
  if (_internal_has_database_vector()) {
    clear_has_metadata_type();
    ::research_scann::DatabaseVectorMetadataConfig* temp = metadata_type_.database_vector_;
    metadata_type_.database_vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MetadataConfig::unsafe_arena_set_allocated_database_vector(::research_scann::DatabaseVectorMetadataConfig* database_vector) {
  clear_metadata_type();
  if (database_vector) {
    set_has_database_vector();
    metadata_type_.database_vector_ = database_vector;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.MetadataConfig.database_vector)
}
inline ::research_scann::DatabaseVectorMetadataConfig* MetadataConfig::_internal_mutable_database_vector() {
  if (!_internal_has_database_vector()) {
    clear_metadata_type();
    set_has_database_vector();
    metadata_type_.database_vector_ = CreateMaybeMessage< ::research_scann::DatabaseVectorMetadataConfig >(GetArenaForAllocation());
  }
  return metadata_type_.database_vector_;
}
inline ::research_scann::DatabaseVectorMetadataConfig* MetadataConfig::mutable_database_vector() {
  ::research_scann::DatabaseVectorMetadataConfig* _msg = _internal_mutable_database_vector();
  // @@protoc_insertion_point(field_mutable:research_scann.MetadataConfig.database_vector)
  return _msg;
}

// bytes custom_metadata = 4;
inline bool MetadataConfig::_internal_has_custom_metadata() const {
  return metadata_type_case() == kCustomMetadata;
}
inline bool MetadataConfig::has_custom_metadata() const {
  return _internal_has_custom_metadata();
}
inline void MetadataConfig::set_has_custom_metadata() {
  _oneof_case_[0] = kCustomMetadata;
}
inline void MetadataConfig::clear_custom_metadata() {
  if (_internal_has_custom_metadata()) {
    metadata_type_.custom_metadata_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_metadata_type();
  }
}
inline const std::string& MetadataConfig::custom_metadata() const {
  // @@protoc_insertion_point(field_get:research_scann.MetadataConfig.custom_metadata)
  return _internal_custom_metadata();
}
template <typename ArgT0, typename... ArgT>
inline void MetadataConfig::set_custom_metadata(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_custom_metadata()) {
    clear_metadata_type();
    set_has_custom_metadata();
    metadata_type_.custom_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  metadata_type_.custom_metadata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.MetadataConfig.custom_metadata)
}
inline std::string* MetadataConfig::mutable_custom_metadata() {
  std::string* _s = _internal_mutable_custom_metadata();
  // @@protoc_insertion_point(field_mutable:research_scann.MetadataConfig.custom_metadata)
  return _s;
}
inline const std::string& MetadataConfig::_internal_custom_metadata() const {
  if (_internal_has_custom_metadata()) {
    return metadata_type_.custom_metadata_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void MetadataConfig::_internal_set_custom_metadata(const std::string& value) {
  if (!_internal_has_custom_metadata()) {
    clear_metadata_type();
    set_has_custom_metadata();
    metadata_type_.custom_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  metadata_type_.custom_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MetadataConfig::_internal_mutable_custom_metadata() {
  if (!_internal_has_custom_metadata()) {
    clear_metadata_type();
    set_has_custom_metadata();
    metadata_type_.custom_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return metadata_type_.custom_metadata_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MetadataConfig::release_custom_metadata() {
  // @@protoc_insertion_point(field_release:research_scann.MetadataConfig.custom_metadata)
  if (_internal_has_custom_metadata()) {
    clear_has_metadata_type();
    return metadata_type_.custom_metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void MetadataConfig::set_allocated_custom_metadata(std::string* custom_metadata) {
  if (has_metadata_type()) {
    clear_metadata_type();
  }
  if (custom_metadata != nullptr) {
    set_has_custom_metadata();
    metadata_type_.custom_metadata_.UnsafeSetDefault(custom_metadata);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(custom_metadata);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.MetadataConfig.custom_metadata)
}

inline bool MetadataConfig::has_metadata_type() const {
  return metadata_type_case() != METADATA_TYPE_NOT_SET;
}
inline void MetadataConfig::clear_has_metadata_type() {
  _oneof_case_[0] = METADATA_TYPE_NOT_SET;
}
inline MetadataConfig::MetadataTypeCase MetadataConfig::metadata_type_case() const {
  return MetadataConfig::MetadataTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SparseIntersectionConfig

// optional uint32 max_to_return = 1 [default = 4294967295];
inline bool SparseIntersectionConfig::_internal_has_max_to_return() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SparseIntersectionConfig::has_max_to_return() const {
  return _internal_has_max_to_return();
}
inline void SparseIntersectionConfig::clear_max_to_return() {
  max_to_return_ = 4294967295u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseIntersectionConfig::_internal_max_to_return() const {
  return max_to_return_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseIntersectionConfig::max_to_return() const {
  // @@protoc_insertion_point(field_get:research_scann.SparseIntersectionConfig.max_to_return)
  return _internal_max_to_return();
}
inline void SparseIntersectionConfig::_internal_set_max_to_return(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  max_to_return_ = value;
}
inline void SparseIntersectionConfig::set_max_to_return(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_to_return(value);
  // @@protoc_insertion_point(field_set:research_scann.SparseIntersectionConfig.max_to_return)
}

// -------------------------------------------------------------------

// SparseIntersectionResult

// repeated uint64 intersecting_dimension = 1;
inline int SparseIntersectionResult::_internal_intersecting_dimension_size() const {
  return intersecting_dimension_.size();
}
inline int SparseIntersectionResult::intersecting_dimension_size() const {
  return _internal_intersecting_dimension_size();
}
inline void SparseIntersectionResult::clear_intersecting_dimension() {
  intersecting_dimension_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SparseIntersectionResult::_internal_intersecting_dimension(int index) const {
  return intersecting_dimension_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SparseIntersectionResult::intersecting_dimension(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.SparseIntersectionResult.intersecting_dimension)
  return _internal_intersecting_dimension(index);
}
inline void SparseIntersectionResult::set_intersecting_dimension(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  intersecting_dimension_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.SparseIntersectionResult.intersecting_dimension)
}
inline void SparseIntersectionResult::_internal_add_intersecting_dimension(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  intersecting_dimension_.Add(value);
}
inline void SparseIntersectionResult::add_intersecting_dimension(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_intersecting_dimension(value);
  // @@protoc_insertion_point(field_add:research_scann.SparseIntersectionResult.intersecting_dimension)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SparseIntersectionResult::_internal_intersecting_dimension() const {
  return intersecting_dimension_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SparseIntersectionResult::intersecting_dimension() const {
  // @@protoc_insertion_point(field_list:research_scann.SparseIntersectionResult.intersecting_dimension)
  return _internal_intersecting_dimension();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SparseIntersectionResult::_internal_mutable_intersecting_dimension() {
  return &intersecting_dimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SparseIntersectionResult::mutable_intersecting_dimension() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.SparseIntersectionResult.intersecting_dimension)
  return _internal_mutable_intersecting_dimension();
}

// repeated double value = 2;
inline int SparseIntersectionResult::_internal_value_size() const {
  return value_.size();
}
inline int SparseIntersectionResult::value_size() const {
  return _internal_value_size();
}
inline void SparseIntersectionResult::clear_value() {
  value_.Clear();
}
inline double SparseIntersectionResult::_internal_value(int index) const {
  return value_.Get(index);
}
inline double SparseIntersectionResult::value(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.SparseIntersectionResult.value)
  return _internal_value(index);
}
inline void SparseIntersectionResult::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.SparseIntersectionResult.value)
}
inline void SparseIntersectionResult::_internal_add_value(double value) {
  value_.Add(value);
}
inline void SparseIntersectionResult::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:research_scann.SparseIntersectionResult.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SparseIntersectionResult::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SparseIntersectionResult::value() const {
  // @@protoc_insertion_point(field_list:research_scann.SparseIntersectionResult.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SparseIntersectionResult::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SparseIntersectionResult::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.SparseIntersectionResult.value)
  return _internal_mutable_value();
}

// optional uint32 num_intersecting_dimensions = 3;
inline bool SparseIntersectionResult::_internal_has_num_intersecting_dimensions() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SparseIntersectionResult::has_num_intersecting_dimensions() const {
  return _internal_has_num_intersecting_dimensions();
}
inline void SparseIntersectionResult::clear_num_intersecting_dimensions() {
  num_intersecting_dimensions_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseIntersectionResult::_internal_num_intersecting_dimensions() const {
  return num_intersecting_dimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseIntersectionResult::num_intersecting_dimensions() const {
  // @@protoc_insertion_point(field_get:research_scann.SparseIntersectionResult.num_intersecting_dimensions)
  return _internal_num_intersecting_dimensions();
}
inline void SparseIntersectionResult::_internal_set_num_intersecting_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_intersecting_dimensions_ = value;
}
inline void SparseIntersectionResult::set_num_intersecting_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_intersecting_dimensions(value);
  // @@protoc_insertion_point(field_set:research_scann.SparseIntersectionResult.num_intersecting_dimensions)
}

// -------------------------------------------------------------------

// UserInfoMetadataConfig

// optional bool set_user_info_for_query = 1 [default = false];
inline bool UserInfoMetadataConfig::_internal_has_set_user_info_for_query() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInfoMetadataConfig::has_set_user_info_for_query() const {
  return _internal_has_set_user_info_for_query();
}
inline void UserInfoMetadataConfig::clear_set_user_info_for_query() {
  set_user_info_for_query_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool UserInfoMetadataConfig::_internal_set_user_info_for_query() const {
  return set_user_info_for_query_;
}
inline bool UserInfoMetadataConfig::set_user_info_for_query() const {
  // @@protoc_insertion_point(field_get:research_scann.UserInfoMetadataConfig.set_user_info_for_query)
  return _internal_set_user_info_for_query();
}
inline void UserInfoMetadataConfig::_internal_set_set_user_info_for_query(bool value) {
  _has_bits_[0] |= 0x00000001u;
  set_user_info_for_query_ = value;
}
inline void UserInfoMetadataConfig::set_set_user_info_for_query(bool value) {
  _internal_set_set_user_info_for_query(value);
  // @@protoc_insertion_point(field_set:research_scann.UserInfoMetadataConfig.set_user_info_for_query)
}

// optional bool set_user_info_for_neighbor = 2 [default = true];
inline bool UserInfoMetadataConfig::_internal_has_set_user_info_for_neighbor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInfoMetadataConfig::has_set_user_info_for_neighbor() const {
  return _internal_has_set_user_info_for_neighbor();
}
inline void UserInfoMetadataConfig::clear_set_user_info_for_neighbor() {
  set_user_info_for_neighbor_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool UserInfoMetadataConfig::_internal_set_user_info_for_neighbor() const {
  return set_user_info_for_neighbor_;
}
inline bool UserInfoMetadataConfig::set_user_info_for_neighbor() const {
  // @@protoc_insertion_point(field_get:research_scann.UserInfoMetadataConfig.set_user_info_for_neighbor)
  return _internal_set_user_info_for_neighbor();
}
inline void UserInfoMetadataConfig::_internal_set_set_user_info_for_neighbor(bool value) {
  _has_bits_[0] |= 0x00000002u;
  set_user_info_for_neighbor_ = value;
}
inline void UserInfoMetadataConfig::set_set_user_info_for_neighbor(bool value) {
  _internal_set_set_user_info_for_neighbor(value);
  // @@protoc_insertion_point(field_set:research_scann.UserInfoMetadataConfig.set_user_info_for_neighbor)
}

// -------------------------------------------------------------------

// ClassLabelMetadataConfig

// -------------------------------------------------------------------

// DatabaseVectorMetadataConfig

// optional bool return_database_vector = 1 [default = false];
inline bool DatabaseVectorMetadataConfig::_internal_has_return_database_vector() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DatabaseVectorMetadataConfig::has_return_database_vector() const {
  return _internal_has_return_database_vector();
}
inline void DatabaseVectorMetadataConfig::clear_return_database_vector() {
  return_database_vector_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool DatabaseVectorMetadataConfig::_internal_return_database_vector() const {
  return return_database_vector_;
}
inline bool DatabaseVectorMetadataConfig::return_database_vector() const {
  // @@protoc_insertion_point(field_get:research_scann.DatabaseVectorMetadataConfig.return_database_vector)
  return _internal_return_database_vector();
}
inline void DatabaseVectorMetadataConfig::_internal_set_return_database_vector(bool value) {
  _has_bits_[0] |= 0x00000001u;
  return_database_vector_ = value;
}
inline void DatabaseVectorMetadataConfig::set_return_database_vector(bool value) {
  _internal_set_return_database_vector(value);
  // @@protoc_insertion_point(field_set:research_scann.DatabaseVectorMetadataConfig.return_database_vector)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fmetadata_2eproto
