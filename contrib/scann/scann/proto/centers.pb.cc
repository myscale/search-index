// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/centers.proto

#include "scann/proto/centers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace research_scann {
constexpr CentersForAllSubspaces::CentersForAllSubspaces(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subspace_centers_()
  , quantization_scheme_(0)
{}
struct CentersForAllSubspacesDefaultTypeInternal {
  constexpr CentersForAllSubspacesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CentersForAllSubspacesDefaultTypeInternal() {}
  union {
    CentersForAllSubspaces _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CentersForAllSubspacesDefaultTypeInternal _CentersForAllSubspaces_default_instance_;
constexpr CentersForSubspace::CentersForSubspace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_(){}
struct CentersForSubspaceDefaultTypeInternal {
  constexpr CentersForSubspaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CentersForSubspaceDefaultTypeInternal() {}
  union {
    CentersForSubspace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CentersForSubspaceDefaultTypeInternal _CentersForSubspace_default_instance_;
}  // namespace research_scann
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2fcenters_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scann_2fproto_2fcenters_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2fcenters_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2fcenters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::CentersForAllSubspaces, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::CentersForAllSubspaces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::CentersForAllSubspaces, subspace_centers_),
  PROTOBUF_FIELD_OFFSET(::research_scann::CentersForAllSubspaces, quantization_scheme_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::research_scann::CentersForSubspace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::CentersForSubspace, center_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::research_scann::CentersForAllSubspaces)},
  { 9, -1, sizeof(::research_scann::CentersForSubspace)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_CentersForAllSubspaces_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_CentersForSubspace_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2fcenters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031scann/proto/centers.proto\022\016research_sc"
  "ann\032 scann/data_format/features.proto\032\026s"
  "cann/proto/hash.proto\"\267\001\n\026CentersForAllS"
  "ubspaces\022<\n\020subspace_centers\030\001 \003(\0132\".res"
  "earch_scann.CentersForSubspace\022_\n\023quanti"
  "zation_scheme\030\002 \001(\01629.research_scann.Asy"
  "mmetricHasherConfig.QuantizationScheme:\007"
  "PRODUCT\"J\n\022CentersForSubspace\0224\n\006center\030"
  "\001 \003(\0132$.research_scann.GenericFeatureVec"
  "tor"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fproto_2fcenters_2eproto_deps[2] = {
  &::descriptor_table_scann_2fdata_5fformat_2ffeatures_2eproto,
  &::descriptor_table_scann_2fproto_2fhash_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2fcenters_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fcenters_2eproto = {
  false, false, 363, descriptor_table_protodef_scann_2fproto_2fcenters_2eproto, "scann/proto/centers.proto", 
  &descriptor_table_scann_2fproto_2fcenters_2eproto_once, descriptor_table_scann_2fproto_2fcenters_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_scann_2fproto_2fcenters_2eproto::offsets,
  file_level_metadata_scann_2fproto_2fcenters_2eproto, file_level_enum_descriptors_scann_2fproto_2fcenters_2eproto, file_level_service_descriptors_scann_2fproto_2fcenters_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_scann_2fproto_2fcenters_2eproto_getter() {
  return &descriptor_table_scann_2fproto_2fcenters_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_scann_2fproto_2fcenters_2eproto(&descriptor_table_scann_2fproto_2fcenters_2eproto);
namespace research_scann {

// ===================================================================

class CentersForAllSubspaces::_Internal {
 public:
  using HasBits = decltype(std::declval<CentersForAllSubspaces>()._has_bits_);
  static void set_has_quantization_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CentersForAllSubspaces::CentersForAllSubspaces(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  subspace_centers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.CentersForAllSubspaces)
}
CentersForAllSubspaces::CentersForAllSubspaces(const CentersForAllSubspaces& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      subspace_centers_(from.subspace_centers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  quantization_scheme_ = from.quantization_scheme_;
  // @@protoc_insertion_point(copy_constructor:research_scann.CentersForAllSubspaces)
}

inline void CentersForAllSubspaces::SharedCtor() {
quantization_scheme_ = 0;
}

CentersForAllSubspaces::~CentersForAllSubspaces() {
  // @@protoc_insertion_point(destructor:research_scann.CentersForAllSubspaces)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CentersForAllSubspaces::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CentersForAllSubspaces::ArenaDtor(void* object) {
  CentersForAllSubspaces* _this = reinterpret_cast< CentersForAllSubspaces* >(object);
  (void)_this;
}
void CentersForAllSubspaces::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CentersForAllSubspaces::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CentersForAllSubspaces::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.CentersForAllSubspaces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subspace_centers_.Clear();
  quantization_scheme_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CentersForAllSubspaces::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .research_scann.CentersForSubspace subspace_centers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subspace_centers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .research_scann.AsymmetricHasherConfig.QuantizationScheme quantization_scheme = 2 [default = PRODUCT];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::AsymmetricHasherConfig_QuantizationScheme_IsValid(val))) {
            _internal_set_quantization_scheme(static_cast<::research_scann::AsymmetricHasherConfig_QuantizationScheme>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CentersForAllSubspaces::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.CentersForAllSubspaces)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.CentersForSubspace subspace_centers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subspace_centers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_subspace_centers(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.AsymmetricHasherConfig.QuantizationScheme quantization_scheme = 2 [default = PRODUCT];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_quantization_scheme(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.CentersForAllSubspaces)
  return target;
}

size_t CentersForAllSubspaces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.CentersForAllSubspaces)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.CentersForSubspace subspace_centers = 1;
  total_size += 1UL * this->_internal_subspace_centers_size();
  for (const auto& msg : this->subspace_centers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .research_scann.AsymmetricHasherConfig.QuantizationScheme quantization_scheme = 2 [default = PRODUCT];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quantization_scheme());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CentersForAllSubspaces::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CentersForAllSubspaces::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CentersForAllSubspaces::GetClassData() const { return &_class_data_; }

void CentersForAllSubspaces::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CentersForAllSubspaces *>(to)->MergeFrom(
      static_cast<const CentersForAllSubspaces &>(from));
}


void CentersForAllSubspaces::MergeFrom(const CentersForAllSubspaces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.CentersForAllSubspaces)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subspace_centers_.MergeFrom(from.subspace_centers_);
  if (from._internal_has_quantization_scheme()) {
    _internal_set_quantization_scheme(from._internal_quantization_scheme());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CentersForAllSubspaces::CopyFrom(const CentersForAllSubspaces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.CentersForAllSubspaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CentersForAllSubspaces::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(subspace_centers_)) return false;
  return true;
}

void CentersForAllSubspaces::InternalSwap(CentersForAllSubspaces* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subspace_centers_.InternalSwap(&other->subspace_centers_);
  swap(quantization_scheme_, other->quantization_scheme_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CentersForAllSubspaces::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2fproto_2fcenters_2eproto_getter, &descriptor_table_scann_2fproto_2fcenters_2eproto_once,
      file_level_metadata_scann_2fproto_2fcenters_2eproto[0]);
}

// ===================================================================

class CentersForSubspace::_Internal {
 public:
};

void CentersForSubspace::clear_center() {
  center_.Clear();
}
CentersForSubspace::CentersForSubspace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  center_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.CentersForSubspace)
}
CentersForSubspace::CentersForSubspace(const CentersForSubspace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      center_(from.center_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:research_scann.CentersForSubspace)
}

inline void CentersForSubspace::SharedCtor() {
}

CentersForSubspace::~CentersForSubspace() {
  // @@protoc_insertion_point(destructor:research_scann.CentersForSubspace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CentersForSubspace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CentersForSubspace::ArenaDtor(void* object) {
  CentersForSubspace* _this = reinterpret_cast< CentersForSubspace* >(object);
  (void)_this;
}
void CentersForSubspace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CentersForSubspace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CentersForSubspace::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.CentersForSubspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  center_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CentersForSubspace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .research_scann.GenericFeatureVector center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_center(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CentersForSubspace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.CentersForSubspace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.GenericFeatureVector center = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_center_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_center(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.CentersForSubspace)
  return target;
}

size_t CentersForSubspace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.CentersForSubspace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.GenericFeatureVector center = 1;
  total_size += 1UL * this->_internal_center_size();
  for (const auto& msg : this->center_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CentersForSubspace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CentersForSubspace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CentersForSubspace::GetClassData() const { return &_class_data_; }

void CentersForSubspace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CentersForSubspace *>(to)->MergeFrom(
      static_cast<const CentersForSubspace &>(from));
}


void CentersForSubspace::MergeFrom(const CentersForSubspace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.CentersForSubspace)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  center_.MergeFrom(from.center_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CentersForSubspace::CopyFrom(const CentersForSubspace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.CentersForSubspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CentersForSubspace::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(center_)) return false;
  return true;
}

void CentersForSubspace::InternalSwap(CentersForSubspace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  center_.InternalSwap(&other->center_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CentersForSubspace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2fproto_2fcenters_2eproto_getter, &descriptor_table_scann_2fproto_2fcenters_2eproto_once,
      file_level_metadata_scann_2fproto_2fcenters_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::CentersForAllSubspaces* Arena::CreateMaybeMessage< ::research_scann::CentersForAllSubspaces >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::CentersForAllSubspaces >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::CentersForSubspace* Arena::CreateMaybeMessage< ::research_scann::CentersForSubspace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::CentersForSubspace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
