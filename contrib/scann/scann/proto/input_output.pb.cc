// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/input_output.proto

#include "scann/proto/input_output.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace research_scann {
constexpr InputOutputConfig_PureDynamicConfig::InputOutputConfig_PureDynamicConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dimensionality_(uint64_t{0u})
  , vector_type_(0)

  , num_shards_(1){}
struct InputOutputConfig_PureDynamicConfigDefaultTypeInternal {
  constexpr InputOutputConfig_PureDynamicConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InputOutputConfig_PureDynamicConfigDefaultTypeInternal() {}
  union {
    InputOutputConfig_PureDynamicConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InputOutputConfig_PureDynamicConfigDefaultTypeInternal _InputOutputConfig_PureDynamicConfig_default_instance_;
constexpr InputOutputConfig_PreprocessingFunction::InputOutputConfig_PreprocessingFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , config_ascii_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InputOutputConfig_PreprocessingFunctionDefaultTypeInternal {
  constexpr InputOutputConfig_PreprocessingFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InputOutputConfig_PreprocessingFunctionDefaultTypeInternal() {}
  union {
    InputOutputConfig_PreprocessingFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InputOutputConfig_PreprocessingFunctionDefaultTypeInternal _InputOutputConfig_PreprocessingFunction_default_instance_;
constexpr InputOutputConfig::InputOutputConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : database_wildcard_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_wildcard_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , output_sstable_wildcard_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hashed_database_wildcard_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tokenized_database_wildcard_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fixed_point_database_wildcard_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , preprocessed_artifacts_dir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memory_consumption_estimate_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_preprocessing_function_(nullptr)
  , pure_dynamic_config_(nullptr)
  , dimensionality_(uint64_t{0u})
  , norm_type_(0)

  , allow_two_pass_read_(false)
  , non_negative_(false)
  , is_dense_(false)
  , saturate_(false)
  , artifacts_naming_option_(0)

  , in_memory_data_type_(255)

  , _oneof_case_{}{}
struct InputOutputConfigDefaultTypeInternal {
  constexpr InputOutputConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InputOutputConfigDefaultTypeInternal() {}
  union {
    InputOutputConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InputOutputConfigDefaultTypeInternal _InputOutputConfig_default_instance_;
}  // namespace research_scann
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2finput_5foutput_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scann_2fproto_2finput_5foutput_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2finput_5foutput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2finput_5foutput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PureDynamicConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PureDynamicConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PureDynamicConfig, num_shards_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PureDynamicConfig, vector_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PureDynamicConfig, dimensionality_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PreprocessingFunction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PreprocessingFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PreprocessingFunction, name_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig_PreprocessingFunction, config_ascii_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, in_memory_data_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, database_wildcard_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, allow_two_pass_read_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, query_wildcard_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, output_sstable_wildcard_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, preprocessed_artifacts_dir_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, artifacts_naming_option_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, pure_dynamic_config_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, norm_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, non_negative_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, is_dense_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, query_preprocessing_function_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, hashed_database_wildcard_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, fixed_point_database_wildcard_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, tokenized_database_wildcard_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, memory_consumption_estimate_filename_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, saturate_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, dimensionality_),
  PROTOBUF_FIELD_OFFSET(::research_scann::InputOutputConfig, IncrementalUpdateMetadataOneof_),
  17,
  0,
  12,
  1,
  ~0u,
  ~0u,
  2,
  6,
  16,
  9,
  11,
  13,
  14,
  8,
  3,
  5,
  4,
  7,
  15,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::research_scann::InputOutputConfig_PureDynamicConfig)},
  { 11, 18, sizeof(::research_scann::InputOutputConfig_PreprocessingFunction)},
  { 20, 46, sizeof(::research_scann::InputOutputConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_InputOutputConfig_PureDynamicConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_InputOutputConfig_PreprocessingFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_InputOutputConfig_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2finput_5foutput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036scann/proto/input_output.proto\022\016resear"
  "ch_scann\032%scann/proto/incremental_update"
  "s.proto\"\254\r\n\021InputOutputConfig\022o\n\023in_memo"
  "ry_data_type\030\002 \001(\0162/.research_scann.Inpu"
  "tOutputConfig.InMemoryTypes:!IN_MEMORY_D"
  "ATA_TYPE_NOT_SPECIFIED\022\031\n\021database_wildc"
  "ard\030\003 \001(\t\022\"\n\023allow_two_pass_read\030\017 \001(\010:\005"
  "false\022\026\n\016query_wildcard\030\010 \001(\t\022.\n$increme"
  "ntal_update_metadata_location\030\023 \001(\tH\000\022P\n"
  "\033incremental_update_metadata\030\026 \001(\0132).res"
  "earch_scann.IncrementalUpdateMetadataH\000\022"
  "\037\n\027output_sstable_wildcard\030\013 \001(\t\022\"\n\032prep"
  "rocessed_artifacts_dir\030\022 \001(\t\022`\n\027artifact"
  "s_naming_option\030\027 \001(\01627.research_scann.I"
  "nputOutputConfig.ArtifactsNamingOption:\006"
  "HASHED\022P\n\023pure_dynamic_config\030\025 \001(\01323.re"
  "search_scann.InputOutputConfig.PureDynam"
  "icConfig\022F\n\tnorm_type\030\005 \001(\0162-.research_s"
  "cann.InputOutputConfig.FeatureNorm:\004NONE"
  "\022\033\n\014non_negative\030\006 \001(\010:\005false\022\020\n\010is_dens"
  "e\030\007 \001(\010\022]\n\034query_preprocessing_function\030"
  "\020 \001(\01327.research_scann.InputOutputConfig"
  ".PreprocessingFunction\022 \n\030hashed_databas"
  "e_wildcard\030\014 \001(\t\022%\n\035fixed_point_database"
  "_wildcard\030\021 \001(\t\022#\n\033tokenized_database_wi"
  "ldcard\030\016 \001(\t\022,\n$memory_consumption_estim"
  "ate_filename\030\030 \001(\t\022\033\n\010saturate\030\n \001(\010:\005fa"
  "lseB\002\030\001\022\032\n\016dimensionality\030\004 \001(\004B\002\030\001\032\362\001\n\021"
  "PureDynamicConfig\022\025\n\nnum_shards\030\001 \001(\005:\0011"
  "\022l\n\013vector_type\030\002 \001(\0162>.research_scann.I"
  "nputOutputConfig.PureDynamicConfig.Vecto"
  "rType:\027UNSPECIFIED_VECTOR_TYPE\022\026\n\016dimens"
  "ionality\030\003 \001(\004\"@\n\nVectorType\022\033\n\027UNSPECIF"
  "IED_VECTOR_TYPE\020\000\022\n\n\006SPARSE\020\001\022\t\n\005DENSE\020\002"
  "\032;\n\025PreprocessingFunction\022\014\n\004name\030\001 \001(\t\022"
  "\024\n\014config_ascii\030\002 \001(\t\"\260\001\n\rInMemoryTypes\022"
  "\010\n\004INT8\020\000\022\t\n\005UINT8\020\001\022\t\n\005INT16\020\002\022\t\n\005INT32"
  "\020\004\022\n\n\006UINT32\020\005\022\t\n\005INT64\020\006\022\t\n\005FLOAT\020\010\022\n\n\006"
  "DOUBLE\020\t\022&\n!IN_MEMORY_DATA_TYPE_NOT_SPEC"
  "IFIED\020\377\001\022\016\n\006UINT16\020\003\032\002\010\001\022\016\n\006UINT64\020\007\032\002\010\001"
  "\"0\n\025ArtifactsNamingOption\022\n\n\006HASHED\020\000\022\013\n"
  "\007NO_HASH\020\001\"I\n\013FeatureNorm\022\010\n\004NONE\020\000\022\016\n\nU"
  "NITL2NORM\020\001\022\020\n\014STDGAUSSNORM\020\002\022\016\n\nUNITL1N"
  "ORM\020\003B \n\036IncrementalUpdateMetadataOneofJ"
  "\004\010\024\020\025J\004\010\031\020\032J\004\010\001\020\002J\004\010\r\020\016R\rinput_handler"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fproto_2finput_5foutput_2eproto_deps[1] = {
  &::descriptor_table_scann_2fproto_2fincremental_5fupdates_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2finput_5foutput_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2finput_5foutput_2eproto = {
  false, false, 1798, descriptor_table_protodef_scann_2fproto_2finput_5foutput_2eproto, "scann/proto/input_output.proto", 
  &descriptor_table_scann_2fproto_2finput_5foutput_2eproto_once, descriptor_table_scann_2fproto_2finput_5foutput_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_scann_2fproto_2finput_5foutput_2eproto::offsets,
  file_level_metadata_scann_2fproto_2finput_5foutput_2eproto, file_level_enum_descriptors_scann_2fproto_2finput_5foutput_2eproto, file_level_service_descriptors_scann_2fproto_2finput_5foutput_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_scann_2fproto_2finput_5foutput_2eproto_getter() {
  return &descriptor_table_scann_2fproto_2finput_5foutput_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_scann_2fproto_2finput_5foutput_2eproto(&descriptor_table_scann_2fproto_2finput_5foutput_2eproto);
namespace research_scann {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputOutputConfig_PureDynamicConfig_VectorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2finput_5foutput_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2finput_5foutput_2eproto[0];
}
bool InputOutputConfig_PureDynamicConfig_VectorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InputOutputConfig_PureDynamicConfig_VectorType InputOutputConfig_PureDynamicConfig::UNSPECIFIED_VECTOR_TYPE;
constexpr InputOutputConfig_PureDynamicConfig_VectorType InputOutputConfig_PureDynamicConfig::SPARSE;
constexpr InputOutputConfig_PureDynamicConfig_VectorType InputOutputConfig_PureDynamicConfig::DENSE;
constexpr InputOutputConfig_PureDynamicConfig_VectorType InputOutputConfig_PureDynamicConfig::VectorType_MIN;
constexpr InputOutputConfig_PureDynamicConfig_VectorType InputOutputConfig_PureDynamicConfig::VectorType_MAX;
constexpr int InputOutputConfig_PureDynamicConfig::VectorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputOutputConfig_InMemoryTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2finput_5foutput_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2finput_5foutput_2eproto[1];
}
bool InputOutputConfig_InMemoryTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 255:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::INT8;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::UINT8;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::INT16;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::INT32;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::UINT32;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::INT64;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::FLOAT;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::DOUBLE;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::IN_MEMORY_DATA_TYPE_NOT_SPECIFIED;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::UINT16;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::UINT64;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::InMemoryTypes_MIN;
constexpr InputOutputConfig_InMemoryTypes InputOutputConfig::InMemoryTypes_MAX;
constexpr int InputOutputConfig::InMemoryTypes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputOutputConfig_ArtifactsNamingOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2finput_5foutput_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2finput_5foutput_2eproto[2];
}
bool InputOutputConfig_ArtifactsNamingOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InputOutputConfig_ArtifactsNamingOption InputOutputConfig::HASHED;
constexpr InputOutputConfig_ArtifactsNamingOption InputOutputConfig::NO_HASH;
constexpr InputOutputConfig_ArtifactsNamingOption InputOutputConfig::ArtifactsNamingOption_MIN;
constexpr InputOutputConfig_ArtifactsNamingOption InputOutputConfig::ArtifactsNamingOption_MAX;
constexpr int InputOutputConfig::ArtifactsNamingOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputOutputConfig_FeatureNorm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2finput_5foutput_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2finput_5foutput_2eproto[3];
}
bool InputOutputConfig_FeatureNorm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InputOutputConfig_FeatureNorm InputOutputConfig::NONE;
constexpr InputOutputConfig_FeatureNorm InputOutputConfig::UNITL2NORM;
constexpr InputOutputConfig_FeatureNorm InputOutputConfig::STDGAUSSNORM;
constexpr InputOutputConfig_FeatureNorm InputOutputConfig::UNITL1NORM;
constexpr InputOutputConfig_FeatureNorm InputOutputConfig::FeatureNorm_MIN;
constexpr InputOutputConfig_FeatureNorm InputOutputConfig::FeatureNorm_MAX;
constexpr int InputOutputConfig::FeatureNorm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class InputOutputConfig_PureDynamicConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<InputOutputConfig_PureDynamicConfig>()._has_bits_);
  static void set_has_num_shards(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vector_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dimensionality(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InputOutputConfig_PureDynamicConfig::InputOutputConfig_PureDynamicConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.InputOutputConfig.PureDynamicConfig)
}
InputOutputConfig_PureDynamicConfig::InputOutputConfig_PureDynamicConfig(const InputOutputConfig_PureDynamicConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dimensionality_, &from.dimensionality_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_shards_) -
    reinterpret_cast<char*>(&dimensionality_)) + sizeof(num_shards_));
  // @@protoc_insertion_point(copy_constructor:research_scann.InputOutputConfig.PureDynamicConfig)
}

inline void InputOutputConfig_PureDynamicConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dimensionality_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vector_type_) -
    reinterpret_cast<char*>(&dimensionality_)) + sizeof(vector_type_));
num_shards_ = 1;
}

InputOutputConfig_PureDynamicConfig::~InputOutputConfig_PureDynamicConfig() {
  // @@protoc_insertion_point(destructor:research_scann.InputOutputConfig.PureDynamicConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InputOutputConfig_PureDynamicConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InputOutputConfig_PureDynamicConfig::ArenaDtor(void* object) {
  InputOutputConfig_PureDynamicConfig* _this = reinterpret_cast< InputOutputConfig_PureDynamicConfig* >(object);
  (void)_this;
}
void InputOutputConfig_PureDynamicConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputOutputConfig_PureDynamicConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InputOutputConfig_PureDynamicConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.InputOutputConfig.PureDynamicConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&dimensionality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vector_type_) -
        reinterpret_cast<char*>(&dimensionality_)) + sizeof(vector_type_));
    num_shards_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputOutputConfig_PureDynamicConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 num_shards = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_shards(&has_bits);
          num_shards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.InputOutputConfig.PureDynamicConfig.VectorType vector_type = 2 [default = UNSPECIFIED_VECTOR_TYPE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::InputOutputConfig_PureDynamicConfig_VectorType_IsValid(val))) {
            _internal_set_vector_type(static_cast<::research_scann::InputOutputConfig_PureDynamicConfig_VectorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 dimensionality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dimensionality(&has_bits);
          dimensionality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputOutputConfig_PureDynamicConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.InputOutputConfig.PureDynamicConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_shards = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_shards(), target);
  }

  // optional .research_scann.InputOutputConfig.PureDynamicConfig.VectorType vector_type = 2 [default = UNSPECIFIED_VECTOR_TYPE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_vector_type(), target);
  }

  // optional uint64 dimensionality = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_dimensionality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.InputOutputConfig.PureDynamicConfig)
  return target;
}

size_t InputOutputConfig_PureDynamicConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.InputOutputConfig.PureDynamicConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 dimensionality = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_dimensionality());
    }

    // optional .research_scann.InputOutputConfig.PureDynamicConfig.VectorType vector_type = 2 [default = UNSPECIFIED_VECTOR_TYPE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vector_type());
    }

    // optional int32 num_shards = 1 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_shards());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputOutputConfig_PureDynamicConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InputOutputConfig_PureDynamicConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputOutputConfig_PureDynamicConfig::GetClassData() const { return &_class_data_; }

void InputOutputConfig_PureDynamicConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InputOutputConfig_PureDynamicConfig *>(to)->MergeFrom(
      static_cast<const InputOutputConfig_PureDynamicConfig &>(from));
}


void InputOutputConfig_PureDynamicConfig::MergeFrom(const InputOutputConfig_PureDynamicConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.InputOutputConfig.PureDynamicConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      dimensionality_ = from.dimensionality_;
    }
    if (cached_has_bits & 0x00000002u) {
      vector_type_ = from.vector_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_shards_ = from.num_shards_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputOutputConfig_PureDynamicConfig::CopyFrom(const InputOutputConfig_PureDynamicConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.InputOutputConfig.PureDynamicConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputOutputConfig_PureDynamicConfig::IsInitialized() const {
  return true;
}

void InputOutputConfig_PureDynamicConfig::InternalSwap(InputOutputConfig_PureDynamicConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputOutputConfig_PureDynamicConfig, vector_type_)
      + sizeof(InputOutputConfig_PureDynamicConfig::vector_type_)
      - PROTOBUF_FIELD_OFFSET(InputOutputConfig_PureDynamicConfig, dimensionality_)>(
          reinterpret_cast<char*>(&dimensionality_),
          reinterpret_cast<char*>(&other->dimensionality_));
  swap(num_shards_, other->num_shards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputOutputConfig_PureDynamicConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2fproto_2finput_5foutput_2eproto_getter, &descriptor_table_scann_2fproto_2finput_5foutput_2eproto_once,
      file_level_metadata_scann_2fproto_2finput_5foutput_2eproto[0]);
}

// ===================================================================

class InputOutputConfig_PreprocessingFunction::_Internal {
 public:
  using HasBits = decltype(std::declval<InputOutputConfig_PreprocessingFunction>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_config_ascii(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InputOutputConfig_PreprocessingFunction::InputOutputConfig_PreprocessingFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.InputOutputConfig.PreprocessingFunction)
}
InputOutputConfig_PreprocessingFunction::InputOutputConfig_PreprocessingFunction(const InputOutputConfig_PreprocessingFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  config_ascii_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_config_ascii()) {
    config_ascii_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config_ascii(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.InputOutputConfig.PreprocessingFunction)
}

inline void InputOutputConfig_PreprocessingFunction::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
config_ascii_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InputOutputConfig_PreprocessingFunction::~InputOutputConfig_PreprocessingFunction() {
  // @@protoc_insertion_point(destructor:research_scann.InputOutputConfig.PreprocessingFunction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InputOutputConfig_PreprocessingFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_ascii_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InputOutputConfig_PreprocessingFunction::ArenaDtor(void* object) {
  InputOutputConfig_PreprocessingFunction* _this = reinterpret_cast< InputOutputConfig_PreprocessingFunction* >(object);
  (void)_this;
}
void InputOutputConfig_PreprocessingFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputOutputConfig_PreprocessingFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InputOutputConfig_PreprocessingFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.InputOutputConfig.PreprocessingFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      config_ascii_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputOutputConfig_PreprocessingFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "research_scann.InputOutputConfig.PreprocessingFunction.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string config_ascii = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_config_ascii();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "research_scann.InputOutputConfig.PreprocessingFunction.config_ascii");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputOutputConfig_PreprocessingFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.InputOutputConfig.PreprocessingFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.PreprocessingFunction.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string config_ascii = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_config_ascii().data(), static_cast<int>(this->_internal_config_ascii().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.PreprocessingFunction.config_ascii");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_config_ascii(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.InputOutputConfig.PreprocessingFunction)
  return target;
}

size_t InputOutputConfig_PreprocessingFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.InputOutputConfig.PreprocessingFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string config_ascii = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_config_ascii());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputOutputConfig_PreprocessingFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InputOutputConfig_PreprocessingFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputOutputConfig_PreprocessingFunction::GetClassData() const { return &_class_data_; }

void InputOutputConfig_PreprocessingFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InputOutputConfig_PreprocessingFunction *>(to)->MergeFrom(
      static_cast<const InputOutputConfig_PreprocessingFunction &>(from));
}


void InputOutputConfig_PreprocessingFunction::MergeFrom(const InputOutputConfig_PreprocessingFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.InputOutputConfig.PreprocessingFunction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_config_ascii(from._internal_config_ascii());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputOutputConfig_PreprocessingFunction::CopyFrom(const InputOutputConfig_PreprocessingFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.InputOutputConfig.PreprocessingFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputOutputConfig_PreprocessingFunction::IsInitialized() const {
  return true;
}

void InputOutputConfig_PreprocessingFunction::InternalSwap(InputOutputConfig_PreprocessingFunction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &config_ascii_, GetArenaForAllocation(),
      &other->config_ascii_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InputOutputConfig_PreprocessingFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2fproto_2finput_5foutput_2eproto_getter, &descriptor_table_scann_2fproto_2finput_5foutput_2eproto_once,
      file_level_metadata_scann_2fproto_2finput_5foutput_2eproto[1]);
}

// ===================================================================

class InputOutputConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<InputOutputConfig>()._has_bits_);
  static void set_has_in_memory_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_database_wildcard(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allow_two_pass_read(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_query_wildcard(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::research_scann::IncrementalUpdateMetadata& incremental_update_metadata(const InputOutputConfig* msg);
  static void set_has_output_sstable_wildcard(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preprocessed_artifacts_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_artifacts_naming_option(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::research_scann::InputOutputConfig_PureDynamicConfig& pure_dynamic_config(const InputOutputConfig* msg);
  static void set_has_pure_dynamic_config(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_norm_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_non_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_dense(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::research_scann::InputOutputConfig_PreprocessingFunction& query_preprocessing_function(const InputOutputConfig* msg);
  static void set_has_query_preprocessing_function(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hashed_database_wildcard(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fixed_point_database_wildcard(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tokenized_database_wildcard(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_memory_consumption_estimate_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_saturate(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_dimensionality(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::research_scann::IncrementalUpdateMetadata&
InputOutputConfig::_Internal::incremental_update_metadata(const InputOutputConfig* msg) {
  return *msg->IncrementalUpdateMetadataOneof_.incremental_update_metadata_;
}
const ::research_scann::InputOutputConfig_PureDynamicConfig&
InputOutputConfig::_Internal::pure_dynamic_config(const InputOutputConfig* msg) {
  return *msg->pure_dynamic_config_;
}
const ::research_scann::InputOutputConfig_PreprocessingFunction&
InputOutputConfig::_Internal::query_preprocessing_function(const InputOutputConfig* msg) {
  return *msg->query_preprocessing_function_;
}
void InputOutputConfig::set_allocated_incremental_update_metadata(::research_scann::IncrementalUpdateMetadata* incremental_update_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_IncrementalUpdateMetadataOneof();
  if (incremental_update_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(incremental_update_metadata));
    if (message_arena != submessage_arena) {
      incremental_update_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incremental_update_metadata, submessage_arena);
    }
    set_has_incremental_update_metadata();
    IncrementalUpdateMetadataOneof_.incremental_update_metadata_ = incremental_update_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:research_scann.InputOutputConfig.incremental_update_metadata)
}
void InputOutputConfig::clear_incremental_update_metadata() {
  if (_internal_has_incremental_update_metadata()) {
    if (GetArenaForAllocation() == nullptr) {
      delete IncrementalUpdateMetadataOneof_.incremental_update_metadata_;
    }
    clear_has_IncrementalUpdateMetadataOneof();
  }
}
InputOutputConfig::InputOutputConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.InputOutputConfig)
}
InputOutputConfig::InputOutputConfig(const InputOutputConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_database_wildcard()) {
    database_wildcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_database_wildcard(), 
      GetArenaForAllocation());
  }
  query_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_query_wildcard()) {
    query_wildcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query_wildcard(), 
      GetArenaForAllocation());
  }
  output_sstable_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_sstable_wildcard()) {
    output_sstable_wildcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output_sstable_wildcard(), 
      GetArenaForAllocation());
  }
  hashed_database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hashed_database_wildcard()) {
    hashed_database_wildcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hashed_database_wildcard(), 
      GetArenaForAllocation());
  }
  tokenized_database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tokenized_database_wildcard()) {
    tokenized_database_wildcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tokenized_database_wildcard(), 
      GetArenaForAllocation());
  }
  fixed_point_database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fixed_point_database_wildcard()) {
    fixed_point_database_wildcard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fixed_point_database_wildcard(), 
      GetArenaForAllocation());
  }
  preprocessed_artifacts_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preprocessed_artifacts_dir()) {
    preprocessed_artifacts_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preprocessed_artifacts_dir(), 
      GetArenaForAllocation());
  }
  memory_consumption_estimate_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_memory_consumption_estimate_filename()) {
    memory_consumption_estimate_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memory_consumption_estimate_filename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_query_preprocessing_function()) {
    query_preprocessing_function_ = new ::research_scann::InputOutputConfig_PreprocessingFunction(*from.query_preprocessing_function_);
  } else {
    query_preprocessing_function_ = nullptr;
  }
  if (from._internal_has_pure_dynamic_config()) {
    pure_dynamic_config_ = new ::research_scann::InputOutputConfig_PureDynamicConfig(*from.pure_dynamic_config_);
  } else {
    pure_dynamic_config_ = nullptr;
  }
  ::memcpy(&dimensionality_, &from.dimensionality_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_memory_data_type_) -
    reinterpret_cast<char*>(&dimensionality_)) + sizeof(in_memory_data_type_));
  clear_has_IncrementalUpdateMetadataOneof();
  switch (from.IncrementalUpdateMetadataOneof_case()) {
    case kIncrementalUpdateMetadataLocation: {
      _internal_set_incremental_update_metadata_location(from._internal_incremental_update_metadata_location());
      break;
    }
    case kIncrementalUpdateMetadata: {
      _internal_mutable_incremental_update_metadata()->::research_scann::IncrementalUpdateMetadata::MergeFrom(from._internal_incremental_update_metadata());
      break;
    }
    case INCREMENTALUPDATEMETADATAONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:research_scann.InputOutputConfig)
}

inline void InputOutputConfig::SharedCtor() {
database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
query_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
output_sstable_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hashed_database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tokenized_database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fixed_point_database_wildcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
preprocessed_artifacts_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
memory_consumption_estimate_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&query_preprocessing_function_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&artifacts_naming_option_) -
    reinterpret_cast<char*>(&query_preprocessing_function_)) + sizeof(artifacts_naming_option_));
in_memory_data_type_ = 255;
clear_has_IncrementalUpdateMetadataOneof();
}

InputOutputConfig::~InputOutputConfig() {
  // @@protoc_insertion_point(destructor:research_scann.InputOutputConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InputOutputConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  database_wildcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_wildcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_sstable_wildcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashed_database_wildcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokenized_database_wildcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fixed_point_database_wildcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preprocessed_artifacts_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_consumption_estimate_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_preprocessing_function_;
  if (this != internal_default_instance()) delete pure_dynamic_config_;
  if (has_IncrementalUpdateMetadataOneof()) {
    clear_IncrementalUpdateMetadataOneof();
  }
}

void InputOutputConfig::ArenaDtor(void* object) {
  InputOutputConfig* _this = reinterpret_cast< InputOutputConfig* >(object);
  (void)_this;
}
void InputOutputConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputOutputConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InputOutputConfig::clear_IncrementalUpdateMetadataOneof() {
// @@protoc_insertion_point(one_of_clear_start:research_scann.InputOutputConfig)
  switch (IncrementalUpdateMetadataOneof_case()) {
    case kIncrementalUpdateMetadataLocation: {
      IncrementalUpdateMetadataOneof_.incremental_update_metadata_location_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kIncrementalUpdateMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete IncrementalUpdateMetadataOneof_.incremental_update_metadata_;
      }
      break;
    }
    case INCREMENTALUPDATEMETADATAONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INCREMENTALUPDATEMETADATAONEOF_NOT_SET;
}


void InputOutputConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.InputOutputConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      database_wildcard_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      query_wildcard_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      output_sstable_wildcard_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      hashed_database_wildcard_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      tokenized_database_wildcard_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      fixed_point_database_wildcard_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      preprocessed_artifacts_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      memory_consumption_estimate_filename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(query_preprocessing_function_ != nullptr);
      query_preprocessing_function_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(pure_dynamic_config_ != nullptr);
      pure_dynamic_config_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&dimensionality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&saturate_) -
        reinterpret_cast<char*>(&dimensionality_)) + sizeof(saturate_));
  }
  if (cached_has_bits & 0x00030000u) {
    artifacts_naming_option_ = 0;
    in_memory_data_type_ = 255;
  }
  clear_IncrementalUpdateMetadataOneof();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputOutputConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .research_scann.InputOutputConfig.InMemoryTypes in_memory_data_type = 2 [default = IN_MEMORY_DATA_TYPE_NOT_SPECIFIED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::InputOutputConfig_InMemoryTypes_IsValid(val))) {
            _internal_set_in_memory_data_type(static_cast<::research_scann::InputOutputConfig_InMemoryTypes>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string database_wildcard = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_database_wildcard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "research_scann.InputOutputConfig.database_wildcard");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dimensionality = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dimensionality(&has_bits);
          dimensionality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.InputOutputConfig.FeatureNorm norm_type = 5 [default = NONE];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::InputOutputConfig_FeatureNorm_IsValid(val))) {
            _internal_set_norm_type(static_cast<::research_scann::InputOutputConfig_FeatureNorm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool non_negative = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_non_negative(&has_bits);
          non_negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_dense = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_dense(&has_bits);
          is_dense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string query_wildcard = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_query_wildcard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "research_scann.InputOutputConfig.query_wildcard");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool saturate = 10 [default = false, deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_saturate(&has_bits);
          saturate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string output_sstable_wildcard = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_output_sstable_wildcard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "research_scann.InputOutputConfig.output_sstable_wildcard");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hashed_database_wildcard = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_hashed_database_wildcard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "research_scann.InputOutputConfig.hashed_database_wildcard");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tokenized_database_wildcard = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_tokenized_database_wildcard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "research_scann.InputOutputConfig.tokenized_database_wildcard");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_two_pass_read = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_allow_two_pass_read(&has_bits);
          allow_two_pass_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.InputOutputConfig.PreprocessingFunction query_preprocessing_function = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_preprocessing_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fixed_point_database_wildcard = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_fixed_point_database_wildcard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "research_scann.InputOutputConfig.fixed_point_database_wildcard");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string preprocessed_artifacts_dir = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_preprocessed_artifacts_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "research_scann.InputOutputConfig.preprocessed_artifacts_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string incremental_update_metadata_location = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_incremental_update_metadata_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "research_scann.InputOutputConfig.incremental_update_metadata_location");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.InputOutputConfig.PureDynamicConfig pure_dynamic_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_pure_dynamic_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .research_scann.IncrementalUpdateMetadata incremental_update_metadata = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_incremental_update_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.InputOutputConfig.ArtifactsNamingOption artifacts_naming_option = 23 [default = HASHED];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::InputOutputConfig_ArtifactsNamingOption_IsValid(val))) {
            _internal_set_artifacts_naming_option(static_cast<::research_scann::InputOutputConfig_ArtifactsNamingOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string memory_consumption_estimate_filename = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_memory_consumption_estimate_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "research_scann.InputOutputConfig.memory_consumption_estimate_filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputOutputConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.InputOutputConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.InputOutputConfig.InMemoryTypes in_memory_data_type = 2 [default = IN_MEMORY_DATA_TYPE_NOT_SPECIFIED];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_in_memory_data_type(), target);
  }

  // optional string database_wildcard = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_database_wildcard().data(), static_cast<int>(this->_internal_database_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.database_wildcard");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_database_wildcard(), target);
  }

  // optional uint64 dimensionality = 4 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_dimensionality(), target);
  }

  // optional .research_scann.InputOutputConfig.FeatureNorm norm_type = 5 [default = NONE];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_norm_type(), target);
  }

  // optional bool non_negative = 6 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_non_negative(), target);
  }

  // optional bool is_dense = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_dense(), target);
  }

  // optional string query_wildcard = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_query_wildcard().data(), static_cast<int>(this->_internal_query_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.query_wildcard");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_query_wildcard(), target);
  }

  // optional bool saturate = 10 [default = false, deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_saturate(), target);
  }

  // optional string output_sstable_wildcard = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_sstable_wildcard().data(), static_cast<int>(this->_internal_output_sstable_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.output_sstable_wildcard");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_output_sstable_wildcard(), target);
  }

  // optional string hashed_database_wildcard = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hashed_database_wildcard().data(), static_cast<int>(this->_internal_hashed_database_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.hashed_database_wildcard");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_hashed_database_wildcard(), target);
  }

  // optional string tokenized_database_wildcard = 14;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tokenized_database_wildcard().data(), static_cast<int>(this->_internal_tokenized_database_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.tokenized_database_wildcard");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_tokenized_database_wildcard(), target);
  }

  // optional bool allow_two_pass_read = 15 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_allow_two_pass_read(), target);
  }

  // optional .research_scann.InputOutputConfig.PreprocessingFunction query_preprocessing_function = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::query_preprocessing_function(this), target, stream);
  }

  // optional string fixed_point_database_wildcard = 17;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fixed_point_database_wildcard().data(), static_cast<int>(this->_internal_fixed_point_database_wildcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.fixed_point_database_wildcard");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_fixed_point_database_wildcard(), target);
  }

  // optional string preprocessed_artifacts_dir = 18;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preprocessed_artifacts_dir().data(), static_cast<int>(this->_internal_preprocessed_artifacts_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.preprocessed_artifacts_dir");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_preprocessed_artifacts_dir(), target);
  }

  // string incremental_update_metadata_location = 19;
  if (_internal_has_incremental_update_metadata_location()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_incremental_update_metadata_location().data(), static_cast<int>(this->_internal_incremental_update_metadata_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.incremental_update_metadata_location");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_incremental_update_metadata_location(), target);
  }

  // optional .research_scann.InputOutputConfig.PureDynamicConfig pure_dynamic_config = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::pure_dynamic_config(this), target, stream);
  }

  // .research_scann.IncrementalUpdateMetadata incremental_update_metadata = 22;
  if (_internal_has_incremental_update_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::incremental_update_metadata(this), target, stream);
  }

  // optional .research_scann.InputOutputConfig.ArtifactsNamingOption artifacts_naming_option = 23 [default = HASHED];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_artifacts_naming_option(), target);
  }

  // optional string memory_consumption_estimate_filename = 24;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_memory_consumption_estimate_filename().data(), static_cast<int>(this->_internal_memory_consumption_estimate_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.InputOutputConfig.memory_consumption_estimate_filename");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_memory_consumption_estimate_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.InputOutputConfig)
  return target;
}

size_t InputOutputConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.InputOutputConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string database_wildcard = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database_wildcard());
    }

    // optional string query_wildcard = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_query_wildcard());
    }

    // optional string output_sstable_wildcard = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_sstable_wildcard());
    }

    // optional string hashed_database_wildcard = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hashed_database_wildcard());
    }

    // optional string tokenized_database_wildcard = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tokenized_database_wildcard());
    }

    // optional string fixed_point_database_wildcard = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fixed_point_database_wildcard());
    }

    // optional string preprocessed_artifacts_dir = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preprocessed_artifacts_dir());
    }

    // optional string memory_consumption_estimate_filename = 24;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_memory_consumption_estimate_filename());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .research_scann.InputOutputConfig.PreprocessingFunction query_preprocessing_function = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_preprocessing_function_);
    }

    // optional .research_scann.InputOutputConfig.PureDynamicConfig pure_dynamic_config = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pure_dynamic_config_);
    }

    // optional uint64 dimensionality = 4 [deprecated = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_dimensionality());
    }

    // optional .research_scann.InputOutputConfig.FeatureNorm norm_type = 5 [default = NONE];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_norm_type());
    }

    // optional bool allow_two_pass_read = 15 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool non_negative = 6 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_dense = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool saturate = 10 [default = false, deprecated = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional .research_scann.InputOutputConfig.ArtifactsNamingOption artifacts_naming_option = 23 [default = HASHED];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_artifacts_naming_option());
    }

    // optional .research_scann.InputOutputConfig.InMemoryTypes in_memory_data_type = 2 [default = IN_MEMORY_DATA_TYPE_NOT_SPECIFIED];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_in_memory_data_type());
    }

  }
  switch (IncrementalUpdateMetadataOneof_case()) {
    // string incremental_update_metadata_location = 19;
    case kIncrementalUpdateMetadataLocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_incremental_update_metadata_location());
      break;
    }
    // .research_scann.IncrementalUpdateMetadata incremental_update_metadata = 22;
    case kIncrementalUpdateMetadata: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *IncrementalUpdateMetadataOneof_.incremental_update_metadata_);
      break;
    }
    case INCREMENTALUPDATEMETADATAONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputOutputConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InputOutputConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputOutputConfig::GetClassData() const { return &_class_data_; }

void InputOutputConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InputOutputConfig *>(to)->MergeFrom(
      static_cast<const InputOutputConfig &>(from));
}


void InputOutputConfig::MergeFrom(const InputOutputConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.InputOutputConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_database_wildcard(from._internal_database_wildcard());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_query_wildcard(from._internal_query_wildcard());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_output_sstable_wildcard(from._internal_output_sstable_wildcard());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_hashed_database_wildcard(from._internal_hashed_database_wildcard());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_tokenized_database_wildcard(from._internal_tokenized_database_wildcard());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_fixed_point_database_wildcard(from._internal_fixed_point_database_wildcard());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_preprocessed_artifacts_dir(from._internal_preprocessed_artifacts_dir());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_memory_consumption_estimate_filename(from._internal_memory_consumption_estimate_filename());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_query_preprocessing_function()->::research_scann::InputOutputConfig_PreprocessingFunction::MergeFrom(from._internal_query_preprocessing_function());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_pure_dynamic_config()->::research_scann::InputOutputConfig_PureDynamicConfig::MergeFrom(from._internal_pure_dynamic_config());
    }
    if (cached_has_bits & 0x00000400u) {
      dimensionality_ = from.dimensionality_;
    }
    if (cached_has_bits & 0x00000800u) {
      norm_type_ = from.norm_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      allow_two_pass_read_ = from.allow_two_pass_read_;
    }
    if (cached_has_bits & 0x00002000u) {
      non_negative_ = from.non_negative_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_dense_ = from.is_dense_;
    }
    if (cached_has_bits & 0x00008000u) {
      saturate_ = from.saturate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      artifacts_naming_option_ = from.artifacts_naming_option_;
    }
    if (cached_has_bits & 0x00020000u) {
      in_memory_data_type_ = from.in_memory_data_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.IncrementalUpdateMetadataOneof_case()) {
    case kIncrementalUpdateMetadataLocation: {
      _internal_set_incremental_update_metadata_location(from._internal_incremental_update_metadata_location());
      break;
    }
    case kIncrementalUpdateMetadata: {
      _internal_mutable_incremental_update_metadata()->::research_scann::IncrementalUpdateMetadata::MergeFrom(from._internal_incremental_update_metadata());
      break;
    }
    case INCREMENTALUPDATEMETADATAONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputOutputConfig::CopyFrom(const InputOutputConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.InputOutputConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputOutputConfig::IsInitialized() const {
  return true;
}

void InputOutputConfig::InternalSwap(InputOutputConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &database_wildcard_, GetArenaForAllocation(),
      &other->database_wildcard_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &query_wildcard_, GetArenaForAllocation(),
      &other->query_wildcard_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_sstable_wildcard_, GetArenaForAllocation(),
      &other->output_sstable_wildcard_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hashed_database_wildcard_, GetArenaForAllocation(),
      &other->hashed_database_wildcard_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tokenized_database_wildcard_, GetArenaForAllocation(),
      &other->tokenized_database_wildcard_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fixed_point_database_wildcard_, GetArenaForAllocation(),
      &other->fixed_point_database_wildcard_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &preprocessed_artifacts_dir_, GetArenaForAllocation(),
      &other->preprocessed_artifacts_dir_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memory_consumption_estimate_filename_, GetArenaForAllocation(),
      &other->memory_consumption_estimate_filename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputOutputConfig, artifacts_naming_option_)
      + sizeof(InputOutputConfig::artifacts_naming_option_)
      - PROTOBUF_FIELD_OFFSET(InputOutputConfig, query_preprocessing_function_)>(
          reinterpret_cast<char*>(&query_preprocessing_function_),
          reinterpret_cast<char*>(&other->query_preprocessing_function_));
  swap(in_memory_data_type_, other->in_memory_data_type_);
  swap(IncrementalUpdateMetadataOneof_, other->IncrementalUpdateMetadataOneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputOutputConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2fproto_2finput_5foutput_2eproto_getter, &descriptor_table_scann_2fproto_2finput_5foutput_2eproto_once,
      file_level_metadata_scann_2fproto_2finput_5foutput_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::InputOutputConfig_PureDynamicConfig* Arena::CreateMaybeMessage< ::research_scann::InputOutputConfig_PureDynamicConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::InputOutputConfig_PureDynamicConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::InputOutputConfig_PreprocessingFunction* Arena::CreateMaybeMessage< ::research_scann::InputOutputConfig_PreprocessingFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::InputOutputConfig_PreprocessingFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::InputOutputConfig* Arena::CreateMaybeMessage< ::research_scann::InputOutputConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::InputOutputConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
