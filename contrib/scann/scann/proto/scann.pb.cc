// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/scann.proto

#include "scann/proto/scann.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace research_scann {
constexpr ScannConfig::ScannConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_search_method_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dataset_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , distance_measure_(nullptr)
  , input_output_(nullptr)
  , brute_force_(nullptr)
  , partitioning_(nullptr)
  , hash_(nullptr)
  , exact_reordering_(nullptr)
  , metadata_(nullptr)
  , crowding_(nullptr)
  , disjoint_restrict_token_(nullptr)
  , v3_restricts_(nullptr)
  , restricts_(nullptr)
  , search_paradigm_(0)

  , search_type_(0)

  , num_single_shard_neighbors_(0)
  , restricts_enabled_(false)
  , num_neighbors_(2147483647)
  , epsilon_distance_(std::numeric_limits<float>::infinity()){}
struct ScannConfigDefaultTypeInternal {
  constexpr ScannConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScannConfigDefaultTypeInternal() {}
  union {
    ScannConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScannConfigDefaultTypeInternal _ScannConfig_default_instance_;
}  // namespace research_scann
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2fproto_2fscann_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scann_2fproto_2fscann_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2fproto_2fscann_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2fproto_2fscann_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, dataset_name_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, num_neighbors_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, epsilon_distance_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, restricts_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, restricts_enabled_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, v3_restricts_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, crowding_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, distance_measure_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, exact_reordering_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, input_output_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, brute_force_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, partitioning_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, hash_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, metadata_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, num_single_shard_neighbors_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, custom_search_method_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, disjoint_restrict_token_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, search_paradigm_),
  PROTOBUF_FIELD_OFFSET(::research_scann::ScannConfig, search_type_),
  1,
  17,
  18,
  12,
  16,
  11,
  9,
  2,
  7,
  3,
  4,
  5,
  6,
  8,
  15,
  0,
  10,
  13,
  14,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 24, sizeof(::research_scann::ScannConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_ScannConfig_default_instance_),
};

const char descriptor_table_protodef_scann_2fproto_2fscann_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027scann/proto/scann.proto\022\016research_scan"
  "n\032\035scann/proto/brute_force.proto\032\032scann/"
  "proto/crowding.proto\032)scann/proto/disjoi"
  "nt_restrict_token.proto\032\"scann/proto/dis"
  "tance_measure.proto\032\"scann/proto/exact_r"
  "eordering.proto\032\026scann/proto/hash.proto\032"
  "\036scann/proto/input_output.proto\032\032scann/p"
  "roto/metadata.proto\032\036scann/proto/partiti"
  "oning.proto\032\033scann/proto/restricts.proto"
  "\"\232\013\n\013ScannConfig\022\024\n\014dataset_name\030  \001(\t\022!"
  "\n\rnum_neighbors\030\003 \001(\005:\n2147483647\022\035\n\020eps"
  "ilon_distance\030\004 \001(\002:\003inf\0222\n\trestricts\030\' "
  "\001(\0132\037.research_scann.RestrictsConfig\022 \n\021"
  "restricts_enabled\030\030 \001(\010:\005false\0227\n\014v3_res"
  "tricts\030% \001(\0132!.research_scann.V3Restrict"
  "sConfig\022*\n\010crowding\030\035 \001(\0132\030.research_sca"
  "nn.Crowding\022\?\n\020distance_measure\030\005 \001(\0132%."
  "research_scann.DistanceMeasureConfig\0229\n\020"
  "exact_reordering\030\021 \001(\0132\037.research_scann."
  "ExactReordering\0227\n\014input_output\030\006 \001(\0132!."
  "research_scann.InputOutputConfig\0225\n\013brut"
  "e_force\030\007 \001(\0132 .research_scann.BruteForc"
  "eConfig\0228\n\014partitioning\030\010 \001(\0132\".research"
  "_scann.PartitioningConfig\022(\n\004hash\030\r \001(\0132"
  "\032.research_scann.HashConfig\0220\n\010metadata\030"
  "\024 \001(\0132\036.research_scann.MetadataConfig\022\"\n"
  "\032num_single_shard_neighbors\030\025 \001(\005\022\034\n\024cus"
  "tom_search_method\030\026 \001(\014\022F\n\027disjoint_rest"
  "rict_token\030\037 \001(\0132%.research_scann.Disjoi"
  "ntRestrictToken\022C\n\017search_paradigm\030\001 \001(\016"
  "2*.research_scann.ScannConfig.SearchPara"
  "digm\022;\n\013search_type\030\002 \001(\0162&.research_sca"
  "nn.ScannConfig.SearchType\"2\n\016SearchParad"
  "igm\022\022\n\016QUERY_DATABASE\020\000\022\014\n\010ALL_PAIR\020\001\"*\n"
  "\nSearchType\022\007\n\003KNN\020\000\022\007\n\003ENN\020\001\022\n\n\006HYBRID\020"
  "\002*\t\010\350\007\020\200\200\200\200\002J\004\010\027\020\030J\004\010\013\020\014J\004\010\016\020\017J\004\010\017\020\020J\004\010\023"
  "\020\024J\004\010\032\020\033J\004\010\033\020\034J\004\010\034\020\035J\004\010\036\020\037J\004\010\"\020#J\004\010#\020$J\004"
  "\010$\020%J\004\010&\020\'J\004\010(\020)J\004\010\020\020\021J\004\010!\020\"J\004\010\022\020\023J\004\010\031\020\032"
  "R\010all_pairR\032offline_distributed_configR\017"
  "chunked_hammingR\017sparse_logisticR\036genera"
  "lized_hash_search_configR\017random_searche"
  "rR\033sparse_dense_hybrid_batchedR\016inverted"
  "_indexR\023incremental_updatesR\013auto_tuning"
  "R\026chunked_inverted_indexR\025legacy_inverte"
  "d_indexR\034pruned_inverted_index_cosine"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2fproto_2fscann_2eproto_deps[10] = {
  &::descriptor_table_scann_2fproto_2fbrute_5fforce_2eproto,
  &::descriptor_table_scann_2fproto_2fcrowding_2eproto,
  &::descriptor_table_scann_2fproto_2fdisjoint_5frestrict_5ftoken_2eproto,
  &::descriptor_table_scann_2fproto_2fdistance_5fmeasure_2eproto,
  &::descriptor_table_scann_2fproto_2fexact_5freordering_2eproto,
  &::descriptor_table_scann_2fproto_2fhash_2eproto,
  &::descriptor_table_scann_2fproto_2finput_5foutput_2eproto,
  &::descriptor_table_scann_2fproto_2fmetadata_2eproto,
  &::descriptor_table_scann_2fproto_2fpartitioning_2eproto,
  &::descriptor_table_scann_2fproto_2frestricts_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2fproto_2fscann_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fscann_2eproto = {
  false, false, 1797, descriptor_table_protodef_scann_2fproto_2fscann_2eproto, "scann/proto/scann.proto", 
  &descriptor_table_scann_2fproto_2fscann_2eproto_once, descriptor_table_scann_2fproto_2fscann_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_scann_2fproto_2fscann_2eproto::offsets,
  file_level_metadata_scann_2fproto_2fscann_2eproto, file_level_enum_descriptors_scann_2fproto_2fscann_2eproto, file_level_service_descriptors_scann_2fproto_2fscann_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_scann_2fproto_2fscann_2eproto_getter() {
  return &descriptor_table_scann_2fproto_2fscann_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_scann_2fproto_2fscann_2eproto(&descriptor_table_scann_2fproto_2fscann_2eproto);
namespace research_scann {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScannConfig_SearchParadigm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2fscann_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2fscann_2eproto[0];
}
bool ScannConfig_SearchParadigm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ScannConfig_SearchParadigm ScannConfig::QUERY_DATABASE;
constexpr ScannConfig_SearchParadigm ScannConfig::ALL_PAIR;
constexpr ScannConfig_SearchParadigm ScannConfig::SearchParadigm_MIN;
constexpr ScannConfig_SearchParadigm ScannConfig::SearchParadigm_MAX;
constexpr int ScannConfig::SearchParadigm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScannConfig_SearchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scann_2fproto_2fscann_2eproto);
  return file_level_enum_descriptors_scann_2fproto_2fscann_2eproto[1];
}
bool ScannConfig_SearchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ScannConfig_SearchType ScannConfig::KNN;
constexpr ScannConfig_SearchType ScannConfig::ENN;
constexpr ScannConfig_SearchType ScannConfig::HYBRID;
constexpr ScannConfig_SearchType ScannConfig::SearchType_MIN;
constexpr ScannConfig_SearchType ScannConfig::SearchType_MAX;
constexpr int ScannConfig::SearchType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ScannConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScannConfig>()._has_bits_);
  static void set_has_dataset_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_neighbors(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_epsilon_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::research_scann::RestrictsConfig& restricts(const ScannConfig* msg);
  static void set_has_restricts(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_restricts_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::research_scann::V3RestrictsConfig& v3_restricts(const ScannConfig* msg);
  static void set_has_v3_restricts(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::research_scann::Crowding& crowding(const ScannConfig* msg);
  static void set_has_crowding(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::research_scann::DistanceMeasureConfig& distance_measure(const ScannConfig* msg);
  static void set_has_distance_measure(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::research_scann::ExactReordering& exact_reordering(const ScannConfig* msg);
  static void set_has_exact_reordering(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::research_scann::InputOutputConfig& input_output(const ScannConfig* msg);
  static void set_has_input_output(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::research_scann::BruteForceConfig& brute_force(const ScannConfig* msg);
  static void set_has_brute_force(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::research_scann::PartitioningConfig& partitioning(const ScannConfig* msg);
  static void set_has_partitioning(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::research_scann::HashConfig& hash(const ScannConfig* msg);
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::research_scann::MetadataConfig& metadata(const ScannConfig* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_num_single_shard_neighbors(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_custom_search_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::research_scann::DisjointRestrictToken& disjoint_restrict_token(const ScannConfig* msg);
  static void set_has_disjoint_restrict_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_search_paradigm(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_search_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::research_scann::RestrictsConfig&
ScannConfig::_Internal::restricts(const ScannConfig* msg) {
  return *msg->restricts_;
}
const ::research_scann::V3RestrictsConfig&
ScannConfig::_Internal::v3_restricts(const ScannConfig* msg) {
  return *msg->v3_restricts_;
}
const ::research_scann::Crowding&
ScannConfig::_Internal::crowding(const ScannConfig* msg) {
  return *msg->crowding_;
}
const ::research_scann::DistanceMeasureConfig&
ScannConfig::_Internal::distance_measure(const ScannConfig* msg) {
  return *msg->distance_measure_;
}
const ::research_scann::ExactReordering&
ScannConfig::_Internal::exact_reordering(const ScannConfig* msg) {
  return *msg->exact_reordering_;
}
const ::research_scann::InputOutputConfig&
ScannConfig::_Internal::input_output(const ScannConfig* msg) {
  return *msg->input_output_;
}
const ::research_scann::BruteForceConfig&
ScannConfig::_Internal::brute_force(const ScannConfig* msg) {
  return *msg->brute_force_;
}
const ::research_scann::PartitioningConfig&
ScannConfig::_Internal::partitioning(const ScannConfig* msg) {
  return *msg->partitioning_;
}
const ::research_scann::HashConfig&
ScannConfig::_Internal::hash(const ScannConfig* msg) {
  return *msg->hash_;
}
const ::research_scann::MetadataConfig&
ScannConfig::_Internal::metadata(const ScannConfig* msg) {
  return *msg->metadata_;
}
const ::research_scann::DisjointRestrictToken&
ScannConfig::_Internal::disjoint_restrict_token(const ScannConfig* msg) {
  return *msg->disjoint_restrict_token_;
}
void ScannConfig::clear_restricts() {
  if (restricts_ != nullptr) restricts_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void ScannConfig::clear_v3_restricts() {
  if (v3_restricts_ != nullptr) v3_restricts_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void ScannConfig::clear_crowding() {
  if (crowding_ != nullptr) crowding_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void ScannConfig::clear_distance_measure() {
  if (distance_measure_ != nullptr) distance_measure_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ScannConfig::clear_exact_reordering() {
  if (exact_reordering_ != nullptr) exact_reordering_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ScannConfig::clear_input_output() {
  if (input_output_ != nullptr) input_output_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ScannConfig::clear_brute_force() {
  if (brute_force_ != nullptr) brute_force_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ScannConfig::clear_partitioning() {
  if (partitioning_ != nullptr) partitioning_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ScannConfig::clear_hash() {
  if (hash_ != nullptr) hash_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ScannConfig::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void ScannConfig::clear_disjoint_restrict_token() {
  if (disjoint_restrict_token_ != nullptr) disjoint_restrict_token_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
ScannConfig::ScannConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.ScannConfig)
}
ScannConfig::ScannConfig(const ScannConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  custom_search_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_search_method()) {
    custom_search_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_search_method(), 
      GetArenaForAllocation());
  }
  dataset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dataset_name()) {
    dataset_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_distance_measure()) {
    distance_measure_ = new ::research_scann::DistanceMeasureConfig(*from.distance_measure_);
  } else {
    distance_measure_ = nullptr;
  }
  if (from._internal_has_input_output()) {
    input_output_ = new ::research_scann::InputOutputConfig(*from.input_output_);
  } else {
    input_output_ = nullptr;
  }
  if (from._internal_has_brute_force()) {
    brute_force_ = new ::research_scann::BruteForceConfig(*from.brute_force_);
  } else {
    brute_force_ = nullptr;
  }
  if (from._internal_has_partitioning()) {
    partitioning_ = new ::research_scann::PartitioningConfig(*from.partitioning_);
  } else {
    partitioning_ = nullptr;
  }
  if (from._internal_has_hash()) {
    hash_ = new ::research_scann::HashConfig(*from.hash_);
  } else {
    hash_ = nullptr;
  }
  if (from._internal_has_exact_reordering()) {
    exact_reordering_ = new ::research_scann::ExactReordering(*from.exact_reordering_);
  } else {
    exact_reordering_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::research_scann::MetadataConfig(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_crowding()) {
    crowding_ = new ::research_scann::Crowding(*from.crowding_);
  } else {
    crowding_ = nullptr;
  }
  if (from._internal_has_disjoint_restrict_token()) {
    disjoint_restrict_token_ = new ::research_scann::DisjointRestrictToken(*from.disjoint_restrict_token_);
  } else {
    disjoint_restrict_token_ = nullptr;
  }
  if (from._internal_has_v3_restricts()) {
    v3_restricts_ = new ::research_scann::V3RestrictsConfig(*from.v3_restricts_);
  } else {
    v3_restricts_ = nullptr;
  }
  if (from._internal_has_restricts()) {
    restricts_ = new ::research_scann::RestrictsConfig(*from.restricts_);
  } else {
    restricts_ = nullptr;
  }
  ::memcpy(&search_paradigm_, &from.search_paradigm_,
    static_cast<size_t>(reinterpret_cast<char*>(&epsilon_distance_) -
    reinterpret_cast<char*>(&search_paradigm_)) + sizeof(epsilon_distance_));
  // @@protoc_insertion_point(copy_constructor:research_scann.ScannConfig)
}

inline void ScannConfig::SharedCtor() {
custom_search_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dataset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&distance_measure_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&restricts_enabled_) -
    reinterpret_cast<char*>(&distance_measure_)) + sizeof(restricts_enabled_));
num_neighbors_ = 2147483647;
epsilon_distance_ = std::numeric_limits<float>::infinity();
}

ScannConfig::~ScannConfig() {
  // @@protoc_insertion_point(destructor:research_scann.ScannConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScannConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  custom_search_method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete distance_measure_;
  if (this != internal_default_instance()) delete input_output_;
  if (this != internal_default_instance()) delete brute_force_;
  if (this != internal_default_instance()) delete partitioning_;
  if (this != internal_default_instance()) delete hash_;
  if (this != internal_default_instance()) delete exact_reordering_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete crowding_;
  if (this != internal_default_instance()) delete disjoint_restrict_token_;
  if (this != internal_default_instance()) delete v3_restricts_;
  if (this != internal_default_instance()) delete restricts_;
}

void ScannConfig::ArenaDtor(void* object) {
  ScannConfig* _this = reinterpret_cast< ScannConfig* >(object);
  (void)_this;
}
void ScannConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScannConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScannConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.ScannConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      custom_search_method_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      dataset_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(distance_measure_ != nullptr);
      distance_measure_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(input_output_ != nullptr);
      input_output_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(brute_force_ != nullptr);
      brute_force_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(partitioning_ != nullptr);
      partitioning_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(hash_ != nullptr);
      hash_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(exact_reordering_ != nullptr);
      exact_reordering_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(crowding_ != nullptr);
      crowding_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(disjoint_restrict_token_ != nullptr);
      disjoint_restrict_token_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(v3_restricts_ != nullptr);
      v3_restricts_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(restricts_ != nullptr);
      restricts_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&search_paradigm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_single_shard_neighbors_) -
        reinterpret_cast<char*>(&search_paradigm_)) + sizeof(num_single_shard_neighbors_));
  }
  if (cached_has_bits & 0x00070000u) {
    restricts_enabled_ = false;
    num_neighbors_ = 2147483647;
    epsilon_distance_ = std::numeric_limits<float>::infinity();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScannConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .research_scann.ScannConfig.SearchParadigm search_paradigm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::ScannConfig_SearchParadigm_IsValid(val))) {
            _internal_set_search_paradigm(static_cast<::research_scann::ScannConfig_SearchParadigm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .research_scann.ScannConfig.SearchType search_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::ScannConfig_SearchType_IsValid(val))) {
            _internal_set_search_type(static_cast<::research_scann::ScannConfig_SearchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 num_neighbors = 3 [default = 2147483647];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_neighbors(&has_bits);
          num_neighbors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float epsilon_distance = 4 [default = inf];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_epsilon_distance(&has_bits);
          epsilon_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.DistanceMeasureConfig distance_measure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_distance_measure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.InputOutputConfig input_output = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.BruteForceConfig brute_force = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_brute_force(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.PartitioningConfig partitioning = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_partitioning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.HashConfig hash = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.ExactReordering exact_reordering = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_exact_reordering(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.MetadataConfig metadata = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_single_shard_neighbors = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_num_single_shard_neighbors(&has_bits);
          num_single_shard_neighbors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes custom_search_method = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_custom_search_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool restricts_enabled = 24 [default = false];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_restricts_enabled(&has_bits);
          restricts_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.Crowding crowding = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_crowding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.DisjointRestrictToken disjoint_restrict_token = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_disjoint_restrict_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dataset_name = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_dataset_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "research_scann.ScannConfig.dataset_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.V3RestrictsConfig v3_restricts = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_v3_restricts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.RestrictsConfig restricts = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_restricts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScannConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.ScannConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.ScannConfig.SearchParadigm search_paradigm = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_search_paradigm(), target);
  }

  // optional .research_scann.ScannConfig.SearchType search_type = 2;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_search_type(), target);
  }

  // optional int32 num_neighbors = 3 [default = 2147483647];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_neighbors(), target);
  }

  // optional float epsilon_distance = 4 [default = inf];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_epsilon_distance(), target);
  }

  // optional .research_scann.DistanceMeasureConfig distance_measure = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::distance_measure(this), target, stream);
  }

  // optional .research_scann.InputOutputConfig input_output = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::input_output(this), target, stream);
  }

  // optional .research_scann.BruteForceConfig brute_force = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::brute_force(this), target, stream);
  }

  // optional .research_scann.PartitioningConfig partitioning = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::partitioning(this), target, stream);
  }

  // optional .research_scann.HashConfig hash = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::hash(this), target, stream);
  }

  // optional .research_scann.ExactReordering exact_reordering = 17;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::exact_reordering(this), target, stream);
  }

  // optional .research_scann.MetadataConfig metadata = 20;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::metadata(this), target, stream);
  }

  // optional int32 num_single_shard_neighbors = 21;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_num_single_shard_neighbors(), target);
  }

  // optional bytes custom_search_method = 22;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_custom_search_method(), target);
  }

  // optional bool restricts_enabled = 24 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_restricts_enabled(), target);
  }

  // optional .research_scann.Crowding crowding = 29;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::crowding(this), target, stream);
  }

  // optional .research_scann.DisjointRestrictToken disjoint_restrict_token = 31;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::disjoint_restrict_token(this), target, stream);
  }

  // optional string dataset_name = 32;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dataset_name().data(), static_cast<int>(this->_internal_dataset_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "research_scann.ScannConfig.dataset_name");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_dataset_name(), target);
  }

  // optional .research_scann.V3RestrictsConfig v3_restricts = 37;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::v3_restricts(this), target, stream);
  }

  // optional .research_scann.RestrictsConfig restricts = 39;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::restricts(this), target, stream);
  }

  // Extension range [1000, 536870912)
  target = _extensions_._InternalSerialize(
      1000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.ScannConfig)
  return target;
}

size_t ScannConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.ScannConfig)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes custom_search_method = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_custom_search_method());
    }

    // optional string dataset_name = 32;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dataset_name());
    }

    // optional .research_scann.DistanceMeasureConfig distance_measure = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *distance_measure_);
    }

    // optional .research_scann.InputOutputConfig input_output = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_output_);
    }

    // optional .research_scann.BruteForceConfig brute_force = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brute_force_);
    }

    // optional .research_scann.PartitioningConfig partitioning = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *partitioning_);
    }

    // optional .research_scann.HashConfig hash = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hash_);
    }

    // optional .research_scann.ExactReordering exact_reordering = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exact_reordering_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .research_scann.MetadataConfig metadata = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .research_scann.Crowding crowding = 29;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crowding_);
    }

    // optional .research_scann.DisjointRestrictToken disjoint_restrict_token = 31;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disjoint_restrict_token_);
    }

    // optional .research_scann.V3RestrictsConfig v3_restricts = 37;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v3_restricts_);
    }

    // optional .research_scann.RestrictsConfig restricts = 39;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *restricts_);
    }

    // optional .research_scann.ScannConfig.SearchParadigm search_paradigm = 1;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_search_paradigm());
    }

    // optional .research_scann.ScannConfig.SearchType search_type = 2;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_search_type());
    }

    // optional int32 num_single_shard_neighbors = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_single_shard_neighbors());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool restricts_enabled = 24 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional int32 num_neighbors = 3 [default = 2147483647];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_neighbors());
    }

    // optional float epsilon_distance = 4 [default = inf];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScannConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScannConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScannConfig::GetClassData() const { return &_class_data_; }

void ScannConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ScannConfig *>(to)->MergeFrom(
      static_cast<const ScannConfig &>(from));
}


void ScannConfig::MergeFrom(const ScannConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.ScannConfig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_custom_search_method(from._internal_custom_search_method());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_dataset_name(from._internal_dataset_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_distance_measure()->::research_scann::DistanceMeasureConfig::MergeFrom(from._internal_distance_measure());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_input_output()->::research_scann::InputOutputConfig::MergeFrom(from._internal_input_output());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_brute_force()->::research_scann::BruteForceConfig::MergeFrom(from._internal_brute_force());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_partitioning()->::research_scann::PartitioningConfig::MergeFrom(from._internal_partitioning());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_hash()->::research_scann::HashConfig::MergeFrom(from._internal_hash());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_exact_reordering()->::research_scann::ExactReordering::MergeFrom(from._internal_exact_reordering());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_metadata()->::research_scann::MetadataConfig::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_crowding()->::research_scann::Crowding::MergeFrom(from._internal_crowding());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_disjoint_restrict_token()->::research_scann::DisjointRestrictToken::MergeFrom(from._internal_disjoint_restrict_token());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_v3_restricts()->::research_scann::V3RestrictsConfig::MergeFrom(from._internal_v3_restricts());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_restricts()->::research_scann::RestrictsConfig::MergeFrom(from._internal_restricts());
    }
    if (cached_has_bits & 0x00002000u) {
      search_paradigm_ = from.search_paradigm_;
    }
    if (cached_has_bits & 0x00004000u) {
      search_type_ = from.search_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      num_single_shard_neighbors_ = from.num_single_shard_neighbors_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      restricts_enabled_ = from.restricts_enabled_;
    }
    if (cached_has_bits & 0x00020000u) {
      num_neighbors_ = from.num_neighbors_;
    }
    if (cached_has_bits & 0x00040000u) {
      epsilon_distance_ = from.epsilon_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScannConfig::CopyFrom(const ScannConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.ScannConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScannConfig::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_partitioning()) {
    if (!partitioning_->IsInitialized()) return false;
  }
  if (_internal_has_hash()) {
    if (!hash_->IsInitialized()) return false;
  }
  return true;
}

void ScannConfig::InternalSwap(ScannConfig* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &custom_search_method_, GetArenaForAllocation(),
      &other->custom_search_method_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_name_, GetArenaForAllocation(),
      &other->dataset_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScannConfig, restricts_enabled_)
      + sizeof(ScannConfig::restricts_enabled_)
      - PROTOBUF_FIELD_OFFSET(ScannConfig, distance_measure_)>(
          reinterpret_cast<char*>(&distance_measure_),
          reinterpret_cast<char*>(&other->distance_measure_));
  swap(num_neighbors_, other->num_neighbors_);
  swap(epsilon_distance_, other->epsilon_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScannConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2fproto_2fscann_2eproto_getter, &descriptor_table_scann_2fproto_2fscann_2eproto_once,
      file_level_metadata_scann_2fproto_2fscann_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::ScannConfig* Arena::CreateMaybeMessage< ::research_scann::ScannConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::ScannConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
