// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/proto/incremental_updates.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fincremental_5fupdates_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fincremental_5fupdates_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2fproto_2fincremental_5fupdates_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2fproto_2fincremental_5fupdates_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2fproto_2fincremental_5fupdates_2eproto;
namespace research_scann {
class IncrementalUpdateConfig;
struct IncrementalUpdateConfigDefaultTypeInternal;
extern IncrementalUpdateConfigDefaultTypeInternal _IncrementalUpdateConfig_default_instance_;
class IncrementalUpdateConfig_Pubsub2;
struct IncrementalUpdateConfig_Pubsub2DefaultTypeInternal;
extern IncrementalUpdateConfig_Pubsub2DefaultTypeInternal _IncrementalUpdateConfig_Pubsub2_default_instance_;
class IncrementalUpdateConfig_Reindexing;
struct IncrementalUpdateConfig_ReindexingDefaultTypeInternal;
extern IncrementalUpdateConfig_ReindexingDefaultTypeInternal _IncrementalUpdateConfig_Reindexing_default_instance_;
class IncrementalUpdateMetadata;
struct IncrementalUpdateMetadataDefaultTypeInternal;
extern IncrementalUpdateMetadataDefaultTypeInternal _IncrementalUpdateMetadata_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::IncrementalUpdateConfig* Arena::CreateMaybeMessage<::research_scann::IncrementalUpdateConfig>(Arena*);
template<> ::research_scann::IncrementalUpdateConfig_Pubsub2* Arena::CreateMaybeMessage<::research_scann::IncrementalUpdateConfig_Pubsub2>(Arena*);
template<> ::research_scann::IncrementalUpdateConfig_Reindexing* Arena::CreateMaybeMessage<::research_scann::IncrementalUpdateConfig_Reindexing>(Arena*);
template<> ::research_scann::IncrementalUpdateMetadata* Arena::CreateMaybeMessage<::research_scann::IncrementalUpdateMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

// ===================================================================

class IncrementalUpdateConfig_Reindexing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.IncrementalUpdateConfig.Reindexing) */ {
 public:
  inline IncrementalUpdateConfig_Reindexing() : IncrementalUpdateConfig_Reindexing(nullptr) {}
  ~IncrementalUpdateConfig_Reindexing() override;
  explicit constexpr IncrementalUpdateConfig_Reindexing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncrementalUpdateConfig_Reindexing(const IncrementalUpdateConfig_Reindexing& from);
  IncrementalUpdateConfig_Reindexing(IncrementalUpdateConfig_Reindexing&& from) noexcept
    : IncrementalUpdateConfig_Reindexing() {
    *this = ::std::move(from);
  }

  inline IncrementalUpdateConfig_Reindexing& operator=(const IncrementalUpdateConfig_Reindexing& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncrementalUpdateConfig_Reindexing& operator=(IncrementalUpdateConfig_Reindexing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncrementalUpdateConfig_Reindexing& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncrementalUpdateConfig_Reindexing* internal_default_instance() {
    return reinterpret_cast<const IncrementalUpdateConfig_Reindexing*>(
               &_IncrementalUpdateConfig_Reindexing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IncrementalUpdateConfig_Reindexing& a, IncrementalUpdateConfig_Reindexing& b) {
    a.Swap(&b);
  }
  inline void Swap(IncrementalUpdateConfig_Reindexing* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncrementalUpdateConfig_Reindexing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncrementalUpdateConfig_Reindexing* New() const final {
    return new IncrementalUpdateConfig_Reindexing();
  }

  IncrementalUpdateConfig_Reindexing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncrementalUpdateConfig_Reindexing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncrementalUpdateConfig_Reindexing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IncrementalUpdateConfig_Reindexing& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementalUpdateConfig_Reindexing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.IncrementalUpdateConfig.Reindexing";
  }
  protected:
  explicit IncrementalUpdateConfig_Reindexing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableManualRetrainingAndReindexingFieldNumber = 1,
  };
  // optional bool enable_manual_retraining_and_reindexing = 1 [default = false];
  bool has_enable_manual_retraining_and_reindexing() const;
  private:
  bool _internal_has_enable_manual_retraining_and_reindexing() const;
  public:
  void clear_enable_manual_retraining_and_reindexing();
  bool enable_manual_retraining_and_reindexing() const;
  void set_enable_manual_retraining_and_reindexing(bool value);
  private:
  bool _internal_enable_manual_retraining_and_reindexing() const;
  void _internal_set_enable_manual_retraining_and_reindexing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:research_scann.IncrementalUpdateConfig.Reindexing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enable_manual_retraining_and_reindexing_;
  friend struct ::TableStruct_scann_2fproto_2fincremental_5fupdates_2eproto;
};
// -------------------------------------------------------------------

class IncrementalUpdateConfig_Pubsub2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.IncrementalUpdateConfig.Pubsub2) */ {
 public:
  inline IncrementalUpdateConfig_Pubsub2() : IncrementalUpdateConfig_Pubsub2(nullptr) {}
  ~IncrementalUpdateConfig_Pubsub2() override;
  explicit constexpr IncrementalUpdateConfig_Pubsub2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncrementalUpdateConfig_Pubsub2(const IncrementalUpdateConfig_Pubsub2& from);
  IncrementalUpdateConfig_Pubsub2(IncrementalUpdateConfig_Pubsub2&& from) noexcept
    : IncrementalUpdateConfig_Pubsub2() {
    *this = ::std::move(from);
  }

  inline IncrementalUpdateConfig_Pubsub2& operator=(const IncrementalUpdateConfig_Pubsub2& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncrementalUpdateConfig_Pubsub2& operator=(IncrementalUpdateConfig_Pubsub2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncrementalUpdateConfig_Pubsub2& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncrementalUpdateConfig_Pubsub2* internal_default_instance() {
    return reinterpret_cast<const IncrementalUpdateConfig_Pubsub2*>(
               &_IncrementalUpdateConfig_Pubsub2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IncrementalUpdateConfig_Pubsub2& a, IncrementalUpdateConfig_Pubsub2& b) {
    a.Swap(&b);
  }
  inline void Swap(IncrementalUpdateConfig_Pubsub2* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncrementalUpdateConfig_Pubsub2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncrementalUpdateConfig_Pubsub2* New() const final {
    return new IncrementalUpdateConfig_Pubsub2();
  }

  IncrementalUpdateConfig_Pubsub2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncrementalUpdateConfig_Pubsub2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncrementalUpdateConfig_Pubsub2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IncrementalUpdateConfig_Pubsub2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementalUpdateConfig_Pubsub2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.IncrementalUpdateConfig.Pubsub2";
  }
  protected:
  explicit IncrementalUpdateConfig_Pubsub2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kSubscriberIdBaseFieldNumber = 2,
    kPublisherIdBaseFieldNumber = 3,
    kFilterFieldNumber = 6,
    kModTermFilterSignatureFieldNumber = 8,
    kUseModTermFilterFieldNumber = 7,
    kSeekBackEnabledFieldNumber = 4,
    kPublishRpcUpdatesFieldNumber = 5,
  };
  // optional string topic = 1;
  bool has_topic() const;
  private:
  bool _internal_has_topic() const;
  public:
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_MUST_USE_RESULT std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // optional string subscriber_id_base = 2;
  bool has_subscriber_id_base() const;
  private:
  bool _internal_has_subscriber_id_base() const;
  public:
  void clear_subscriber_id_base();
  const std::string& subscriber_id_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subscriber_id_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subscriber_id_base();
  PROTOBUF_MUST_USE_RESULT std::string* release_subscriber_id_base();
  void set_allocated_subscriber_id_base(std::string* subscriber_id_base);
  private:
  const std::string& _internal_subscriber_id_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscriber_id_base(const std::string& value);
  std::string* _internal_mutable_subscriber_id_base();
  public:

  // optional string publisher_id_base = 3;
  bool has_publisher_id_base() const;
  private:
  bool _internal_has_publisher_id_base() const;
  public:
  void clear_publisher_id_base();
  const std::string& publisher_id_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_publisher_id_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_publisher_id_base();
  PROTOBUF_MUST_USE_RESULT std::string* release_publisher_id_base();
  void set_allocated_publisher_id_base(std::string* publisher_id_base);
  private:
  const std::string& _internal_publisher_id_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publisher_id_base(const std::string& value);
  std::string* _internal_mutable_publisher_id_base();
  public:

  // optional string filter = 6;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_MUST_USE_RESULT std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // optional string mod_term_filter_signature = 8 [default = "fprint"];
  bool has_mod_term_filter_signature() const;
  private:
  bool _internal_has_mod_term_filter_signature() const;
  public:
  void clear_mod_term_filter_signature();
  const std::string& mod_term_filter_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mod_term_filter_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mod_term_filter_signature();
  PROTOBUF_MUST_USE_RESULT std::string* release_mod_term_filter_signature();
  void set_allocated_mod_term_filter_signature(std::string* mod_term_filter_signature);
  private:
  const std::string& _internal_mod_term_filter_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mod_term_filter_signature(const std::string& value);
  std::string* _internal_mutable_mod_term_filter_signature();
  public:

  // optional bool use_mod_term_filter = 7 [default = false];
  bool has_use_mod_term_filter() const;
  private:
  bool _internal_has_use_mod_term_filter() const;
  public:
  void clear_use_mod_term_filter();
  bool use_mod_term_filter() const;
  void set_use_mod_term_filter(bool value);
  private:
  bool _internal_use_mod_term_filter() const;
  void _internal_set_use_mod_term_filter(bool value);
  public:

  // optional bool seek_back_enabled = 4 [default = true];
  bool has_seek_back_enabled() const;
  private:
  bool _internal_has_seek_back_enabled() const;
  public:
  void clear_seek_back_enabled();
  bool seek_back_enabled() const;
  void set_seek_back_enabled(bool value);
  private:
  bool _internal_seek_back_enabled() const;
  void _internal_set_seek_back_enabled(bool value);
  public:

  // optional bool publish_rpc_updates = 5 [default = true];
  bool has_publish_rpc_updates() const;
  private:
  bool _internal_has_publish_rpc_updates() const;
  public:
  void clear_publish_rpc_updates();
  bool publish_rpc_updates() const;
  void set_publish_rpc_updates(bool value);
  private:
  bool _internal_publish_rpc_updates() const;
  void _internal_set_publish_rpc_updates(bool value);
  public:

  // @@protoc_insertion_point(class_scope:research_scann.IncrementalUpdateConfig.Pubsub2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscriber_id_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publisher_id_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_mod_term_filter_signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mod_term_filter_signature_;
  bool use_mod_term_filter_;
  bool seek_back_enabled_;
  bool publish_rpc_updates_;
  friend struct ::TableStruct_scann_2fproto_2fincremental_5fupdates_2eproto;
};
// -------------------------------------------------------------------

class IncrementalUpdateConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.IncrementalUpdateConfig) */ {
 public:
  inline IncrementalUpdateConfig() : IncrementalUpdateConfig(nullptr) {}
  ~IncrementalUpdateConfig() override;
  explicit constexpr IncrementalUpdateConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncrementalUpdateConfig(const IncrementalUpdateConfig& from);
  IncrementalUpdateConfig(IncrementalUpdateConfig&& from) noexcept
    : IncrementalUpdateConfig() {
    *this = ::std::move(from);
  }

  inline IncrementalUpdateConfig& operator=(const IncrementalUpdateConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncrementalUpdateConfig& operator=(IncrementalUpdateConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncrementalUpdateConfig& default_instance() {
    return *internal_default_instance();
  }
  enum DurabilityReplicationCase {
    kPubsub2 = 3,
    DURABILITYREPLICATION_NOT_SET = 0,
  };

  static inline const IncrementalUpdateConfig* internal_default_instance() {
    return reinterpret_cast<const IncrementalUpdateConfig*>(
               &_IncrementalUpdateConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IncrementalUpdateConfig& a, IncrementalUpdateConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(IncrementalUpdateConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncrementalUpdateConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncrementalUpdateConfig* New() const final {
    return new IncrementalUpdateConfig();
  }

  IncrementalUpdateConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncrementalUpdateConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncrementalUpdateConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IncrementalUpdateConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementalUpdateConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.IncrementalUpdateConfig";
  }
  protected:
  explicit IncrementalUpdateConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IncrementalUpdateConfig_Reindexing Reindexing;
  typedef IncrementalUpdateConfig_Pubsub2 Pubsub2;

  // accessors -------------------------------------------------------

  enum : int {
    kSharderFieldNumber = 6,
    kLastUpdateTimestampLifetimeFieldNumber = 2,
    kStartupCatchupThresholdFieldNumber = 7,
    kReindexingFieldNumber = 9,
    kNumDatapointsToReserveFieldNumber = 5,
    kEnabledFieldNumber = 1,
    kEnableExpirationTimestampsFieldNumber = 4,
    kNumUpdatesBetweenGarbageCollectionsFieldNumber = 8,
    kPubsub2FieldNumber = 3,
  };
  // optional string sharder = 6 [default = ""];
  bool has_sharder() const;
  private:
  bool _internal_has_sharder() const;
  public:
  void clear_sharder();
  const std::string& sharder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sharder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sharder();
  PROTOBUF_MUST_USE_RESULT std::string* release_sharder();
  void set_allocated_sharder(std::string* sharder);
  private:
  const std::string& _internal_sharder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sharder(const std::string& value);
  std::string* _internal_mutable_sharder();
  public:

  // optional .google.protobuf.Duration last_update_timestamp_lifetime = 2;
  bool has_last_update_timestamp_lifetime() const;
  private:
  bool _internal_has_last_update_timestamp_lifetime() const;
  public:
  void clear_last_update_timestamp_lifetime();
  const PROTOBUF_NAMESPACE_ID::Duration& last_update_timestamp_lifetime() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Duration* release_last_update_timestamp_lifetime();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_last_update_timestamp_lifetime();
  void set_allocated_last_update_timestamp_lifetime(PROTOBUF_NAMESPACE_ID::Duration* last_update_timestamp_lifetime);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_last_update_timestamp_lifetime() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_last_update_timestamp_lifetime();
  public:
  void unsafe_arena_set_allocated_last_update_timestamp_lifetime(
      PROTOBUF_NAMESPACE_ID::Duration* last_update_timestamp_lifetime);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_last_update_timestamp_lifetime();

  // optional .google.protobuf.Duration startup_catchup_threshold = 7;
  bool has_startup_catchup_threshold() const;
  private:
  bool _internal_has_startup_catchup_threshold() const;
  public:
  void clear_startup_catchup_threshold();
  const PROTOBUF_NAMESPACE_ID::Duration& startup_catchup_threshold() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Duration* release_startup_catchup_threshold();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_startup_catchup_threshold();
  void set_allocated_startup_catchup_threshold(PROTOBUF_NAMESPACE_ID::Duration* startup_catchup_threshold);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_startup_catchup_threshold() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_startup_catchup_threshold();
  public:
  void unsafe_arena_set_allocated_startup_catchup_threshold(
      PROTOBUF_NAMESPACE_ID::Duration* startup_catchup_threshold);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_startup_catchup_threshold();

  // optional .research_scann.IncrementalUpdateConfig.Reindexing reindexing = 9;
  bool has_reindexing() const;
  private:
  bool _internal_has_reindexing() const;
  public:
  void clear_reindexing();
  const ::research_scann::IncrementalUpdateConfig_Reindexing& reindexing() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::IncrementalUpdateConfig_Reindexing* release_reindexing();
  ::research_scann::IncrementalUpdateConfig_Reindexing* mutable_reindexing();
  void set_allocated_reindexing(::research_scann::IncrementalUpdateConfig_Reindexing* reindexing);
  private:
  const ::research_scann::IncrementalUpdateConfig_Reindexing& _internal_reindexing() const;
  ::research_scann::IncrementalUpdateConfig_Reindexing* _internal_mutable_reindexing();
  public:
  void unsafe_arena_set_allocated_reindexing(
      ::research_scann::IncrementalUpdateConfig_Reindexing* reindexing);
  ::research_scann::IncrementalUpdateConfig_Reindexing* unsafe_arena_release_reindexing();

  // optional uint64 num_datapoints_to_reserve = 5 [default = 0];
  bool has_num_datapoints_to_reserve() const;
  private:
  bool _internal_has_num_datapoints_to_reserve() const;
  public:
  void clear_num_datapoints_to_reserve();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_datapoints_to_reserve() const;
  void set_num_datapoints_to_reserve(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_datapoints_to_reserve() const;
  void _internal_set_num_datapoints_to_reserve(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool enabled = 1 [default = false];
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool enable_expiration_timestamps = 4 [default = false];
  bool has_enable_expiration_timestamps() const;
  private:
  bool _internal_has_enable_expiration_timestamps() const;
  public:
  void clear_enable_expiration_timestamps();
  bool enable_expiration_timestamps() const;
  void set_enable_expiration_timestamps(bool value);
  private:
  bool _internal_enable_expiration_timestamps() const;
  void _internal_set_enable_expiration_timestamps(bool value);
  public:

  // optional uint32 num_updates_between_garbage_collections = 8 [default = 100000];
  bool has_num_updates_between_garbage_collections() const;
  private:
  bool _internal_has_num_updates_between_garbage_collections() const;
  public:
  void clear_num_updates_between_garbage_collections();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_updates_between_garbage_collections() const;
  void set_num_updates_between_garbage_collections(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_updates_between_garbage_collections() const;
  void _internal_set_num_updates_between_garbage_collections(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .research_scann.IncrementalUpdateConfig.Pubsub2 pubsub2 = 3;
  bool has_pubsub2() const;
  private:
  bool _internal_has_pubsub2() const;
  public:
  void clear_pubsub2();
  const ::research_scann::IncrementalUpdateConfig_Pubsub2& pubsub2() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::IncrementalUpdateConfig_Pubsub2* release_pubsub2();
  ::research_scann::IncrementalUpdateConfig_Pubsub2* mutable_pubsub2();
  void set_allocated_pubsub2(::research_scann::IncrementalUpdateConfig_Pubsub2* pubsub2);
  private:
  const ::research_scann::IncrementalUpdateConfig_Pubsub2& _internal_pubsub2() const;
  ::research_scann::IncrementalUpdateConfig_Pubsub2* _internal_mutable_pubsub2();
  public:
  void unsafe_arena_set_allocated_pubsub2(
      ::research_scann::IncrementalUpdateConfig_Pubsub2* pubsub2);
  ::research_scann::IncrementalUpdateConfig_Pubsub2* unsafe_arena_release_pubsub2();

  void clear_DurabilityReplication();
  DurabilityReplicationCase DurabilityReplication_case() const;
  // @@protoc_insertion_point(class_scope:research_scann.IncrementalUpdateConfig)
 private:
  class _Internal;
  void set_has_pubsub2();

  inline bool has_DurabilityReplication() const;
  inline void clear_has_DurabilityReplication();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sharder_;
  PROTOBUF_NAMESPACE_ID::Duration* last_update_timestamp_lifetime_;
  PROTOBUF_NAMESPACE_ID::Duration* startup_catchup_threshold_;
  ::research_scann::IncrementalUpdateConfig_Reindexing* reindexing_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_datapoints_to_reserve_;
  bool enabled_;
  bool enable_expiration_timestamps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_updates_between_garbage_collections_;
  union DurabilityReplicationUnion {
    constexpr DurabilityReplicationUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::research_scann::IncrementalUpdateConfig_Pubsub2* pubsub2_;
  } DurabilityReplication_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_scann_2fproto_2fincremental_5fupdates_2eproto;
};
// -------------------------------------------------------------------

class IncrementalUpdateMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.IncrementalUpdateMetadata) */ {
 public:
  inline IncrementalUpdateMetadata() : IncrementalUpdateMetadata(nullptr) {}
  ~IncrementalUpdateMetadata() override;
  explicit constexpr IncrementalUpdateMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncrementalUpdateMetadata(const IncrementalUpdateMetadata& from);
  IncrementalUpdateMetadata(IncrementalUpdateMetadata&& from) noexcept
    : IncrementalUpdateMetadata() {
    *this = ::std::move(from);
  }

  inline IncrementalUpdateMetadata& operator=(const IncrementalUpdateMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncrementalUpdateMetadata& operator=(IncrementalUpdateMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncrementalUpdateMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncrementalUpdateMetadata* internal_default_instance() {
    return reinterpret_cast<const IncrementalUpdateMetadata*>(
               &_IncrementalUpdateMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IncrementalUpdateMetadata& a, IncrementalUpdateMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(IncrementalUpdateMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncrementalUpdateMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncrementalUpdateMetadata* New() const final {
    return new IncrementalUpdateMetadata();
  }

  IncrementalUpdateMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncrementalUpdateMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncrementalUpdateMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IncrementalUpdateMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementalUpdateMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.IncrementalUpdateMetadata";
  }
  protected:
  explicit IncrementalUpdateMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 2,
    kEpochTimestampFieldNumber = 1,
    kMaxEpochAgeFieldNumber = 3,
  };
  // optional string version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional .google.protobuf.Timestamp epoch_timestamp = 1;
  bool has_epoch_timestamp() const;
  private:
  bool _internal_has_epoch_timestamp() const;
  public:
  void clear_epoch_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& epoch_timestamp() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_epoch_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_epoch_timestamp();
  void set_allocated_epoch_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* epoch_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_epoch_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_epoch_timestamp();
  public:
  void unsafe_arena_set_allocated_epoch_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* epoch_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_epoch_timestamp();

  // optional .google.protobuf.Duration max_epoch_age = 3;
  bool has_max_epoch_age() const;
  private:
  bool _internal_has_max_epoch_age() const;
  public:
  void clear_max_epoch_age();
  const PROTOBUF_NAMESPACE_ID::Duration& max_epoch_age() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Duration* release_max_epoch_age();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_max_epoch_age();
  void set_allocated_max_epoch_age(PROTOBUF_NAMESPACE_ID::Duration* max_epoch_age);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_max_epoch_age() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_max_epoch_age();
  public:
  void unsafe_arena_set_allocated_max_epoch_age(
      PROTOBUF_NAMESPACE_ID::Duration* max_epoch_age);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_max_epoch_age();

  // @@protoc_insertion_point(class_scope:research_scann.IncrementalUpdateMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  PROTOBUF_NAMESPACE_ID::Timestamp* epoch_timestamp_;
  PROTOBUF_NAMESPACE_ID::Duration* max_epoch_age_;
  friend struct ::TableStruct_scann_2fproto_2fincremental_5fupdates_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IncrementalUpdateConfig_Reindexing

// optional bool enable_manual_retraining_and_reindexing = 1 [default = false];
inline bool IncrementalUpdateConfig_Reindexing::_internal_has_enable_manual_retraining_and_reindexing() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IncrementalUpdateConfig_Reindexing::has_enable_manual_retraining_and_reindexing() const {
  return _internal_has_enable_manual_retraining_and_reindexing();
}
inline void IncrementalUpdateConfig_Reindexing::clear_enable_manual_retraining_and_reindexing() {
  enable_manual_retraining_and_reindexing_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool IncrementalUpdateConfig_Reindexing::_internal_enable_manual_retraining_and_reindexing() const {
  return enable_manual_retraining_and_reindexing_;
}
inline bool IncrementalUpdateConfig_Reindexing::enable_manual_retraining_and_reindexing() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.Reindexing.enable_manual_retraining_and_reindexing)
  return _internal_enable_manual_retraining_and_reindexing();
}
inline void IncrementalUpdateConfig_Reindexing::_internal_set_enable_manual_retraining_and_reindexing(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_manual_retraining_and_reindexing_ = value;
}
inline void IncrementalUpdateConfig_Reindexing::set_enable_manual_retraining_and_reindexing(bool value) {
  _internal_set_enable_manual_retraining_and_reindexing(value);
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateConfig.Reindexing.enable_manual_retraining_and_reindexing)
}

// -------------------------------------------------------------------

// IncrementalUpdateConfig_Pubsub2

// optional string topic = 1;
inline bool IncrementalUpdateConfig_Pubsub2::_internal_has_topic() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IncrementalUpdateConfig_Pubsub2::has_topic() const {
  return _internal_has_topic();
}
inline void IncrementalUpdateConfig_Pubsub2::clear_topic() {
  topic_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IncrementalUpdateConfig_Pubsub2::topic() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.Pubsub2.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IncrementalUpdateConfig_Pubsub2::set_topic(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateConfig.Pubsub2.topic)
}
inline std::string* IncrementalUpdateConfig_Pubsub2::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:research_scann.IncrementalUpdateConfig.Pubsub2.topic)
  return _s;
}
inline const std::string& IncrementalUpdateConfig_Pubsub2::_internal_topic() const {
  return topic_.Get();
}
inline void IncrementalUpdateConfig_Pubsub2::_internal_set_topic(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IncrementalUpdateConfig_Pubsub2::_internal_mutable_topic() {
  _has_bits_[0] |= 0x00000001u;
  return topic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IncrementalUpdateConfig_Pubsub2::release_topic() {
  // @@protoc_insertion_point(field_release:research_scann.IncrementalUpdateConfig.Pubsub2.topic)
  if (!_internal_has_topic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return topic_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IncrementalUpdateConfig_Pubsub2::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:research_scann.IncrementalUpdateConfig.Pubsub2.topic)
}

// optional string subscriber_id_base = 2;
inline bool IncrementalUpdateConfig_Pubsub2::_internal_has_subscriber_id_base() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IncrementalUpdateConfig_Pubsub2::has_subscriber_id_base() const {
  return _internal_has_subscriber_id_base();
}
inline void IncrementalUpdateConfig_Pubsub2::clear_subscriber_id_base() {
  subscriber_id_base_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IncrementalUpdateConfig_Pubsub2::subscriber_id_base() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.Pubsub2.subscriber_id_base)
  return _internal_subscriber_id_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IncrementalUpdateConfig_Pubsub2::set_subscriber_id_base(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 subscriber_id_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateConfig.Pubsub2.subscriber_id_base)
}
inline std::string* IncrementalUpdateConfig_Pubsub2::mutable_subscriber_id_base() {
  std::string* _s = _internal_mutable_subscriber_id_base();
  // @@protoc_insertion_point(field_mutable:research_scann.IncrementalUpdateConfig.Pubsub2.subscriber_id_base)
  return _s;
}
inline const std::string& IncrementalUpdateConfig_Pubsub2::_internal_subscriber_id_base() const {
  return subscriber_id_base_.Get();
}
inline void IncrementalUpdateConfig_Pubsub2::_internal_set_subscriber_id_base(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  subscriber_id_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IncrementalUpdateConfig_Pubsub2::_internal_mutable_subscriber_id_base() {
  _has_bits_[0] |= 0x00000002u;
  return subscriber_id_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IncrementalUpdateConfig_Pubsub2::release_subscriber_id_base() {
  // @@protoc_insertion_point(field_release:research_scann.IncrementalUpdateConfig.Pubsub2.subscriber_id_base)
  if (!_internal_has_subscriber_id_base()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return subscriber_id_base_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IncrementalUpdateConfig_Pubsub2::set_allocated_subscriber_id_base(std::string* subscriber_id_base) {
  if (subscriber_id_base != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  subscriber_id_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscriber_id_base,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:research_scann.IncrementalUpdateConfig.Pubsub2.subscriber_id_base)
}

// optional string publisher_id_base = 3;
inline bool IncrementalUpdateConfig_Pubsub2::_internal_has_publisher_id_base() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IncrementalUpdateConfig_Pubsub2::has_publisher_id_base() const {
  return _internal_has_publisher_id_base();
}
inline void IncrementalUpdateConfig_Pubsub2::clear_publisher_id_base() {
  publisher_id_base_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& IncrementalUpdateConfig_Pubsub2::publisher_id_base() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.Pubsub2.publisher_id_base)
  return _internal_publisher_id_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IncrementalUpdateConfig_Pubsub2::set_publisher_id_base(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 publisher_id_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateConfig.Pubsub2.publisher_id_base)
}
inline std::string* IncrementalUpdateConfig_Pubsub2::mutable_publisher_id_base() {
  std::string* _s = _internal_mutable_publisher_id_base();
  // @@protoc_insertion_point(field_mutable:research_scann.IncrementalUpdateConfig.Pubsub2.publisher_id_base)
  return _s;
}
inline const std::string& IncrementalUpdateConfig_Pubsub2::_internal_publisher_id_base() const {
  return publisher_id_base_.Get();
}
inline void IncrementalUpdateConfig_Pubsub2::_internal_set_publisher_id_base(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  publisher_id_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IncrementalUpdateConfig_Pubsub2::_internal_mutable_publisher_id_base() {
  _has_bits_[0] |= 0x00000004u;
  return publisher_id_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IncrementalUpdateConfig_Pubsub2::release_publisher_id_base() {
  // @@protoc_insertion_point(field_release:research_scann.IncrementalUpdateConfig.Pubsub2.publisher_id_base)
  if (!_internal_has_publisher_id_base()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return publisher_id_base_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IncrementalUpdateConfig_Pubsub2::set_allocated_publisher_id_base(std::string* publisher_id_base) {
  if (publisher_id_base != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  publisher_id_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publisher_id_base,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:research_scann.IncrementalUpdateConfig.Pubsub2.publisher_id_base)
}

// optional bool seek_back_enabled = 4 [default = true];
inline bool IncrementalUpdateConfig_Pubsub2::_internal_has_seek_back_enabled() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IncrementalUpdateConfig_Pubsub2::has_seek_back_enabled() const {
  return _internal_has_seek_back_enabled();
}
inline void IncrementalUpdateConfig_Pubsub2::clear_seek_back_enabled() {
  seek_back_enabled_ = true;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool IncrementalUpdateConfig_Pubsub2::_internal_seek_back_enabled() const {
  return seek_back_enabled_;
}
inline bool IncrementalUpdateConfig_Pubsub2::seek_back_enabled() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.Pubsub2.seek_back_enabled)
  return _internal_seek_back_enabled();
}
inline void IncrementalUpdateConfig_Pubsub2::_internal_set_seek_back_enabled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  seek_back_enabled_ = value;
}
inline void IncrementalUpdateConfig_Pubsub2::set_seek_back_enabled(bool value) {
  _internal_set_seek_back_enabled(value);
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateConfig.Pubsub2.seek_back_enabled)
}

// optional bool publish_rpc_updates = 5 [default = true];
inline bool IncrementalUpdateConfig_Pubsub2::_internal_has_publish_rpc_updates() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IncrementalUpdateConfig_Pubsub2::has_publish_rpc_updates() const {
  return _internal_has_publish_rpc_updates();
}
inline void IncrementalUpdateConfig_Pubsub2::clear_publish_rpc_updates() {
  publish_rpc_updates_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool IncrementalUpdateConfig_Pubsub2::_internal_publish_rpc_updates() const {
  return publish_rpc_updates_;
}
inline bool IncrementalUpdateConfig_Pubsub2::publish_rpc_updates() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.Pubsub2.publish_rpc_updates)
  return _internal_publish_rpc_updates();
}
inline void IncrementalUpdateConfig_Pubsub2::_internal_set_publish_rpc_updates(bool value) {
  _has_bits_[0] |= 0x00000080u;
  publish_rpc_updates_ = value;
}
inline void IncrementalUpdateConfig_Pubsub2::set_publish_rpc_updates(bool value) {
  _internal_set_publish_rpc_updates(value);
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateConfig.Pubsub2.publish_rpc_updates)
}

// optional string filter = 6;
inline bool IncrementalUpdateConfig_Pubsub2::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IncrementalUpdateConfig_Pubsub2::has_filter() const {
  return _internal_has_filter();
}
inline void IncrementalUpdateConfig_Pubsub2::clear_filter() {
  filter_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& IncrementalUpdateConfig_Pubsub2::filter() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.Pubsub2.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IncrementalUpdateConfig_Pubsub2::set_filter(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateConfig.Pubsub2.filter)
}
inline std::string* IncrementalUpdateConfig_Pubsub2::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:research_scann.IncrementalUpdateConfig.Pubsub2.filter)
  return _s;
}
inline const std::string& IncrementalUpdateConfig_Pubsub2::_internal_filter() const {
  return filter_.Get();
}
inline void IncrementalUpdateConfig_Pubsub2::_internal_set_filter(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IncrementalUpdateConfig_Pubsub2::_internal_mutable_filter() {
  _has_bits_[0] |= 0x00000008u;
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IncrementalUpdateConfig_Pubsub2::release_filter() {
  // @@protoc_insertion_point(field_release:research_scann.IncrementalUpdateConfig.Pubsub2.filter)
  if (!_internal_has_filter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return filter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IncrementalUpdateConfig_Pubsub2::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:research_scann.IncrementalUpdateConfig.Pubsub2.filter)
}

// optional bool use_mod_term_filter = 7 [default = false];
inline bool IncrementalUpdateConfig_Pubsub2::_internal_has_use_mod_term_filter() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IncrementalUpdateConfig_Pubsub2::has_use_mod_term_filter() const {
  return _internal_has_use_mod_term_filter();
}
inline void IncrementalUpdateConfig_Pubsub2::clear_use_mod_term_filter() {
  use_mod_term_filter_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool IncrementalUpdateConfig_Pubsub2::_internal_use_mod_term_filter() const {
  return use_mod_term_filter_;
}
inline bool IncrementalUpdateConfig_Pubsub2::use_mod_term_filter() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.Pubsub2.use_mod_term_filter)
  return _internal_use_mod_term_filter();
}
inline void IncrementalUpdateConfig_Pubsub2::_internal_set_use_mod_term_filter(bool value) {
  _has_bits_[0] |= 0x00000020u;
  use_mod_term_filter_ = value;
}
inline void IncrementalUpdateConfig_Pubsub2::set_use_mod_term_filter(bool value) {
  _internal_set_use_mod_term_filter(value);
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateConfig.Pubsub2.use_mod_term_filter)
}

// optional string mod_term_filter_signature = 8 [default = "fprint"];
inline bool IncrementalUpdateConfig_Pubsub2::_internal_has_mod_term_filter_signature() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IncrementalUpdateConfig_Pubsub2::has_mod_term_filter_signature() const {
  return _internal_has_mod_term_filter_signature();
}
inline void IncrementalUpdateConfig_Pubsub2::clear_mod_term_filter_signature() {
  mod_term_filter_signature_.ClearToDefault(::research_scann::IncrementalUpdateConfig_Pubsub2::_i_give_permission_to_break_this_code_default_mod_term_filter_signature_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& IncrementalUpdateConfig_Pubsub2::mod_term_filter_signature() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.Pubsub2.mod_term_filter_signature)
  if (mod_term_filter_signature_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_mod_term_filter_signature_.get();
  return _internal_mod_term_filter_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IncrementalUpdateConfig_Pubsub2::set_mod_term_filter_signature(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 mod_term_filter_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateConfig.Pubsub2.mod_term_filter_signature)
}
inline std::string* IncrementalUpdateConfig_Pubsub2::mutable_mod_term_filter_signature() {
  std::string* _s = _internal_mutable_mod_term_filter_signature();
  // @@protoc_insertion_point(field_mutable:research_scann.IncrementalUpdateConfig.Pubsub2.mod_term_filter_signature)
  return _s;
}
inline const std::string& IncrementalUpdateConfig_Pubsub2::_internal_mod_term_filter_signature() const {
  return mod_term_filter_signature_.Get();
}
inline void IncrementalUpdateConfig_Pubsub2::_internal_set_mod_term_filter_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  mod_term_filter_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IncrementalUpdateConfig_Pubsub2::_internal_mutable_mod_term_filter_signature() {
  _has_bits_[0] |= 0x00000010u;
  return mod_term_filter_signature_.Mutable(::research_scann::IncrementalUpdateConfig_Pubsub2::_i_give_permission_to_break_this_code_default_mod_term_filter_signature_, GetArenaForAllocation());
}
inline std::string* IncrementalUpdateConfig_Pubsub2::release_mod_term_filter_signature() {
  // @@protoc_insertion_point(field_release:research_scann.IncrementalUpdateConfig.Pubsub2.mod_term_filter_signature)
  if (!_internal_has_mod_term_filter_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return mod_term_filter_signature_.ReleaseNonDefault(nullptr, GetArenaForAllocation());
}
inline void IncrementalUpdateConfig_Pubsub2::set_allocated_mod_term_filter_signature(std::string* mod_term_filter_signature) {
  if (mod_term_filter_signature != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  mod_term_filter_signature_.SetAllocated(nullptr, mod_term_filter_signature,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:research_scann.IncrementalUpdateConfig.Pubsub2.mod_term_filter_signature)
}

// -------------------------------------------------------------------

// IncrementalUpdateConfig

// optional bool enabled = 1 [default = false];
inline bool IncrementalUpdateConfig::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IncrementalUpdateConfig::has_enabled() const {
  return _internal_has_enabled();
}
inline void IncrementalUpdateConfig::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool IncrementalUpdateConfig::_internal_enabled() const {
  return enabled_;
}
inline bool IncrementalUpdateConfig::enabled() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.enabled)
  return _internal_enabled();
}
inline void IncrementalUpdateConfig::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enabled_ = value;
}
inline void IncrementalUpdateConfig::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateConfig.enabled)
}

// optional uint64 num_datapoints_to_reserve = 5 [default = 0];
inline bool IncrementalUpdateConfig::_internal_has_num_datapoints_to_reserve() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IncrementalUpdateConfig::has_num_datapoints_to_reserve() const {
  return _internal_has_num_datapoints_to_reserve();
}
inline void IncrementalUpdateConfig::clear_num_datapoints_to_reserve() {
  num_datapoints_to_reserve_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IncrementalUpdateConfig::_internal_num_datapoints_to_reserve() const {
  return num_datapoints_to_reserve_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IncrementalUpdateConfig::num_datapoints_to_reserve() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.num_datapoints_to_reserve)
  return _internal_num_datapoints_to_reserve();
}
inline void IncrementalUpdateConfig::_internal_set_num_datapoints_to_reserve(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  num_datapoints_to_reserve_ = value;
}
inline void IncrementalUpdateConfig::set_num_datapoints_to_reserve(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_datapoints_to_reserve(value);
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateConfig.num_datapoints_to_reserve)
}

// optional .google.protobuf.Duration last_update_timestamp_lifetime = 2;
inline bool IncrementalUpdateConfig::_internal_has_last_update_timestamp_lifetime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || last_update_timestamp_lifetime_ != nullptr);
  return value;
}
inline bool IncrementalUpdateConfig::has_last_update_timestamp_lifetime() const {
  return _internal_has_last_update_timestamp_lifetime();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& IncrementalUpdateConfig::_internal_last_update_timestamp_lifetime() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = last_update_timestamp_lifetime_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& IncrementalUpdateConfig::last_update_timestamp_lifetime() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.last_update_timestamp_lifetime)
  return _internal_last_update_timestamp_lifetime();
}
inline void IncrementalUpdateConfig::unsafe_arena_set_allocated_last_update_timestamp_lifetime(
    PROTOBUF_NAMESPACE_ID::Duration* last_update_timestamp_lifetime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_update_timestamp_lifetime_);
  }
  last_update_timestamp_lifetime_ = last_update_timestamp_lifetime;
  if (last_update_timestamp_lifetime) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.IncrementalUpdateConfig.last_update_timestamp_lifetime)
}
inline PROTOBUF_NAMESPACE_ID::Duration* IncrementalUpdateConfig::release_last_update_timestamp_lifetime() {
  _has_bits_[0] &= ~0x00000002u;
  PROTOBUF_NAMESPACE_ID::Duration* temp = last_update_timestamp_lifetime_;
  last_update_timestamp_lifetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* IncrementalUpdateConfig::unsafe_arena_release_last_update_timestamp_lifetime() {
  // @@protoc_insertion_point(field_release:research_scann.IncrementalUpdateConfig.last_update_timestamp_lifetime)
  _has_bits_[0] &= ~0x00000002u;
  PROTOBUF_NAMESPACE_ID::Duration* temp = last_update_timestamp_lifetime_;
  last_update_timestamp_lifetime_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* IncrementalUpdateConfig::_internal_mutable_last_update_timestamp_lifetime() {
  _has_bits_[0] |= 0x00000002u;
  if (last_update_timestamp_lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    last_update_timestamp_lifetime_ = p;
  }
  return last_update_timestamp_lifetime_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* IncrementalUpdateConfig::mutable_last_update_timestamp_lifetime() {
  PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_last_update_timestamp_lifetime();
  // @@protoc_insertion_point(field_mutable:research_scann.IncrementalUpdateConfig.last_update_timestamp_lifetime)
  return _msg;
}
inline void IncrementalUpdateConfig::set_allocated_last_update_timestamp_lifetime(PROTOBUF_NAMESPACE_ID::Duration* last_update_timestamp_lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_update_timestamp_lifetime_);
  }
  if (last_update_timestamp_lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_update_timestamp_lifetime));
    if (message_arena != submessage_arena) {
      last_update_timestamp_lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_update_timestamp_lifetime, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_update_timestamp_lifetime_ = last_update_timestamp_lifetime;
  // @@protoc_insertion_point(field_set_allocated:research_scann.IncrementalUpdateConfig.last_update_timestamp_lifetime)
}

// optional bool enable_expiration_timestamps = 4 [default = false];
inline bool IncrementalUpdateConfig::_internal_has_enable_expiration_timestamps() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IncrementalUpdateConfig::has_enable_expiration_timestamps() const {
  return _internal_has_enable_expiration_timestamps();
}
inline void IncrementalUpdateConfig::clear_enable_expiration_timestamps() {
  enable_expiration_timestamps_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool IncrementalUpdateConfig::_internal_enable_expiration_timestamps() const {
  return enable_expiration_timestamps_;
}
inline bool IncrementalUpdateConfig::enable_expiration_timestamps() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.enable_expiration_timestamps)
  return _internal_enable_expiration_timestamps();
}
inline void IncrementalUpdateConfig::_internal_set_enable_expiration_timestamps(bool value) {
  _has_bits_[0] |= 0x00000040u;
  enable_expiration_timestamps_ = value;
}
inline void IncrementalUpdateConfig::set_enable_expiration_timestamps(bool value) {
  _internal_set_enable_expiration_timestamps(value);
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateConfig.enable_expiration_timestamps)
}

// optional .research_scann.IncrementalUpdateConfig.Reindexing reindexing = 9;
inline bool IncrementalUpdateConfig::_internal_has_reindexing() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || reindexing_ != nullptr);
  return value;
}
inline bool IncrementalUpdateConfig::has_reindexing() const {
  return _internal_has_reindexing();
}
inline void IncrementalUpdateConfig::clear_reindexing() {
  if (reindexing_ != nullptr) reindexing_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::research_scann::IncrementalUpdateConfig_Reindexing& IncrementalUpdateConfig::_internal_reindexing() const {
  const ::research_scann::IncrementalUpdateConfig_Reindexing* p = reindexing_;
  return p != nullptr ? *p : reinterpret_cast<const ::research_scann::IncrementalUpdateConfig_Reindexing&>(
      ::research_scann::_IncrementalUpdateConfig_Reindexing_default_instance_);
}
inline const ::research_scann::IncrementalUpdateConfig_Reindexing& IncrementalUpdateConfig::reindexing() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.reindexing)
  return _internal_reindexing();
}
inline void IncrementalUpdateConfig::unsafe_arena_set_allocated_reindexing(
    ::research_scann::IncrementalUpdateConfig_Reindexing* reindexing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reindexing_);
  }
  reindexing_ = reindexing;
  if (reindexing) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.IncrementalUpdateConfig.reindexing)
}
inline ::research_scann::IncrementalUpdateConfig_Reindexing* IncrementalUpdateConfig::release_reindexing() {
  _has_bits_[0] &= ~0x00000008u;
  ::research_scann::IncrementalUpdateConfig_Reindexing* temp = reindexing_;
  reindexing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::research_scann::IncrementalUpdateConfig_Reindexing* IncrementalUpdateConfig::unsafe_arena_release_reindexing() {
  // @@protoc_insertion_point(field_release:research_scann.IncrementalUpdateConfig.reindexing)
  _has_bits_[0] &= ~0x00000008u;
  ::research_scann::IncrementalUpdateConfig_Reindexing* temp = reindexing_;
  reindexing_ = nullptr;
  return temp;
}
inline ::research_scann::IncrementalUpdateConfig_Reindexing* IncrementalUpdateConfig::_internal_mutable_reindexing() {
  _has_bits_[0] |= 0x00000008u;
  if (reindexing_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::IncrementalUpdateConfig_Reindexing>(GetArenaForAllocation());
    reindexing_ = p;
  }
  return reindexing_;
}
inline ::research_scann::IncrementalUpdateConfig_Reindexing* IncrementalUpdateConfig::mutable_reindexing() {
  ::research_scann::IncrementalUpdateConfig_Reindexing* _msg = _internal_mutable_reindexing();
  // @@protoc_insertion_point(field_mutable:research_scann.IncrementalUpdateConfig.reindexing)
  return _msg;
}
inline void IncrementalUpdateConfig::set_allocated_reindexing(::research_scann::IncrementalUpdateConfig_Reindexing* reindexing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reindexing_;
  }
  if (reindexing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::research_scann::IncrementalUpdateConfig_Reindexing>::GetOwningArena(reindexing);
    if (message_arena != submessage_arena) {
      reindexing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reindexing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  reindexing_ = reindexing;
  // @@protoc_insertion_point(field_set_allocated:research_scann.IncrementalUpdateConfig.reindexing)
}

// .research_scann.IncrementalUpdateConfig.Pubsub2 pubsub2 = 3;
inline bool IncrementalUpdateConfig::_internal_has_pubsub2() const {
  return DurabilityReplication_case() == kPubsub2;
}
inline bool IncrementalUpdateConfig::has_pubsub2() const {
  return _internal_has_pubsub2();
}
inline void IncrementalUpdateConfig::set_has_pubsub2() {
  _oneof_case_[0] = kPubsub2;
}
inline void IncrementalUpdateConfig::clear_pubsub2() {
  if (_internal_has_pubsub2()) {
    if (GetArenaForAllocation() == nullptr) {
      delete DurabilityReplication_.pubsub2_;
    }
    clear_has_DurabilityReplication();
  }
}
inline ::research_scann::IncrementalUpdateConfig_Pubsub2* IncrementalUpdateConfig::release_pubsub2() {
  // @@protoc_insertion_point(field_release:research_scann.IncrementalUpdateConfig.pubsub2)
  if (_internal_has_pubsub2()) {
    clear_has_DurabilityReplication();
      ::research_scann::IncrementalUpdateConfig_Pubsub2* temp = DurabilityReplication_.pubsub2_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DurabilityReplication_.pubsub2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::research_scann::IncrementalUpdateConfig_Pubsub2& IncrementalUpdateConfig::_internal_pubsub2() const {
  return _internal_has_pubsub2()
      ? *DurabilityReplication_.pubsub2_
      : reinterpret_cast< ::research_scann::IncrementalUpdateConfig_Pubsub2&>(::research_scann::_IncrementalUpdateConfig_Pubsub2_default_instance_);
}
inline const ::research_scann::IncrementalUpdateConfig_Pubsub2& IncrementalUpdateConfig::pubsub2() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.pubsub2)
  return _internal_pubsub2();
}
inline ::research_scann::IncrementalUpdateConfig_Pubsub2* IncrementalUpdateConfig::unsafe_arena_release_pubsub2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:research_scann.IncrementalUpdateConfig.pubsub2)
  if (_internal_has_pubsub2()) {
    clear_has_DurabilityReplication();
    ::research_scann::IncrementalUpdateConfig_Pubsub2* temp = DurabilityReplication_.pubsub2_;
    DurabilityReplication_.pubsub2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IncrementalUpdateConfig::unsafe_arena_set_allocated_pubsub2(::research_scann::IncrementalUpdateConfig_Pubsub2* pubsub2) {
  clear_DurabilityReplication();
  if (pubsub2) {
    set_has_pubsub2();
    DurabilityReplication_.pubsub2_ = pubsub2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.IncrementalUpdateConfig.pubsub2)
}
inline ::research_scann::IncrementalUpdateConfig_Pubsub2* IncrementalUpdateConfig::_internal_mutable_pubsub2() {
  if (!_internal_has_pubsub2()) {
    clear_DurabilityReplication();
    set_has_pubsub2();
    DurabilityReplication_.pubsub2_ = CreateMaybeMessage< ::research_scann::IncrementalUpdateConfig_Pubsub2 >(GetArenaForAllocation());
  }
  return DurabilityReplication_.pubsub2_;
}
inline ::research_scann::IncrementalUpdateConfig_Pubsub2* IncrementalUpdateConfig::mutable_pubsub2() {
  ::research_scann::IncrementalUpdateConfig_Pubsub2* _msg = _internal_mutable_pubsub2();
  // @@protoc_insertion_point(field_mutable:research_scann.IncrementalUpdateConfig.pubsub2)
  return _msg;
}

// optional string sharder = 6 [default = ""];
inline bool IncrementalUpdateConfig::_internal_has_sharder() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IncrementalUpdateConfig::has_sharder() const {
  return _internal_has_sharder();
}
inline void IncrementalUpdateConfig::clear_sharder() {
  sharder_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IncrementalUpdateConfig::sharder() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.sharder)
  return _internal_sharder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IncrementalUpdateConfig::set_sharder(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sharder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateConfig.sharder)
}
inline std::string* IncrementalUpdateConfig::mutable_sharder() {
  std::string* _s = _internal_mutable_sharder();
  // @@protoc_insertion_point(field_mutable:research_scann.IncrementalUpdateConfig.sharder)
  return _s;
}
inline const std::string& IncrementalUpdateConfig::_internal_sharder() const {
  return sharder_.Get();
}
inline void IncrementalUpdateConfig::_internal_set_sharder(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sharder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IncrementalUpdateConfig::_internal_mutable_sharder() {
  _has_bits_[0] |= 0x00000001u;
  return sharder_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IncrementalUpdateConfig::release_sharder() {
  // @@protoc_insertion_point(field_release:research_scann.IncrementalUpdateConfig.sharder)
  if (!_internal_has_sharder()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sharder_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IncrementalUpdateConfig::set_allocated_sharder(std::string* sharder) {
  if (sharder != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sharder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sharder,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:research_scann.IncrementalUpdateConfig.sharder)
}

// optional .google.protobuf.Duration startup_catchup_threshold = 7;
inline bool IncrementalUpdateConfig::_internal_has_startup_catchup_threshold() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || startup_catchup_threshold_ != nullptr);
  return value;
}
inline bool IncrementalUpdateConfig::has_startup_catchup_threshold() const {
  return _internal_has_startup_catchup_threshold();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& IncrementalUpdateConfig::_internal_startup_catchup_threshold() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = startup_catchup_threshold_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& IncrementalUpdateConfig::startup_catchup_threshold() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.startup_catchup_threshold)
  return _internal_startup_catchup_threshold();
}
inline void IncrementalUpdateConfig::unsafe_arena_set_allocated_startup_catchup_threshold(
    PROTOBUF_NAMESPACE_ID::Duration* startup_catchup_threshold) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startup_catchup_threshold_);
  }
  startup_catchup_threshold_ = startup_catchup_threshold;
  if (startup_catchup_threshold) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.IncrementalUpdateConfig.startup_catchup_threshold)
}
inline PROTOBUF_NAMESPACE_ID::Duration* IncrementalUpdateConfig::release_startup_catchup_threshold() {
  _has_bits_[0] &= ~0x00000004u;
  PROTOBUF_NAMESPACE_ID::Duration* temp = startup_catchup_threshold_;
  startup_catchup_threshold_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* IncrementalUpdateConfig::unsafe_arena_release_startup_catchup_threshold() {
  // @@protoc_insertion_point(field_release:research_scann.IncrementalUpdateConfig.startup_catchup_threshold)
  _has_bits_[0] &= ~0x00000004u;
  PROTOBUF_NAMESPACE_ID::Duration* temp = startup_catchup_threshold_;
  startup_catchup_threshold_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* IncrementalUpdateConfig::_internal_mutable_startup_catchup_threshold() {
  _has_bits_[0] |= 0x00000004u;
  if (startup_catchup_threshold_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    startup_catchup_threshold_ = p;
  }
  return startup_catchup_threshold_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* IncrementalUpdateConfig::mutable_startup_catchup_threshold() {
  PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_startup_catchup_threshold();
  // @@protoc_insertion_point(field_mutable:research_scann.IncrementalUpdateConfig.startup_catchup_threshold)
  return _msg;
}
inline void IncrementalUpdateConfig::set_allocated_startup_catchup_threshold(PROTOBUF_NAMESPACE_ID::Duration* startup_catchup_threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(startup_catchup_threshold_);
  }
  if (startup_catchup_threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startup_catchup_threshold));
    if (message_arena != submessage_arena) {
      startup_catchup_threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startup_catchup_threshold, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  startup_catchup_threshold_ = startup_catchup_threshold;
  // @@protoc_insertion_point(field_set_allocated:research_scann.IncrementalUpdateConfig.startup_catchup_threshold)
}

// optional uint32 num_updates_between_garbage_collections = 8 [default = 100000];
inline bool IncrementalUpdateConfig::_internal_has_num_updates_between_garbage_collections() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IncrementalUpdateConfig::has_num_updates_between_garbage_collections() const {
  return _internal_has_num_updates_between_garbage_collections();
}
inline void IncrementalUpdateConfig::clear_num_updates_between_garbage_collections() {
  num_updates_between_garbage_collections_ = 100000u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncrementalUpdateConfig::_internal_num_updates_between_garbage_collections() const {
  return num_updates_between_garbage_collections_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncrementalUpdateConfig::num_updates_between_garbage_collections() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateConfig.num_updates_between_garbage_collections)
  return _internal_num_updates_between_garbage_collections();
}
inline void IncrementalUpdateConfig::_internal_set_num_updates_between_garbage_collections(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  num_updates_between_garbage_collections_ = value;
}
inline void IncrementalUpdateConfig::set_num_updates_between_garbage_collections(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_updates_between_garbage_collections(value);
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateConfig.num_updates_between_garbage_collections)
}

inline bool IncrementalUpdateConfig::has_DurabilityReplication() const {
  return DurabilityReplication_case() != DURABILITYREPLICATION_NOT_SET;
}
inline void IncrementalUpdateConfig::clear_has_DurabilityReplication() {
  _oneof_case_[0] = DURABILITYREPLICATION_NOT_SET;
}
inline IncrementalUpdateConfig::DurabilityReplicationCase IncrementalUpdateConfig::DurabilityReplication_case() const {
  return IncrementalUpdateConfig::DurabilityReplicationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// IncrementalUpdateMetadata

// optional .google.protobuf.Timestamp epoch_timestamp = 1;
inline bool IncrementalUpdateMetadata::_internal_has_epoch_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || epoch_timestamp_ != nullptr);
  return value;
}
inline bool IncrementalUpdateMetadata::has_epoch_timestamp() const {
  return _internal_has_epoch_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& IncrementalUpdateMetadata::_internal_epoch_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = epoch_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& IncrementalUpdateMetadata::epoch_timestamp() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateMetadata.epoch_timestamp)
  return _internal_epoch_timestamp();
}
inline void IncrementalUpdateMetadata::unsafe_arena_set_allocated_epoch_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* epoch_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_timestamp_);
  }
  epoch_timestamp_ = epoch_timestamp;
  if (epoch_timestamp) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.IncrementalUpdateMetadata.epoch_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* IncrementalUpdateMetadata::release_epoch_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = epoch_timestamp_;
  epoch_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* IncrementalUpdateMetadata::unsafe_arena_release_epoch_timestamp() {
  // @@protoc_insertion_point(field_release:research_scann.IncrementalUpdateMetadata.epoch_timestamp)
  _has_bits_[0] &= ~0x00000002u;
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = epoch_timestamp_;
  epoch_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* IncrementalUpdateMetadata::_internal_mutable_epoch_timestamp() {
  _has_bits_[0] |= 0x00000002u;
  if (epoch_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    epoch_timestamp_ = p;
  }
  return epoch_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* IncrementalUpdateMetadata::mutable_epoch_timestamp() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_epoch_timestamp();
  // @@protoc_insertion_point(field_mutable:research_scann.IncrementalUpdateMetadata.epoch_timestamp)
  return _msg;
}
inline void IncrementalUpdateMetadata::set_allocated_epoch_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* epoch_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_timestamp_);
  }
  if (epoch_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_timestamp));
    if (message_arena != submessage_arena) {
      epoch_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  epoch_timestamp_ = epoch_timestamp;
  // @@protoc_insertion_point(field_set_allocated:research_scann.IncrementalUpdateMetadata.epoch_timestamp)
}

// optional .google.protobuf.Duration max_epoch_age = 3;
inline bool IncrementalUpdateMetadata::_internal_has_max_epoch_age() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || max_epoch_age_ != nullptr);
  return value;
}
inline bool IncrementalUpdateMetadata::has_max_epoch_age() const {
  return _internal_has_max_epoch_age();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& IncrementalUpdateMetadata::_internal_max_epoch_age() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = max_epoch_age_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& IncrementalUpdateMetadata::max_epoch_age() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateMetadata.max_epoch_age)
  return _internal_max_epoch_age();
}
inline void IncrementalUpdateMetadata::unsafe_arena_set_allocated_max_epoch_age(
    PROTOBUF_NAMESPACE_ID::Duration* max_epoch_age) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_epoch_age_);
  }
  max_epoch_age_ = max_epoch_age;
  if (max_epoch_age) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.IncrementalUpdateMetadata.max_epoch_age)
}
inline PROTOBUF_NAMESPACE_ID::Duration* IncrementalUpdateMetadata::release_max_epoch_age() {
  _has_bits_[0] &= ~0x00000004u;
  PROTOBUF_NAMESPACE_ID::Duration* temp = max_epoch_age_;
  max_epoch_age_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* IncrementalUpdateMetadata::unsafe_arena_release_max_epoch_age() {
  // @@protoc_insertion_point(field_release:research_scann.IncrementalUpdateMetadata.max_epoch_age)
  _has_bits_[0] &= ~0x00000004u;
  PROTOBUF_NAMESPACE_ID::Duration* temp = max_epoch_age_;
  max_epoch_age_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* IncrementalUpdateMetadata::_internal_mutable_max_epoch_age() {
  _has_bits_[0] |= 0x00000004u;
  if (max_epoch_age_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    max_epoch_age_ = p;
  }
  return max_epoch_age_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* IncrementalUpdateMetadata::mutable_max_epoch_age() {
  PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_max_epoch_age();
  // @@protoc_insertion_point(field_mutable:research_scann.IncrementalUpdateMetadata.max_epoch_age)
  return _msg;
}
inline void IncrementalUpdateMetadata::set_allocated_max_epoch_age(PROTOBUF_NAMESPACE_ID::Duration* max_epoch_age) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_epoch_age_);
  }
  if (max_epoch_age) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_epoch_age));
    if (message_arena != submessage_arena) {
      max_epoch_age = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_epoch_age, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  max_epoch_age_ = max_epoch_age;
  // @@protoc_insertion_point(field_set_allocated:research_scann.IncrementalUpdateMetadata.max_epoch_age)
}

// optional string version = 2;
inline bool IncrementalUpdateMetadata::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IncrementalUpdateMetadata::has_version() const {
  return _internal_has_version();
}
inline void IncrementalUpdateMetadata::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IncrementalUpdateMetadata::version() const {
  // @@protoc_insertion_point(field_get:research_scann.IncrementalUpdateMetadata.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IncrementalUpdateMetadata::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:research_scann.IncrementalUpdateMetadata.version)
}
inline std::string* IncrementalUpdateMetadata::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:research_scann.IncrementalUpdateMetadata.version)
  return _s;
}
inline const std::string& IncrementalUpdateMetadata::_internal_version() const {
  return version_.Get();
}
inline void IncrementalUpdateMetadata::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IncrementalUpdateMetadata::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IncrementalUpdateMetadata::release_version() {
  // @@protoc_insertion_point(field_release:research_scann.IncrementalUpdateMetadata.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IncrementalUpdateMetadata::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:research_scann.IncrementalUpdateMetadata.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2fproto_2fincremental_5fupdates_2eproto
