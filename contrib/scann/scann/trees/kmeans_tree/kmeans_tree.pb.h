// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/trees/kmeans_tree/kmeans_tree.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "scann/proto/partitioning.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto;
namespace research_scann {
class SerializedKMeansTree;
struct SerializedKMeansTreeDefaultTypeInternal;
extern SerializedKMeansTreeDefaultTypeInternal _SerializedKMeansTree_default_instance_;
class SerializedKMeansTree_Center;
struct SerializedKMeansTree_CenterDefaultTypeInternal;
extern SerializedKMeansTree_CenterDefaultTypeInternal _SerializedKMeansTree_Center_default_instance_;
class SerializedKMeansTree_Node;
struct SerializedKMeansTree_NodeDefaultTypeInternal;
extern SerializedKMeansTree_NodeDefaultTypeInternal _SerializedKMeansTree_Node_default_instance_;
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> ::research_scann::SerializedKMeansTree* Arena::CreateMaybeMessage<::research_scann::SerializedKMeansTree>(Arena*);
template<> ::research_scann::SerializedKMeansTree_Center* Arena::CreateMaybeMessage<::research_scann::SerializedKMeansTree_Center>(Arena*);
template<> ::research_scann::SerializedKMeansTree_Node* Arena::CreateMaybeMessage<::research_scann::SerializedKMeansTree_Node>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace research_scann {

// ===================================================================

class SerializedKMeansTree_Center final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.SerializedKMeansTree.Center) */ {
 public:
  inline SerializedKMeansTree_Center() : SerializedKMeansTree_Center(nullptr) {}
  ~SerializedKMeansTree_Center() override;
  explicit constexpr SerializedKMeansTree_Center(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKMeansTree_Center(const SerializedKMeansTree_Center& from);
  SerializedKMeansTree_Center(SerializedKMeansTree_Center&& from) noexcept
    : SerializedKMeansTree_Center() {
    *this = ::std::move(from);
  }

  inline SerializedKMeansTree_Center& operator=(const SerializedKMeansTree_Center& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKMeansTree_Center& operator=(SerializedKMeansTree_Center&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKMeansTree_Center& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKMeansTree_Center* internal_default_instance() {
    return reinterpret_cast<const SerializedKMeansTree_Center*>(
               &_SerializedKMeansTree_Center_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SerializedKMeansTree_Center& a, SerializedKMeansTree_Center& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKMeansTree_Center* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKMeansTree_Center* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedKMeansTree_Center* New() const final {
    return new SerializedKMeansTree_Center();
  }

  SerializedKMeansTree_Center* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedKMeansTree_Center>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKMeansTree_Center& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedKMeansTree_Center& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKMeansTree_Center* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.SerializedKMeansTree.Center";
  }
  protected:
  explicit SerializedKMeansTree_Center(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionFieldNumber = 1,
    kFloatDimensionFieldNumber = 2,
  };
  // repeated double dimension = 1 [packed = true];
  int dimension_size() const;
  private:
  int _internal_dimension_size() const;
  public:
  void clear_dimension();
  private:
  double _internal_dimension(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_dimension() const;
  void _internal_add_dimension(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_dimension();
  public:
  double dimension(int index) const;
  void set_dimension(int index, double value);
  void add_dimension(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      dimension() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_dimension();

  // repeated float float_dimension = 2 [packed = true];
  int float_dimension_size() const;
  private:
  int _internal_float_dimension_size() const;
  public:
  void clear_float_dimension();
  private:
  float _internal_float_dimension(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_dimension() const;
  void _internal_add_float_dimension(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_dimension();
  public:
  float float_dimension(int index) const;
  void set_float_dimension(int index, float value);
  void add_float_dimension(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_dimension() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_dimension();

  // @@protoc_insertion_point(class_scope:research_scann.SerializedKMeansTree.Center)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > dimension_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_dimension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto;
};
// -------------------------------------------------------------------

class SerializedKMeansTree_Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.SerializedKMeansTree.Node) */ {
 public:
  inline SerializedKMeansTree_Node() : SerializedKMeansTree_Node(nullptr) {}
  ~SerializedKMeansTree_Node() override;
  explicit constexpr SerializedKMeansTree_Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKMeansTree_Node(const SerializedKMeansTree_Node& from);
  SerializedKMeansTree_Node(SerializedKMeansTree_Node&& from) noexcept
    : SerializedKMeansTree_Node() {
    *this = ::std::move(from);
  }

  inline SerializedKMeansTree_Node& operator=(const SerializedKMeansTree_Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKMeansTree_Node& operator=(SerializedKMeansTree_Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKMeansTree_Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKMeansTree_Node* internal_default_instance() {
    return reinterpret_cast<const SerializedKMeansTree_Node*>(
               &_SerializedKMeansTree_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SerializedKMeansTree_Node& a, SerializedKMeansTree_Node& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKMeansTree_Node* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKMeansTree_Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedKMeansTree_Node* New() const final {
    return new SerializedKMeansTree_Node();
  }

  SerializedKMeansTree_Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedKMeansTree_Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKMeansTree_Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedKMeansTree_Node& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKMeansTree_Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.SerializedKMeansTree.Node";
  }
  protected:
  explicit SerializedKMeansTree_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCentersFieldNumber = 1,
    kIndicesFieldNumber = 2,
    kChildrenFieldNumber = 3,
    kResidualStdevsFieldNumber = 6,
    kLearnedSpillingThresholdFieldNumber = 4,
    kLeafIdFieldNumber = 5,
  };
  // repeated .research_scann.SerializedKMeansTree.Center centers = 1;
  int centers_size() const;
  private:
  int _internal_centers_size() const;
  public:
  void clear_centers();
  ::research_scann::SerializedKMeansTree_Center* mutable_centers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::SerializedKMeansTree_Center >*
      mutable_centers();
  private:
  const ::research_scann::SerializedKMeansTree_Center& _internal_centers(int index) const;
  ::research_scann::SerializedKMeansTree_Center* _internal_add_centers();
  public:
  const ::research_scann::SerializedKMeansTree_Center& centers(int index) const;
  ::research_scann::SerializedKMeansTree_Center* add_centers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::SerializedKMeansTree_Center >&
      centers() const;

  // repeated uint32 indices = 2;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_indices() const;
  void _internal_add_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_indices();

  // repeated .research_scann.SerializedKMeansTree.Node children = 3;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::research_scann::SerializedKMeansTree_Node* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::SerializedKMeansTree_Node >*
      mutable_children();
  private:
  const ::research_scann::SerializedKMeansTree_Node& _internal_children(int index) const;
  ::research_scann::SerializedKMeansTree_Node* _internal_add_children();
  public:
  const ::research_scann::SerializedKMeansTree_Node& children(int index) const;
  ::research_scann::SerializedKMeansTree_Node* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::SerializedKMeansTree_Node >&
      children() const;

  // repeated double residual_stdevs = 6 [packed = true];
  int residual_stdevs_size() const;
  private:
  int _internal_residual_stdevs_size() const;
  public:
  void clear_residual_stdevs();
  private:
  double _internal_residual_stdevs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_residual_stdevs() const;
  void _internal_add_residual_stdevs(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_residual_stdevs();
  public:
  double residual_stdevs(int index) const;
  void set_residual_stdevs(int index, double value);
  void add_residual_stdevs(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      residual_stdevs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_residual_stdevs();

  // optional double learned_spilling_threshold = 4;
  bool has_learned_spilling_threshold() const;
  private:
  bool _internal_has_learned_spilling_threshold() const;
  public:
  void clear_learned_spilling_threshold();
  double learned_spilling_threshold() const;
  void set_learned_spilling_threshold(double value);
  private:
  double _internal_learned_spilling_threshold() const;
  void _internal_set_learned_spilling_threshold(double value);
  public:

  // optional int32 leaf_id = 5 [default = -1];
  bool has_leaf_id() const;
  private:
  bool _internal_has_leaf_id() const;
  public:
  void clear_leaf_id();
  ::PROTOBUF_NAMESPACE_ID::int32 leaf_id() const;
  void set_leaf_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leaf_id() const;
  void _internal_set_leaf_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:research_scann.SerializedKMeansTree.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::SerializedKMeansTree_Center > centers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > indices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::SerializedKMeansTree_Node > children_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > residual_stdevs_;
  double learned_spilling_threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 leaf_id_;
  friend struct ::TableStruct_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto;
};
// -------------------------------------------------------------------

class SerializedKMeansTree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:research_scann.SerializedKMeansTree) */ {
 public:
  inline SerializedKMeansTree() : SerializedKMeansTree(nullptr) {}
  ~SerializedKMeansTree() override;
  explicit constexpr SerializedKMeansTree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKMeansTree(const SerializedKMeansTree& from);
  SerializedKMeansTree(SerializedKMeansTree&& from) noexcept
    : SerializedKMeansTree() {
    *this = ::std::move(from);
  }

  inline SerializedKMeansTree& operator=(const SerializedKMeansTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKMeansTree& operator=(SerializedKMeansTree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKMeansTree& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKMeansTree* internal_default_instance() {
    return reinterpret_cast<const SerializedKMeansTree*>(
               &_SerializedKMeansTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SerializedKMeansTree& a, SerializedKMeansTree& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKMeansTree* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKMeansTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedKMeansTree* New() const final {
    return new SerializedKMeansTree();
  }

  SerializedKMeansTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedKMeansTree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKMeansTree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SerializedKMeansTree& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKMeansTree* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "research_scann.SerializedKMeansTree";
  }
  protected:
  explicit SerializedKMeansTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SerializedKMeansTree_Center Center;
  typedef SerializedKMeansTree_Node Node;

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 1,
    kLearnedSpillingTypeFieldNumber = 3,
    kMaxCentersForLearnedSpillingFieldNumber = 4,
  };
  // optional .research_scann.SerializedKMeansTree.Node root = 1;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::research_scann::SerializedKMeansTree_Node& root() const;
  PROTOBUF_MUST_USE_RESULT ::research_scann::SerializedKMeansTree_Node* release_root();
  ::research_scann::SerializedKMeansTree_Node* mutable_root();
  void set_allocated_root(::research_scann::SerializedKMeansTree_Node* root);
  private:
  const ::research_scann::SerializedKMeansTree_Node& _internal_root() const;
  ::research_scann::SerializedKMeansTree_Node* _internal_mutable_root();
  public:
  void unsafe_arena_set_allocated_root(
      ::research_scann::SerializedKMeansTree_Node* root);
  ::research_scann::SerializedKMeansTree_Node* unsafe_arena_release_root();

  // optional .research_scann.DatabaseSpillingConfig.SpillingType learned_spilling_type = 3 [default = NO_SPILLING];
  bool has_learned_spilling_type() const;
  private:
  bool _internal_has_learned_spilling_type() const;
  public:
  void clear_learned_spilling_type();
  ::research_scann::DatabaseSpillingConfig_SpillingType learned_spilling_type() const;
  void set_learned_spilling_type(::research_scann::DatabaseSpillingConfig_SpillingType value);
  private:
  ::research_scann::DatabaseSpillingConfig_SpillingType _internal_learned_spilling_type() const;
  void _internal_set_learned_spilling_type(::research_scann::DatabaseSpillingConfig_SpillingType value);
  public:

  // optional uint32 max_centers_for_learned_spilling = 4 [default = 4294967295];
  bool has_max_centers_for_learned_spilling() const;
  private:
  bool _internal_has_max_centers_for_learned_spilling() const;
  public:
  void clear_max_centers_for_learned_spilling();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_centers_for_learned_spilling() const;
  void set_max_centers_for_learned_spilling(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_centers_for_learned_spilling() const;
  void _internal_set_max_centers_for_learned_spilling(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:research_scann.SerializedKMeansTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::research_scann::SerializedKMeansTree_Node* root_;
  int learned_spilling_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_centers_for_learned_spilling_;
  friend struct ::TableStruct_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SerializedKMeansTree_Center

// repeated double dimension = 1 [packed = true];
inline int SerializedKMeansTree_Center::_internal_dimension_size() const {
  return dimension_.size();
}
inline int SerializedKMeansTree_Center::dimension_size() const {
  return _internal_dimension_size();
}
inline void SerializedKMeansTree_Center::clear_dimension() {
  dimension_.Clear();
}
inline double SerializedKMeansTree_Center::_internal_dimension(int index) const {
  return dimension_.Get(index);
}
inline double SerializedKMeansTree_Center::dimension(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedKMeansTree.Center.dimension)
  return _internal_dimension(index);
}
inline void SerializedKMeansTree_Center::set_dimension(int index, double value) {
  dimension_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.SerializedKMeansTree.Center.dimension)
}
inline void SerializedKMeansTree_Center::_internal_add_dimension(double value) {
  dimension_.Add(value);
}
inline void SerializedKMeansTree_Center::add_dimension(double value) {
  _internal_add_dimension(value);
  // @@protoc_insertion_point(field_add:research_scann.SerializedKMeansTree.Center.dimension)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SerializedKMeansTree_Center::_internal_dimension() const {
  return dimension_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SerializedKMeansTree_Center::dimension() const {
  // @@protoc_insertion_point(field_list:research_scann.SerializedKMeansTree.Center.dimension)
  return _internal_dimension();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SerializedKMeansTree_Center::_internal_mutable_dimension() {
  return &dimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SerializedKMeansTree_Center::mutable_dimension() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.SerializedKMeansTree.Center.dimension)
  return _internal_mutable_dimension();
}

// repeated float float_dimension = 2 [packed = true];
inline int SerializedKMeansTree_Center::_internal_float_dimension_size() const {
  return float_dimension_.size();
}
inline int SerializedKMeansTree_Center::float_dimension_size() const {
  return _internal_float_dimension_size();
}
inline void SerializedKMeansTree_Center::clear_float_dimension() {
  float_dimension_.Clear();
}
inline float SerializedKMeansTree_Center::_internal_float_dimension(int index) const {
  return float_dimension_.Get(index);
}
inline float SerializedKMeansTree_Center::float_dimension(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedKMeansTree.Center.float_dimension)
  return _internal_float_dimension(index);
}
inline void SerializedKMeansTree_Center::set_float_dimension(int index, float value) {
  float_dimension_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.SerializedKMeansTree.Center.float_dimension)
}
inline void SerializedKMeansTree_Center::_internal_add_float_dimension(float value) {
  float_dimension_.Add(value);
}
inline void SerializedKMeansTree_Center::add_float_dimension(float value) {
  _internal_add_float_dimension(value);
  // @@protoc_insertion_point(field_add:research_scann.SerializedKMeansTree.Center.float_dimension)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SerializedKMeansTree_Center::_internal_float_dimension() const {
  return float_dimension_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SerializedKMeansTree_Center::float_dimension() const {
  // @@protoc_insertion_point(field_list:research_scann.SerializedKMeansTree.Center.float_dimension)
  return _internal_float_dimension();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SerializedKMeansTree_Center::_internal_mutable_float_dimension() {
  return &float_dimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SerializedKMeansTree_Center::mutable_float_dimension() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.SerializedKMeansTree.Center.float_dimension)
  return _internal_mutable_float_dimension();
}

// -------------------------------------------------------------------

// SerializedKMeansTree_Node

// repeated .research_scann.SerializedKMeansTree.Center centers = 1;
inline int SerializedKMeansTree_Node::_internal_centers_size() const {
  return centers_.size();
}
inline int SerializedKMeansTree_Node::centers_size() const {
  return _internal_centers_size();
}
inline void SerializedKMeansTree_Node::clear_centers() {
  centers_.Clear();
}
inline ::research_scann::SerializedKMeansTree_Center* SerializedKMeansTree_Node::mutable_centers(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.SerializedKMeansTree.Node.centers)
  return centers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::SerializedKMeansTree_Center >*
SerializedKMeansTree_Node::mutable_centers() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.SerializedKMeansTree.Node.centers)
  return &centers_;
}
inline const ::research_scann::SerializedKMeansTree_Center& SerializedKMeansTree_Node::_internal_centers(int index) const {
  return centers_.Get(index);
}
inline const ::research_scann::SerializedKMeansTree_Center& SerializedKMeansTree_Node::centers(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedKMeansTree.Node.centers)
  return _internal_centers(index);
}
inline ::research_scann::SerializedKMeansTree_Center* SerializedKMeansTree_Node::_internal_add_centers() {
  return centers_.Add();
}
inline ::research_scann::SerializedKMeansTree_Center* SerializedKMeansTree_Node::add_centers() {
  ::research_scann::SerializedKMeansTree_Center* _add = _internal_add_centers();
  // @@protoc_insertion_point(field_add:research_scann.SerializedKMeansTree.Node.centers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::SerializedKMeansTree_Center >&
SerializedKMeansTree_Node::centers() const {
  // @@protoc_insertion_point(field_list:research_scann.SerializedKMeansTree.Node.centers)
  return centers_;
}

// repeated uint32 indices = 2;
inline int SerializedKMeansTree_Node::_internal_indices_size() const {
  return indices_.size();
}
inline int SerializedKMeansTree_Node::indices_size() const {
  return _internal_indices_size();
}
inline void SerializedKMeansTree_Node::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SerializedKMeansTree_Node::_internal_indices(int index) const {
  return indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SerializedKMeansTree_Node::indices(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedKMeansTree.Node.indices)
  return _internal_indices(index);
}
inline void SerializedKMeansTree_Node::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.SerializedKMeansTree.Node.indices)
}
inline void SerializedKMeansTree_Node::_internal_add_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  indices_.Add(value);
}
inline void SerializedKMeansTree_Node::add_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:research_scann.SerializedKMeansTree.Node.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SerializedKMeansTree_Node::_internal_indices() const {
  return indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SerializedKMeansTree_Node::indices() const {
  // @@protoc_insertion_point(field_list:research_scann.SerializedKMeansTree.Node.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SerializedKMeansTree_Node::_internal_mutable_indices() {
  return &indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SerializedKMeansTree_Node::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.SerializedKMeansTree.Node.indices)
  return _internal_mutable_indices();
}

// repeated .research_scann.SerializedKMeansTree.Node children = 3;
inline int SerializedKMeansTree_Node::_internal_children_size() const {
  return children_.size();
}
inline int SerializedKMeansTree_Node::children_size() const {
  return _internal_children_size();
}
inline void SerializedKMeansTree_Node::clear_children() {
  children_.Clear();
}
inline ::research_scann::SerializedKMeansTree_Node* SerializedKMeansTree_Node::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:research_scann.SerializedKMeansTree.Node.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::SerializedKMeansTree_Node >*
SerializedKMeansTree_Node::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.SerializedKMeansTree.Node.children)
  return &children_;
}
inline const ::research_scann::SerializedKMeansTree_Node& SerializedKMeansTree_Node::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::research_scann::SerializedKMeansTree_Node& SerializedKMeansTree_Node::children(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedKMeansTree.Node.children)
  return _internal_children(index);
}
inline ::research_scann::SerializedKMeansTree_Node* SerializedKMeansTree_Node::_internal_add_children() {
  return children_.Add();
}
inline ::research_scann::SerializedKMeansTree_Node* SerializedKMeansTree_Node::add_children() {
  ::research_scann::SerializedKMeansTree_Node* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:research_scann.SerializedKMeansTree.Node.children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::research_scann::SerializedKMeansTree_Node >&
SerializedKMeansTree_Node::children() const {
  // @@protoc_insertion_point(field_list:research_scann.SerializedKMeansTree.Node.children)
  return children_;
}

// optional double learned_spilling_threshold = 4;
inline bool SerializedKMeansTree_Node::_internal_has_learned_spilling_threshold() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SerializedKMeansTree_Node::has_learned_spilling_threshold() const {
  return _internal_has_learned_spilling_threshold();
}
inline void SerializedKMeansTree_Node::clear_learned_spilling_threshold() {
  learned_spilling_threshold_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SerializedKMeansTree_Node::_internal_learned_spilling_threshold() const {
  return learned_spilling_threshold_;
}
inline double SerializedKMeansTree_Node::learned_spilling_threshold() const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedKMeansTree.Node.learned_spilling_threshold)
  return _internal_learned_spilling_threshold();
}
inline void SerializedKMeansTree_Node::_internal_set_learned_spilling_threshold(double value) {
  _has_bits_[0] |= 0x00000001u;
  learned_spilling_threshold_ = value;
}
inline void SerializedKMeansTree_Node::set_learned_spilling_threshold(double value) {
  _internal_set_learned_spilling_threshold(value);
  // @@protoc_insertion_point(field_set:research_scann.SerializedKMeansTree.Node.learned_spilling_threshold)
}

// optional int32 leaf_id = 5 [default = -1];
inline bool SerializedKMeansTree_Node::_internal_has_leaf_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SerializedKMeansTree_Node::has_leaf_id() const {
  return _internal_has_leaf_id();
}
inline void SerializedKMeansTree_Node::clear_leaf_id() {
  leaf_id_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SerializedKMeansTree_Node::_internal_leaf_id() const {
  return leaf_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SerializedKMeansTree_Node::leaf_id() const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedKMeansTree.Node.leaf_id)
  return _internal_leaf_id();
}
inline void SerializedKMeansTree_Node::_internal_set_leaf_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  leaf_id_ = value;
}
inline void SerializedKMeansTree_Node::set_leaf_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leaf_id(value);
  // @@protoc_insertion_point(field_set:research_scann.SerializedKMeansTree.Node.leaf_id)
}

// repeated double residual_stdevs = 6 [packed = true];
inline int SerializedKMeansTree_Node::_internal_residual_stdevs_size() const {
  return residual_stdevs_.size();
}
inline int SerializedKMeansTree_Node::residual_stdevs_size() const {
  return _internal_residual_stdevs_size();
}
inline void SerializedKMeansTree_Node::clear_residual_stdevs() {
  residual_stdevs_.Clear();
}
inline double SerializedKMeansTree_Node::_internal_residual_stdevs(int index) const {
  return residual_stdevs_.Get(index);
}
inline double SerializedKMeansTree_Node::residual_stdevs(int index) const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedKMeansTree.Node.residual_stdevs)
  return _internal_residual_stdevs(index);
}
inline void SerializedKMeansTree_Node::set_residual_stdevs(int index, double value) {
  residual_stdevs_.Set(index, value);
  // @@protoc_insertion_point(field_set:research_scann.SerializedKMeansTree.Node.residual_stdevs)
}
inline void SerializedKMeansTree_Node::_internal_add_residual_stdevs(double value) {
  residual_stdevs_.Add(value);
}
inline void SerializedKMeansTree_Node::add_residual_stdevs(double value) {
  _internal_add_residual_stdevs(value);
  // @@protoc_insertion_point(field_add:research_scann.SerializedKMeansTree.Node.residual_stdevs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SerializedKMeansTree_Node::_internal_residual_stdevs() const {
  return residual_stdevs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SerializedKMeansTree_Node::residual_stdevs() const {
  // @@protoc_insertion_point(field_list:research_scann.SerializedKMeansTree.Node.residual_stdevs)
  return _internal_residual_stdevs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SerializedKMeansTree_Node::_internal_mutable_residual_stdevs() {
  return &residual_stdevs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SerializedKMeansTree_Node::mutable_residual_stdevs() {
  // @@protoc_insertion_point(field_mutable_list:research_scann.SerializedKMeansTree.Node.residual_stdevs)
  return _internal_mutable_residual_stdevs();
}

// -------------------------------------------------------------------

// SerializedKMeansTree

// optional .research_scann.SerializedKMeansTree.Node root = 1;
inline bool SerializedKMeansTree::_internal_has_root() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || root_ != nullptr);
  return value;
}
inline bool SerializedKMeansTree::has_root() const {
  return _internal_has_root();
}
inline void SerializedKMeansTree::clear_root() {
  if (root_ != nullptr) root_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::research_scann::SerializedKMeansTree_Node& SerializedKMeansTree::_internal_root() const {
  const ::research_scann::SerializedKMeansTree_Node* p = root_;
  return p != nullptr ? *p : reinterpret_cast<const ::research_scann::SerializedKMeansTree_Node&>(
      ::research_scann::_SerializedKMeansTree_Node_default_instance_);
}
inline const ::research_scann::SerializedKMeansTree_Node& SerializedKMeansTree::root() const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedKMeansTree.root)
  return _internal_root();
}
inline void SerializedKMeansTree::unsafe_arena_set_allocated_root(
    ::research_scann::SerializedKMeansTree_Node* root) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_);
  }
  root_ = root;
  if (root) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:research_scann.SerializedKMeansTree.root)
}
inline ::research_scann::SerializedKMeansTree_Node* SerializedKMeansTree::release_root() {
  _has_bits_[0] &= ~0x00000001u;
  ::research_scann::SerializedKMeansTree_Node* temp = root_;
  root_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::research_scann::SerializedKMeansTree_Node* SerializedKMeansTree::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_release:research_scann.SerializedKMeansTree.root)
  _has_bits_[0] &= ~0x00000001u;
  ::research_scann::SerializedKMeansTree_Node* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::research_scann::SerializedKMeansTree_Node* SerializedKMeansTree::_internal_mutable_root() {
  _has_bits_[0] |= 0x00000001u;
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::research_scann::SerializedKMeansTree_Node>(GetArenaForAllocation());
    root_ = p;
  }
  return root_;
}
inline ::research_scann::SerializedKMeansTree_Node* SerializedKMeansTree::mutable_root() {
  ::research_scann::SerializedKMeansTree_Node* _msg = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:research_scann.SerializedKMeansTree.root)
  return _msg;
}
inline void SerializedKMeansTree::set_allocated_root(::research_scann::SerializedKMeansTree_Node* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete root_;
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::research_scann::SerializedKMeansTree_Node>::GetOwningArena(root);
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:research_scann.SerializedKMeansTree.root)
}

// optional .research_scann.DatabaseSpillingConfig.SpillingType learned_spilling_type = 3 [default = NO_SPILLING];
inline bool SerializedKMeansTree::_internal_has_learned_spilling_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SerializedKMeansTree::has_learned_spilling_type() const {
  return _internal_has_learned_spilling_type();
}
inline void SerializedKMeansTree::clear_learned_spilling_type() {
  learned_spilling_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::research_scann::DatabaseSpillingConfig_SpillingType SerializedKMeansTree::_internal_learned_spilling_type() const {
  return static_cast< ::research_scann::DatabaseSpillingConfig_SpillingType >(learned_spilling_type_);
}
inline ::research_scann::DatabaseSpillingConfig_SpillingType SerializedKMeansTree::learned_spilling_type() const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedKMeansTree.learned_spilling_type)
  return _internal_learned_spilling_type();
}
inline void SerializedKMeansTree::_internal_set_learned_spilling_type(::research_scann::DatabaseSpillingConfig_SpillingType value) {
  assert(::research_scann::DatabaseSpillingConfig_SpillingType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  learned_spilling_type_ = value;
}
inline void SerializedKMeansTree::set_learned_spilling_type(::research_scann::DatabaseSpillingConfig_SpillingType value) {
  _internal_set_learned_spilling_type(value);
  // @@protoc_insertion_point(field_set:research_scann.SerializedKMeansTree.learned_spilling_type)
}

// optional uint32 max_centers_for_learned_spilling = 4 [default = 4294967295];
inline bool SerializedKMeansTree::_internal_has_max_centers_for_learned_spilling() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SerializedKMeansTree::has_max_centers_for_learned_spilling() const {
  return _internal_has_max_centers_for_learned_spilling();
}
inline void SerializedKMeansTree::clear_max_centers_for_learned_spilling() {
  max_centers_for_learned_spilling_ = 4294967295u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SerializedKMeansTree::_internal_max_centers_for_learned_spilling() const {
  return max_centers_for_learned_spilling_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SerializedKMeansTree::max_centers_for_learned_spilling() const {
  // @@protoc_insertion_point(field_get:research_scann.SerializedKMeansTree.max_centers_for_learned_spilling)
  return _internal_max_centers_for_learned_spilling();
}
inline void SerializedKMeansTree::_internal_set_max_centers_for_learned_spilling(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_centers_for_learned_spilling_ = value;
}
inline void SerializedKMeansTree::set_max_centers_for_learned_spilling(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_centers_for_learned_spilling(value);
  // @@protoc_insertion_point(field_set:research_scann.SerializedKMeansTree.max_centers_for_learned_spilling)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace research_scann

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto
