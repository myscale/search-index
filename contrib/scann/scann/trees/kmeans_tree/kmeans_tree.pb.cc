// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scann/trees/kmeans_tree/kmeans_tree.proto

#include "scann/trees/kmeans_tree/kmeans_tree.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace research_scann {
constexpr SerializedKMeansTree_Center::SerializedKMeansTree_Center(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dimension_()
  , float_dimension_(){}
struct SerializedKMeansTree_CenterDefaultTypeInternal {
  constexpr SerializedKMeansTree_CenterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SerializedKMeansTree_CenterDefaultTypeInternal() {}
  union {
    SerializedKMeansTree_Center _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SerializedKMeansTree_CenterDefaultTypeInternal _SerializedKMeansTree_Center_default_instance_;
constexpr SerializedKMeansTree_Node::SerializedKMeansTree_Node(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : centers_()
  , indices_()
  , children_()
  , residual_stdevs_()
  , learned_spilling_threshold_(0)
  , leaf_id_(-1){}
struct SerializedKMeansTree_NodeDefaultTypeInternal {
  constexpr SerializedKMeansTree_NodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SerializedKMeansTree_NodeDefaultTypeInternal() {}
  union {
    SerializedKMeansTree_Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SerializedKMeansTree_NodeDefaultTypeInternal _SerializedKMeansTree_Node_default_instance_;
constexpr SerializedKMeansTree::SerializedKMeansTree(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : root_(nullptr)
  , learned_spilling_type_(0)

  , max_centers_for_learned_spilling_(4294967295u){}
struct SerializedKMeansTreeDefaultTypeInternal {
  constexpr SerializedKMeansTreeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SerializedKMeansTreeDefaultTypeInternal() {}
  union {
    SerializedKMeansTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SerializedKMeansTreeDefaultTypeInternal _SerializedKMeansTree_default_instance_;
}  // namespace research_scann
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree_Center, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree_Center, dimension_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree_Center, float_dimension_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree_Node, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree_Node, centers_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree_Node, indices_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree_Node, children_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree_Node, learned_spilling_threshold_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree_Node, leaf_id_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree_Node, residual_stdevs_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree, root_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree, learned_spilling_type_),
  PROTOBUF_FIELD_OFFSET(::research_scann::SerializedKMeansTree, max_centers_for_learned_spilling_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::research_scann::SerializedKMeansTree_Center)},
  { 7, 18, sizeof(::research_scann::SerializedKMeansTree_Node)},
  { 24, 32, sizeof(::research_scann::SerializedKMeansTree)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_SerializedKMeansTree_Center_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_SerializedKMeansTree_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::research_scann::_SerializedKMeansTree_default_instance_),
};

const char descriptor_table_protodef_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)scann/trees/kmeans_tree/kmeans_tree.pr"
  "oto\022\016research_scann\032\036scann/proto/partiti"
  "oning.proto\"\217\004\n\024SerializedKMeansTree\0227\n\004"
  "root\030\001 \001(\0132).research_scann.SerializedKM"
  "eansTree.Node\022_\n\025learned_spilling_type\030\003"
  " \001(\01623.research_scann.DatabaseSpillingCo"
  "nfig.SpillingType:\013NO_SPILLING\0224\n max_ce"
  "nters_for_learned_spilling\030\004 \001(\r:\n429496"
  "7295\032<\n\006Center\022\025\n\tdimension\030\001 \003(\001B\002\020\001\022\033\n"
  "\017float_dimension\030\002 \003(\002B\002\020\001\032\350\001\n\004Node\022<\n\007c"
  "enters\030\001 \003(\0132+.research_scann.Serialized"
  "KMeansTree.Center\022\017\n\007indices\030\002 \003(\r\022;\n\010ch"
  "ildren\030\003 \003(\0132).research_scann.Serialized"
  "KMeansTree.Node\022\"\n\032learned_spilling_thre"
  "shold\030\004 \001(\001\022\023\n\007leaf_id\030\005 \001(\005:\002-1\022\033\n\017resi"
  "dual_stdevs\030\006 \003(\001B\002\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto_deps[1] = {
  &::descriptor_table_scann_2fproto_2fpartitioning_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto = {
  false, false, 621, descriptor_table_protodef_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto, "scann/trees/kmeans_tree/kmeans_tree.proto", 
  &descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto_once, descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto::offsets,
  file_level_metadata_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto, file_level_enum_descriptors_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto, file_level_service_descriptors_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto_getter() {
  return &descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto(&descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto);
namespace research_scann {

// ===================================================================

class SerializedKMeansTree_Center::_Internal {
 public:
};

SerializedKMeansTree_Center::SerializedKMeansTree_Center(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dimension_(arena),
  float_dimension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.SerializedKMeansTree.Center)
}
SerializedKMeansTree_Center::SerializedKMeansTree_Center(const SerializedKMeansTree_Center& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dimension_(from.dimension_),
      float_dimension_(from.float_dimension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:research_scann.SerializedKMeansTree.Center)
}

inline void SerializedKMeansTree_Center::SharedCtor() {
}

SerializedKMeansTree_Center::~SerializedKMeansTree_Center() {
  // @@protoc_insertion_point(destructor:research_scann.SerializedKMeansTree.Center)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SerializedKMeansTree_Center::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SerializedKMeansTree_Center::ArenaDtor(void* object) {
  SerializedKMeansTree_Center* _this = reinterpret_cast< SerializedKMeansTree_Center* >(object);
  (void)_this;
}
void SerializedKMeansTree_Center::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedKMeansTree_Center::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SerializedKMeansTree_Center::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.SerializedKMeansTree.Center)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_.Clear();
  float_dimension_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedKMeansTree_Center::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double dimension = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_dimension(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_dimension(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated float float_dimension = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_dimension(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_float_dimension(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedKMeansTree_Center::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.SerializedKMeansTree.Center)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double dimension = 1 [packed = true];
  if (this->_internal_dimension_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_dimension(), target);
  }

  // repeated float float_dimension = 2 [packed = true];
  if (this->_internal_float_dimension_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_float_dimension(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.SerializedKMeansTree.Center)
  return target;
}

size_t SerializedKMeansTree_Center::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.SerializedKMeansTree.Center)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double dimension = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dimension_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float float_dimension = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_dimension_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SerializedKMeansTree_Center::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SerializedKMeansTree_Center::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SerializedKMeansTree_Center::GetClassData() const { return &_class_data_; }

void SerializedKMeansTree_Center::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SerializedKMeansTree_Center *>(to)->MergeFrom(
      static_cast<const SerializedKMeansTree_Center &>(from));
}


void SerializedKMeansTree_Center::MergeFrom(const SerializedKMeansTree_Center& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.SerializedKMeansTree.Center)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimension_.MergeFrom(from.dimension_);
  float_dimension_.MergeFrom(from.float_dimension_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SerializedKMeansTree_Center::CopyFrom(const SerializedKMeansTree_Center& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.SerializedKMeansTree.Center)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKMeansTree_Center::IsInitialized() const {
  return true;
}

void SerializedKMeansTree_Center::InternalSwap(SerializedKMeansTree_Center* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dimension_.InternalSwap(&other->dimension_);
  float_dimension_.InternalSwap(&other->float_dimension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedKMeansTree_Center::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto_getter, &descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto_once,
      file_level_metadata_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto[0]);
}

// ===================================================================

class SerializedKMeansTree_Node::_Internal {
 public:
  using HasBits = decltype(std::declval<SerializedKMeansTree_Node>()._has_bits_);
  static void set_has_learned_spilling_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leaf_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SerializedKMeansTree_Node::SerializedKMeansTree_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  centers_(arena),
  indices_(arena),
  children_(arena),
  residual_stdevs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.SerializedKMeansTree.Node)
}
SerializedKMeansTree_Node::SerializedKMeansTree_Node(const SerializedKMeansTree_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      centers_(from.centers_),
      indices_(from.indices_),
      children_(from.children_),
      residual_stdevs_(from.residual_stdevs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&learned_spilling_threshold_, &from.learned_spilling_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&leaf_id_) -
    reinterpret_cast<char*>(&learned_spilling_threshold_)) + sizeof(leaf_id_));
  // @@protoc_insertion_point(copy_constructor:research_scann.SerializedKMeansTree.Node)
}

inline void SerializedKMeansTree_Node::SharedCtor() {
learned_spilling_threshold_ = 0;
leaf_id_ = -1;
}

SerializedKMeansTree_Node::~SerializedKMeansTree_Node() {
  // @@protoc_insertion_point(destructor:research_scann.SerializedKMeansTree.Node)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SerializedKMeansTree_Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SerializedKMeansTree_Node::ArenaDtor(void* object) {
  SerializedKMeansTree_Node* _this = reinterpret_cast< SerializedKMeansTree_Node* >(object);
  (void)_this;
}
void SerializedKMeansTree_Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedKMeansTree_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SerializedKMeansTree_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.SerializedKMeansTree.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  centers_.Clear();
  indices_.Clear();
  children_.Clear();
  residual_stdevs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    learned_spilling_threshold_ = 0;
    leaf_id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedKMeansTree_Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .research_scann.SerializedKMeansTree.Center centers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_centers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .research_scann.SerializedKMeansTree.Node children = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double learned_spilling_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_learned_spilling_threshold(&has_bits);
          learned_spilling_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 leaf_id = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_leaf_id(&has_bits);
          leaf_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double residual_stdevs = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_residual_stdevs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_residual_stdevs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedKMeansTree_Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.SerializedKMeansTree.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .research_scann.SerializedKMeansTree.Center centers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_centers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_centers(i), target, stream);
  }

  // repeated uint32 indices = 2;
  for (int i = 0, n = this->_internal_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_indices(i), target);
  }

  // repeated .research_scann.SerializedKMeansTree.Node children = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_children(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional double learned_spilling_threshold = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_learned_spilling_threshold(), target);
  }

  // optional int32 leaf_id = 5 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_leaf_id(), target);
  }

  // repeated double residual_stdevs = 6 [packed = true];
  if (this->_internal_residual_stdevs_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_residual_stdevs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.SerializedKMeansTree.Node)
  return target;
}

size_t SerializedKMeansTree_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.SerializedKMeansTree.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .research_scann.SerializedKMeansTree.Center centers = 1;
  total_size += 1UL * this->_internal_centers_size();
  for (const auto& msg : this->centers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 indices = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->indices_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_indices_size());
    total_size += data_size;
  }

  // repeated .research_scann.SerializedKMeansTree.Node children = 3;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double residual_stdevs = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_residual_stdevs_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double learned_spilling_threshold = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 leaf_id = 5 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_leaf_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SerializedKMeansTree_Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SerializedKMeansTree_Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SerializedKMeansTree_Node::GetClassData() const { return &_class_data_; }

void SerializedKMeansTree_Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SerializedKMeansTree_Node *>(to)->MergeFrom(
      static_cast<const SerializedKMeansTree_Node &>(from));
}


void SerializedKMeansTree_Node::MergeFrom(const SerializedKMeansTree_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.SerializedKMeansTree.Node)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  centers_.MergeFrom(from.centers_);
  indices_.MergeFrom(from.indices_);
  children_.MergeFrom(from.children_);
  residual_stdevs_.MergeFrom(from.residual_stdevs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      learned_spilling_threshold_ = from.learned_spilling_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      leaf_id_ = from.leaf_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SerializedKMeansTree_Node::CopyFrom(const SerializedKMeansTree_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.SerializedKMeansTree.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKMeansTree_Node::IsInitialized() const {
  return true;
}

void SerializedKMeansTree_Node::InternalSwap(SerializedKMeansTree_Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  centers_.InternalSwap(&other->centers_);
  indices_.InternalSwap(&other->indices_);
  children_.InternalSwap(&other->children_);
  residual_stdevs_.InternalSwap(&other->residual_stdevs_);
  swap(learned_spilling_threshold_, other->learned_spilling_threshold_);
  swap(leaf_id_, other->leaf_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedKMeansTree_Node::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto_getter, &descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto_once,
      file_level_metadata_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto[1]);
}

// ===================================================================

class SerializedKMeansTree::_Internal {
 public:
  using HasBits = decltype(std::declval<SerializedKMeansTree>()._has_bits_);
  static const ::research_scann::SerializedKMeansTree_Node& root(const SerializedKMeansTree* msg);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_learned_spilling_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_centers_for_learned_spilling(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::research_scann::SerializedKMeansTree_Node&
SerializedKMeansTree::_Internal::root(const SerializedKMeansTree* msg) {
  return *msg->root_;
}
SerializedKMeansTree::SerializedKMeansTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:research_scann.SerializedKMeansTree)
}
SerializedKMeansTree::SerializedKMeansTree(const SerializedKMeansTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_root()) {
    root_ = new ::research_scann::SerializedKMeansTree_Node(*from.root_);
  } else {
    root_ = nullptr;
  }
  ::memcpy(&learned_spilling_type_, &from.learned_spilling_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_centers_for_learned_spilling_) -
    reinterpret_cast<char*>(&learned_spilling_type_)) + sizeof(max_centers_for_learned_spilling_));
  // @@protoc_insertion_point(copy_constructor:research_scann.SerializedKMeansTree)
}

inline void SerializedKMeansTree::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&root_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&learned_spilling_type_) -
    reinterpret_cast<char*>(&root_)) + sizeof(learned_spilling_type_));
max_centers_for_learned_spilling_ = 4294967295u;
}

SerializedKMeansTree::~SerializedKMeansTree() {
  // @@protoc_insertion_point(destructor:research_scann.SerializedKMeansTree)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SerializedKMeansTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete root_;
}

void SerializedKMeansTree::ArenaDtor(void* object) {
  SerializedKMeansTree* _this = reinterpret_cast< SerializedKMeansTree* >(object);
  (void)_this;
}
void SerializedKMeansTree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializedKMeansTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SerializedKMeansTree::Clear() {
// @@protoc_insertion_point(message_clear_start:research_scann.SerializedKMeansTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(root_ != nullptr);
    root_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    learned_spilling_type_ = 0;
    max_centers_for_learned_spilling_ = 4294967295u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedKMeansTree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .research_scann.SerializedKMeansTree.Node root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .research_scann.DatabaseSpillingConfig.SpillingType learned_spilling_type = 3 [default = NO_SPILLING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::research_scann::DatabaseSpillingConfig_SpillingType_IsValid(val))) {
            _internal_set_learned_spilling_type(static_cast<::research_scann::DatabaseSpillingConfig_SpillingType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 max_centers_for_learned_spilling = 4 [default = 4294967295];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_centers_for_learned_spilling(&has_bits);
          max_centers_for_learned_spilling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializedKMeansTree::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:research_scann.SerializedKMeansTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .research_scann.SerializedKMeansTree.Node root = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::root(this), target, stream);
  }

  // optional .research_scann.DatabaseSpillingConfig.SpillingType learned_spilling_type = 3 [default = NO_SPILLING];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_learned_spilling_type(), target);
  }

  // optional uint32 max_centers_for_learned_spilling = 4 [default = 4294967295];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_centers_for_learned_spilling(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:research_scann.SerializedKMeansTree)
  return target;
}

size_t SerializedKMeansTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:research_scann.SerializedKMeansTree)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .research_scann.SerializedKMeansTree.Node root = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *root_);
    }

    // optional .research_scann.DatabaseSpillingConfig.SpillingType learned_spilling_type = 3 [default = NO_SPILLING];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_learned_spilling_type());
    }

    // optional uint32 max_centers_for_learned_spilling = 4 [default = 4294967295];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_centers_for_learned_spilling());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SerializedKMeansTree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SerializedKMeansTree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SerializedKMeansTree::GetClassData() const { return &_class_data_; }

void SerializedKMeansTree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SerializedKMeansTree *>(to)->MergeFrom(
      static_cast<const SerializedKMeansTree &>(from));
}


void SerializedKMeansTree::MergeFrom(const SerializedKMeansTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:research_scann.SerializedKMeansTree)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_root()->::research_scann::SerializedKMeansTree_Node::MergeFrom(from._internal_root());
    }
    if (cached_has_bits & 0x00000002u) {
      learned_spilling_type_ = from.learned_spilling_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_centers_for_learned_spilling_ = from.max_centers_for_learned_spilling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SerializedKMeansTree::CopyFrom(const SerializedKMeansTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:research_scann.SerializedKMeansTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedKMeansTree::IsInitialized() const {
  return true;
}

void SerializedKMeansTree::InternalSwap(SerializedKMeansTree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedKMeansTree, learned_spilling_type_)
      + sizeof(SerializedKMeansTree::learned_spilling_type_)
      - PROTOBUF_FIELD_OFFSET(SerializedKMeansTree, root_)>(
          reinterpret_cast<char*>(&root_),
          reinterpret_cast<char*>(&other->root_));
  swap(max_centers_for_learned_spilling_, other->max_centers_for_learned_spilling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedKMeansTree::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto_getter, &descriptor_table_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto_once,
      file_level_metadata_scann_2ftrees_2fkmeans_5ftree_2fkmeans_5ftree_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace research_scann
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::research_scann::SerializedKMeansTree_Center* Arena::CreateMaybeMessage< ::research_scann::SerializedKMeansTree_Center >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::SerializedKMeansTree_Center >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::SerializedKMeansTree_Node* Arena::CreateMaybeMessage< ::research_scann::SerializedKMeansTree_Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::SerializedKMeansTree_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::research_scann::SerializedKMeansTree* Arena::CreateMaybeMessage< ::research_scann::SerializedKMeansTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::research_scann::SerializedKMeansTree >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
