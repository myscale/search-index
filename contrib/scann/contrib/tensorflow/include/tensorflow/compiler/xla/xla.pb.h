// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/xla/xla.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fxla_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fxla_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/compiler/xla/service/hlo.pb.h"
#include "tensorflow/compiler/xla/xla_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcompiler_2fxla_2fxla_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[40]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
namespace xla {
class CompileRequest;
struct CompileRequestDefaultTypeInternal;
extern CompileRequestDefaultTypeInternal _CompileRequest_default_instance_;
class CompileResponse;
struct CompileResponseDefaultTypeInternal;
extern CompileResponseDefaultTypeInternal _CompileResponse_default_instance_;
class ComputationGraphStatsRequest;
struct ComputationGraphStatsRequestDefaultTypeInternal;
extern ComputationGraphStatsRequestDefaultTypeInternal _ComputationGraphStatsRequest_default_instance_;
class ComputationStatsResponse;
struct ComputationStatsResponseDefaultTypeInternal;
extern ComputationStatsResponseDefaultTypeInternal _ComputationStatsResponse_default_instance_;
class ComputeConstantGraphRequest;
struct ComputeConstantGraphRequestDefaultTypeInternal;
extern ComputeConstantGraphRequestDefaultTypeInternal _ComputeConstantGraphRequest_default_instance_;
class ComputeConstantResponse;
struct ComputeConstantResponseDefaultTypeInternal;
extern ComputeConstantResponseDefaultTypeInternal _ComputeConstantResponse_default_instance_;
class CreateChannelHandleRequest;
struct CreateChannelHandleRequestDefaultTypeInternal;
extern CreateChannelHandleRequestDefaultTypeInternal _CreateChannelHandleRequest_default_instance_;
class CreateChannelHandleResponse;
struct CreateChannelHandleResponseDefaultTypeInternal;
extern CreateChannelHandleResponseDefaultTypeInternal _CreateChannelHandleResponse_default_instance_;
class DebugOptions;
struct DebugOptionsDefaultTypeInternal;
extern DebugOptionsDefaultTypeInternal _DebugOptions_default_instance_;
class DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse;
struct DebugOptions_XlaBackendExtraOptionsEntry_DoNotUseDefaultTypeInternal;
extern DebugOptions_XlaBackendExtraOptionsEntry_DoNotUseDefaultTypeInternal _DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse_default_instance_;
class DeconstructTupleRequest;
struct DeconstructTupleRequestDefaultTypeInternal;
extern DeconstructTupleRequestDefaultTypeInternal _DeconstructTupleRequest_default_instance_;
class DeconstructTupleResponse;
struct DeconstructTupleResponseDefaultTypeInternal;
extern DeconstructTupleResponseDefaultTypeInternal _DeconstructTupleResponse_default_instance_;
class ExecuteGraphParallelRequest;
struct ExecuteGraphParallelRequestDefaultTypeInternal;
extern ExecuteGraphParallelRequestDefaultTypeInternal _ExecuteGraphParallelRequest_default_instance_;
class ExecuteGraphRequest;
struct ExecuteGraphRequestDefaultTypeInternal;
extern ExecuteGraphRequestDefaultTypeInternal _ExecuteGraphRequest_default_instance_;
class ExecuteParallelResponse;
struct ExecuteParallelResponseDefaultTypeInternal;
extern ExecuteParallelResponseDefaultTypeInternal _ExecuteParallelResponse_default_instance_;
class ExecuteRequest;
struct ExecuteRequestDefaultTypeInternal;
extern ExecuteRequestDefaultTypeInternal _ExecuteRequest_default_instance_;
class ExecuteResponse;
struct ExecuteResponseDefaultTypeInternal;
extern ExecuteResponseDefaultTypeInternal _ExecuteResponse_default_instance_;
class ExecutionOptions;
struct ExecutionOptionsDefaultTypeInternal;
extern ExecutionOptionsDefaultTypeInternal _ExecutionOptions_default_instance_;
class GetDeviceHandlesRequest;
struct GetDeviceHandlesRequestDefaultTypeInternal;
extern GetDeviceHandlesRequestDefaultTypeInternal _GetDeviceHandlesRequest_default_instance_;
class GetDeviceHandlesResponse;
struct GetDeviceHandlesResponseDefaultTypeInternal;
extern GetDeviceHandlesResponseDefaultTypeInternal _GetDeviceHandlesResponse_default_instance_;
class GetShapeRequest;
struct GetShapeRequestDefaultTypeInternal;
extern GetShapeRequestDefaultTypeInternal _GetShapeRequest_default_instance_;
class GetShapeResponse;
struct GetShapeResponseDefaultTypeInternal;
extern GetShapeResponseDefaultTypeInternal _GetShapeResponse_default_instance_;
class LoadDataRequest;
struct LoadDataRequestDefaultTypeInternal;
extern LoadDataRequestDefaultTypeInternal _LoadDataRequest_default_instance_;
class LoadDataResponse;
struct LoadDataResponseDefaultTypeInternal;
extern LoadDataResponseDefaultTypeInternal _LoadDataResponse_default_instance_;
class ResetDeviceRequest;
struct ResetDeviceRequestDefaultTypeInternal;
extern ResetDeviceRequestDefaultTypeInternal _ResetDeviceRequest_default_instance_;
class ResetDeviceResponse;
struct ResetDeviceResponseDefaultTypeInternal;
extern ResetDeviceResponseDefaultTypeInternal _ResetDeviceResponse_default_instance_;
class TransferFromOutfeedRequest;
struct TransferFromOutfeedRequestDefaultTypeInternal;
extern TransferFromOutfeedRequestDefaultTypeInternal _TransferFromOutfeedRequest_default_instance_;
class TransferFromOutfeedResponse;
struct TransferFromOutfeedResponseDefaultTypeInternal;
extern TransferFromOutfeedResponseDefaultTypeInternal _TransferFromOutfeedResponse_default_instance_;
class TransferToClientRequest;
struct TransferToClientRequestDefaultTypeInternal;
extern TransferToClientRequestDefaultTypeInternal _TransferToClientRequest_default_instance_;
class TransferToClientResponse;
struct TransferToClientResponseDefaultTypeInternal;
extern TransferToClientResponseDefaultTypeInternal _TransferToClientResponse_default_instance_;
class TransferToInfeedRequest;
struct TransferToInfeedRequestDefaultTypeInternal;
extern TransferToInfeedRequestDefaultTypeInternal _TransferToInfeedRequest_default_instance_;
class TransferToInfeedResponse;
struct TransferToInfeedResponseDefaultTypeInternal;
extern TransferToInfeedResponseDefaultTypeInternal _TransferToInfeedResponse_default_instance_;
class TransferToServerRequest;
struct TransferToServerRequestDefaultTypeInternal;
extern TransferToServerRequestDefaultTypeInternal _TransferToServerRequest_default_instance_;
class TransferToServerResponse;
struct TransferToServerResponseDefaultTypeInternal;
extern TransferToServerResponseDefaultTypeInternal _TransferToServerResponse_default_instance_;
class UnpackRequest;
struct UnpackRequestDefaultTypeInternal;
extern UnpackRequestDefaultTypeInternal _UnpackRequest_default_instance_;
class UnpackResponse;
struct UnpackResponseDefaultTypeInternal;
extern UnpackResponseDefaultTypeInternal _UnpackResponse_default_instance_;
class UnregisterRequest;
struct UnregisterRequestDefaultTypeInternal;
extern UnregisterRequestDefaultTypeInternal _UnregisterRequest_default_instance_;
class UnregisterResponse;
struct UnregisterResponseDefaultTypeInternal;
extern UnregisterResponseDefaultTypeInternal _UnregisterResponse_default_instance_;
class WaitForExecutionRequest;
struct WaitForExecutionRequestDefaultTypeInternal;
extern WaitForExecutionRequestDefaultTypeInternal _WaitForExecutionRequest_default_instance_;
class WaitForExecutionResponse;
struct WaitForExecutionResponseDefaultTypeInternal;
extern WaitForExecutionResponseDefaultTypeInternal _WaitForExecutionResponse_default_instance_;
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> ::xla::CompileRequest* Arena::CreateMaybeMessage<::xla::CompileRequest>(Arena*);
template<> ::xla::CompileResponse* Arena::CreateMaybeMessage<::xla::CompileResponse>(Arena*);
template<> ::xla::ComputationGraphStatsRequest* Arena::CreateMaybeMessage<::xla::ComputationGraphStatsRequest>(Arena*);
template<> ::xla::ComputationStatsResponse* Arena::CreateMaybeMessage<::xla::ComputationStatsResponse>(Arena*);
template<> ::xla::ComputeConstantGraphRequest* Arena::CreateMaybeMessage<::xla::ComputeConstantGraphRequest>(Arena*);
template<> ::xla::ComputeConstantResponse* Arena::CreateMaybeMessage<::xla::ComputeConstantResponse>(Arena*);
template<> ::xla::CreateChannelHandleRequest* Arena::CreateMaybeMessage<::xla::CreateChannelHandleRequest>(Arena*);
template<> ::xla::CreateChannelHandleResponse* Arena::CreateMaybeMessage<::xla::CreateChannelHandleResponse>(Arena*);
template<> ::xla::DebugOptions* Arena::CreateMaybeMessage<::xla::DebugOptions>(Arena*);
template<> ::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::xla::DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse>(Arena*);
template<> ::xla::DeconstructTupleRequest* Arena::CreateMaybeMessage<::xla::DeconstructTupleRequest>(Arena*);
template<> ::xla::DeconstructTupleResponse* Arena::CreateMaybeMessage<::xla::DeconstructTupleResponse>(Arena*);
template<> ::xla::ExecuteGraphParallelRequest* Arena::CreateMaybeMessage<::xla::ExecuteGraphParallelRequest>(Arena*);
template<> ::xla::ExecuteGraphRequest* Arena::CreateMaybeMessage<::xla::ExecuteGraphRequest>(Arena*);
template<> ::xla::ExecuteParallelResponse* Arena::CreateMaybeMessage<::xla::ExecuteParallelResponse>(Arena*);
template<> ::xla::ExecuteRequest* Arena::CreateMaybeMessage<::xla::ExecuteRequest>(Arena*);
template<> ::xla::ExecuteResponse* Arena::CreateMaybeMessage<::xla::ExecuteResponse>(Arena*);
template<> ::xla::ExecutionOptions* Arena::CreateMaybeMessage<::xla::ExecutionOptions>(Arena*);
template<> ::xla::GetDeviceHandlesRequest* Arena::CreateMaybeMessage<::xla::GetDeviceHandlesRequest>(Arena*);
template<> ::xla::GetDeviceHandlesResponse* Arena::CreateMaybeMessage<::xla::GetDeviceHandlesResponse>(Arena*);
template<> ::xla::GetShapeRequest* Arena::CreateMaybeMessage<::xla::GetShapeRequest>(Arena*);
template<> ::xla::GetShapeResponse* Arena::CreateMaybeMessage<::xla::GetShapeResponse>(Arena*);
template<> ::xla::LoadDataRequest* Arena::CreateMaybeMessage<::xla::LoadDataRequest>(Arena*);
template<> ::xla::LoadDataResponse* Arena::CreateMaybeMessage<::xla::LoadDataResponse>(Arena*);
template<> ::xla::ResetDeviceRequest* Arena::CreateMaybeMessage<::xla::ResetDeviceRequest>(Arena*);
template<> ::xla::ResetDeviceResponse* Arena::CreateMaybeMessage<::xla::ResetDeviceResponse>(Arena*);
template<> ::xla::TransferFromOutfeedRequest* Arena::CreateMaybeMessage<::xla::TransferFromOutfeedRequest>(Arena*);
template<> ::xla::TransferFromOutfeedResponse* Arena::CreateMaybeMessage<::xla::TransferFromOutfeedResponse>(Arena*);
template<> ::xla::TransferToClientRequest* Arena::CreateMaybeMessage<::xla::TransferToClientRequest>(Arena*);
template<> ::xla::TransferToClientResponse* Arena::CreateMaybeMessage<::xla::TransferToClientResponse>(Arena*);
template<> ::xla::TransferToInfeedRequest* Arena::CreateMaybeMessage<::xla::TransferToInfeedRequest>(Arena*);
template<> ::xla::TransferToInfeedResponse* Arena::CreateMaybeMessage<::xla::TransferToInfeedResponse>(Arena*);
template<> ::xla::TransferToServerRequest* Arena::CreateMaybeMessage<::xla::TransferToServerRequest>(Arena*);
template<> ::xla::TransferToServerResponse* Arena::CreateMaybeMessage<::xla::TransferToServerResponse>(Arena*);
template<> ::xla::UnpackRequest* Arena::CreateMaybeMessage<::xla::UnpackRequest>(Arena*);
template<> ::xla::UnpackResponse* Arena::CreateMaybeMessage<::xla::UnpackResponse>(Arena*);
template<> ::xla::UnregisterRequest* Arena::CreateMaybeMessage<::xla::UnregisterRequest>(Arena*);
template<> ::xla::UnregisterResponse* Arena::CreateMaybeMessage<::xla::UnregisterResponse>(Arena*);
template<> ::xla::WaitForExecutionRequest* Arena::CreateMaybeMessage<::xla::WaitForExecutionRequest>(Arena*);
template<> ::xla::WaitForExecutionResponse* Arena::CreateMaybeMessage<::xla::WaitForExecutionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xla {

enum DebugOptions_ShapeChecks : int {
  DebugOptions_ShapeChecks_IGNORE = 0,
  DebugOptions_ShapeChecks_RUNTIME = 1,
  DebugOptions_ShapeChecks_COMPILE_TIME = 2,
  DebugOptions_ShapeChecks_DebugOptions_ShapeChecks_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DebugOptions_ShapeChecks_DebugOptions_ShapeChecks_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DebugOptions_ShapeChecks_IsValid(int value);
constexpr DebugOptions_ShapeChecks DebugOptions_ShapeChecks_ShapeChecks_MIN = DebugOptions_ShapeChecks_IGNORE;
constexpr DebugOptions_ShapeChecks DebugOptions_ShapeChecks_ShapeChecks_MAX = DebugOptions_ShapeChecks_COMPILE_TIME;
constexpr int DebugOptions_ShapeChecks_ShapeChecks_ARRAYSIZE = DebugOptions_ShapeChecks_ShapeChecks_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugOptions_ShapeChecks_descriptor();
template<typename T>
inline const std::string& DebugOptions_ShapeChecks_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DebugOptions_ShapeChecks>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DebugOptions_ShapeChecks_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DebugOptions_ShapeChecks_descriptor(), enum_t_value);
}
inline bool DebugOptions_ShapeChecks_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DebugOptions_ShapeChecks* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DebugOptions_ShapeChecks>(
    DebugOptions_ShapeChecks_descriptor(), name, value);
}
enum DebugOptions_StepMarkerLocation : int {
  DebugOptions_StepMarkerLocation_STEP_MARK_AT_ENTRY = 0,
  DebugOptions_StepMarkerLocation_STEP_MARK_AT_TOP_LEVEL_WHILE_LOOP = 1,
  DebugOptions_StepMarkerLocation_STEP_MARK_AT_SECOND_LEVEL_WHILE_LOOP = 3,
  DebugOptions_StepMarkerLocation_STEP_MARK_NONE = 2,
  DebugOptions_StepMarkerLocation_DebugOptions_StepMarkerLocation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DebugOptions_StepMarkerLocation_DebugOptions_StepMarkerLocation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DebugOptions_StepMarkerLocation_IsValid(int value);
constexpr DebugOptions_StepMarkerLocation DebugOptions_StepMarkerLocation_StepMarkerLocation_MIN = DebugOptions_StepMarkerLocation_STEP_MARK_AT_ENTRY;
constexpr DebugOptions_StepMarkerLocation DebugOptions_StepMarkerLocation_StepMarkerLocation_MAX = DebugOptions_StepMarkerLocation_STEP_MARK_AT_SECOND_LEVEL_WHILE_LOOP;
constexpr int DebugOptions_StepMarkerLocation_StepMarkerLocation_ARRAYSIZE = DebugOptions_StepMarkerLocation_StepMarkerLocation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugOptions_StepMarkerLocation_descriptor();
template<typename T>
inline const std::string& DebugOptions_StepMarkerLocation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DebugOptions_StepMarkerLocation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DebugOptions_StepMarkerLocation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DebugOptions_StepMarkerLocation_descriptor(), enum_t_value);
}
inline bool DebugOptions_StepMarkerLocation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DebugOptions_StepMarkerLocation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DebugOptions_StepMarkerLocation>(
    DebugOptions_StepMarkerLocation_descriptor(), name, value);
}
// ===================================================================

class DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse();
  explicit constexpr DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse& other);
  static const DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse*>(&_DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xla.DebugOptions.XlaBackendExtraOptionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xla.DebugOptions.XlaBackendExtraOptionsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class DebugOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.DebugOptions) */ {
 public:
  inline DebugOptions() : DebugOptions(nullptr) {}
  ~DebugOptions() override;
  explicit constexpr DebugOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DebugOptions(const DebugOptions& from);
  DebugOptions(DebugOptions&& from) noexcept
    : DebugOptions() {
    *this = ::std::move(from);
  }

  inline DebugOptions& operator=(const DebugOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugOptions& operator=(DebugOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugOptions* internal_default_instance() {
    return reinterpret_cast<const DebugOptions*>(
               &_DebugOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DebugOptions& a, DebugOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugOptions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DebugOptions* New() const final {
    return new DebugOptions();
  }

  DebugOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DebugOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DebugOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DebugOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.DebugOptions";
  }
  protected:
  explicit DebugOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef DebugOptions_ShapeChecks ShapeChecks;
  static constexpr ShapeChecks IGNORE =
    DebugOptions_ShapeChecks_IGNORE;
  static constexpr ShapeChecks RUNTIME =
    DebugOptions_ShapeChecks_RUNTIME;
  static constexpr ShapeChecks COMPILE_TIME =
    DebugOptions_ShapeChecks_COMPILE_TIME;
  static inline bool ShapeChecks_IsValid(int value) {
    return DebugOptions_ShapeChecks_IsValid(value);
  }
  static constexpr ShapeChecks ShapeChecks_MIN =
    DebugOptions_ShapeChecks_ShapeChecks_MIN;
  static constexpr ShapeChecks ShapeChecks_MAX =
    DebugOptions_ShapeChecks_ShapeChecks_MAX;
  static constexpr int ShapeChecks_ARRAYSIZE =
    DebugOptions_ShapeChecks_ShapeChecks_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ShapeChecks_descriptor() {
    return DebugOptions_ShapeChecks_descriptor();
  }
  template<typename T>
  static inline const std::string& ShapeChecks_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ShapeChecks>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ShapeChecks_Name.");
    return DebugOptions_ShapeChecks_Name(enum_t_value);
  }
  static inline bool ShapeChecks_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ShapeChecks* value) {
    return DebugOptions_ShapeChecks_Parse(name, value);
  }

  typedef DebugOptions_StepMarkerLocation StepMarkerLocation;
  static constexpr StepMarkerLocation STEP_MARK_AT_ENTRY =
    DebugOptions_StepMarkerLocation_STEP_MARK_AT_ENTRY;
  static constexpr StepMarkerLocation STEP_MARK_AT_TOP_LEVEL_WHILE_LOOP =
    DebugOptions_StepMarkerLocation_STEP_MARK_AT_TOP_LEVEL_WHILE_LOOP;
  static constexpr StepMarkerLocation STEP_MARK_AT_SECOND_LEVEL_WHILE_LOOP =
    DebugOptions_StepMarkerLocation_STEP_MARK_AT_SECOND_LEVEL_WHILE_LOOP;
  static constexpr StepMarkerLocation STEP_MARK_NONE =
    DebugOptions_StepMarkerLocation_STEP_MARK_NONE;
  static inline bool StepMarkerLocation_IsValid(int value) {
    return DebugOptions_StepMarkerLocation_IsValid(value);
  }
  static constexpr StepMarkerLocation StepMarkerLocation_MIN =
    DebugOptions_StepMarkerLocation_StepMarkerLocation_MIN;
  static constexpr StepMarkerLocation StepMarkerLocation_MAX =
    DebugOptions_StepMarkerLocation_StepMarkerLocation_MAX;
  static constexpr int StepMarkerLocation_ARRAYSIZE =
    DebugOptions_StepMarkerLocation_StepMarkerLocation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StepMarkerLocation_descriptor() {
    return DebugOptions_StepMarkerLocation_descriptor();
  }
  template<typename T>
  static inline const std::string& StepMarkerLocation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StepMarkerLocation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StepMarkerLocation_Name.");
    return DebugOptions_StepMarkerLocation_Name(enum_t_value);
  }
  static inline bool StepMarkerLocation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StepMarkerLocation* value) {
    return DebugOptions_StepMarkerLocation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kXlaDisableHloPassesFieldNumber = 30,
    kXlaEnableHloPassesOnlyFieldNumber = 124,
    kXlaGpuPtxFileFieldNumber = 127,
    kXlaGpuLlvmIrFileFieldNumber = 150,
    kXlaBackendExtraOptionsFieldNumber = 500,
    kXlaGpuCudaDataDirFieldNumber = 61,
    kXlaDumpToFieldNumber = 109,
    kXlaDumpHloModuleReFieldNumber = 110,
    kXlaDumpHloPassReFieldNumber = 111,
    kXlaGpuAlgorithmDenylistPathFieldNumber = 128,
    kXlaGpuAsmExtraFlagsFieldNumber = 141,
    kXlaDumpHloPipelineReFieldNumber = 154,
    kXlaBackendOptimizationLevelFieldNumber = 31,
    kXlaHloGraphAddressesFieldNumber = 2,
    kXlaHloProfileFieldNumber = 9,
    kXlaDisableAllHloPassesFieldNumber = 104,
    kXlaEmbedIrInExecutableFieldNumber = 33,
    kXlaEliminateHloImplicitBroadcastFieldNumber = 35,
    kXlaCpuMultiThreadEigenFieldNumber = 60,
    kXlaGpuFtzFieldNumber = 62,
    kXlaLlvmEnableAliasScopeMetadataFieldNumber = 70,
    kXlaLlvmEnableNoaliasMetadataFieldNumber = 71,
    kXlaLlvmEnableInvariantLoadMetadataFieldNumber = 72,
    kXlaLlvmDisableExpensivePassesFieldNumber = 73,
    kXlaTestAllOutputLayoutsFieldNumber = 90,
    kXlaGpuMaxKernelUnrollFactorFieldNumber = 98,
    kXlaForceHostPlatformDeviceCountFieldNumber = 102,
    kXlaStepMarkerLocationFieldNumber = 108,
    kXlaHloEvaluatorUseFastPathFieldNumber = 106,
    kXlaAllowScalarIndexDynamicOpsFieldNumber = 107,
    kXlaDumpHloAsTextFieldNumber = 112,
    kXlaDumpHloAsProtoFieldNumber = 113,
    kXlaTestAllInputLayoutsFieldNumber = 91,
    kXlaHloGraphShardingColorFieldNumber = 92,
    kXlaCpuUseMklDnnFieldNumber = 97,
    kXlaCpuUseXlaRuntimeFieldNumber = 177,
    kXlaCpuEnableFastMathFieldNumber = 99,
    kXlaCpuFastMathHonorNansFieldNumber = 120,
    kXlaCpuFastMathHonorInfsFieldNumber = 121,
    kXlaCpuFastMathHonorDivisionFieldNumber = 126,
    kXlaCpuFastMathHonorFunctionsFieldNumber = 129,
    kXlaCpuEnableFastMinMaxFieldNumber = 140,
    kXlaGpuEnableFastMinMaxFieldNumber = 100,
    kXlaAllowExcessPrecisionFieldNumber = 122,
    kXlaGpuAutotuneLevelFieldNumber = 123,
    kXlaDumpHloAsDotFieldNumber = 114,
    kXlaDumpHloAsUrlFieldNumber = 115,
    kXlaDumpHloAsHtmlFieldNumber = 116,
    kXlaDumpFusionVisualizationFieldNumber = 149,
    kXlaDumpMaxHloModulesFieldNumber = 132,
    kXlaDumpHloSnapshotsFieldNumber = 118,
    kXlaDumpIncludeTimestampFieldNumber = 131,
    kXlaDumpModuleMetadataFieldNumber = 144,
    kXlaDumpCompressProtosFieldNumber = 151,
    kXlaTpuDetectNanFieldNumber = 135,
    kXlaTpuDetectInfFieldNumber = 136,
    kXlaCpuEnableXprofTracemeFieldNumber = 137,
    kXlaGpuUnsafeFallbackToDriverOnPtxasNotFoundFieldNumber = 138,
    kXlaGpuCrashOnVerificationFailuresFieldNumber = 101,
    kXlaGpuDisableGpuasmOptimizationsFieldNumber = 103,
    kXlaCpuEnableMlirLoweringFieldNumber = 171,
    kXlaGpuEnableMlirLoweringFieldNumber = 173,
    kXlaMultiheapSizeConstraintPerHeapFieldNumber = 142,
    kXlaGpuForceCompilationParallelismFieldNumber = 147,
    kXlaDumpHloAsLongTextFieldNumber = 164,
    kXlaGpuForceConvNchwFieldNumber = 125,
    kXlaGpuForceConvNhwcFieldNumber = 146,
    kXlaGpuDumpLlvmirFieldNumber = 155,
    kXlaDetailedLoggingAndDumpingFieldNumber = 143,
    kXlaGpuDeterministicOpsFieldNumber = 148,
    kXlaGpuEnableAsyncAllReduceFieldNumber = 152,
    kXlaGpuAllReduceContiguousFieldNumber = 158,
    kXlaGpuAllReduceBlueconnectNumDevicesPerHostFieldNumber = 159,
    kXlaGpuAllReduceCombineThresholdBytesFieldNumber = 157,
    kXlaGpuNcclTerminationTimeoutSecondsFieldNumber = 163,
    kXlaGpuEnableCudnnFrontendFieldNumber = 160,
    kXlaDumpDisableMetadataFieldNumber = 153,
    kXlaGpuStrictConvAlgorithmPickerFieldNumber = 156,
    kXlaGpuEnableXlaRuntimeExecutableFieldNumber = 169,
    kXlaGpuEnableSharedConstantsFieldNumber = 165,
    kXlaGpuEnableCublasltFieldNumber = 166,
    kXlaGpuSimplifyAllFpConversionsFieldNumber = 168,
    kXlaGpuNormalizeLayoutsFieldNumber = 172,
    kXlaGpuRedzoneScratchMaxMegabytesFieldNumber = 167,
    kXlaGpuShapeChecksFieldNumber = 170,
    kXlaCpuUseAclFieldNumber = 174,
    kXlaCpuStrictDotConvMathFieldNumber = 175,
  };
  // repeated string xla_disable_hlo_passes = 30;
  int xla_disable_hlo_passes_size() const;
  private:
  int _internal_xla_disable_hlo_passes_size() const;
  public:
  void clear_xla_disable_hlo_passes();
  const std::string& xla_disable_hlo_passes(int index) const;
  std::string* mutable_xla_disable_hlo_passes(int index);
  void set_xla_disable_hlo_passes(int index, const std::string& value);
  void set_xla_disable_hlo_passes(int index, std::string&& value);
  void set_xla_disable_hlo_passes(int index, const char* value);
  void set_xla_disable_hlo_passes(int index, const char* value, size_t size);
  std::string* add_xla_disable_hlo_passes();
  void add_xla_disable_hlo_passes(const std::string& value);
  void add_xla_disable_hlo_passes(std::string&& value);
  void add_xla_disable_hlo_passes(const char* value);
  void add_xla_disable_hlo_passes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& xla_disable_hlo_passes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_xla_disable_hlo_passes();
  private:
  const std::string& _internal_xla_disable_hlo_passes(int index) const;
  std::string* _internal_add_xla_disable_hlo_passes();
  public:

  // repeated string xla_enable_hlo_passes_only = 124;
  int xla_enable_hlo_passes_only_size() const;
  private:
  int _internal_xla_enable_hlo_passes_only_size() const;
  public:
  void clear_xla_enable_hlo_passes_only();
  const std::string& xla_enable_hlo_passes_only(int index) const;
  std::string* mutable_xla_enable_hlo_passes_only(int index);
  void set_xla_enable_hlo_passes_only(int index, const std::string& value);
  void set_xla_enable_hlo_passes_only(int index, std::string&& value);
  void set_xla_enable_hlo_passes_only(int index, const char* value);
  void set_xla_enable_hlo_passes_only(int index, const char* value, size_t size);
  std::string* add_xla_enable_hlo_passes_only();
  void add_xla_enable_hlo_passes_only(const std::string& value);
  void add_xla_enable_hlo_passes_only(std::string&& value);
  void add_xla_enable_hlo_passes_only(const char* value);
  void add_xla_enable_hlo_passes_only(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& xla_enable_hlo_passes_only() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_xla_enable_hlo_passes_only();
  private:
  const std::string& _internal_xla_enable_hlo_passes_only(int index) const;
  std::string* _internal_add_xla_enable_hlo_passes_only();
  public:

  // repeated string xla_gpu_ptx_file = 127;
  int xla_gpu_ptx_file_size() const;
  private:
  int _internal_xla_gpu_ptx_file_size() const;
  public:
  void clear_xla_gpu_ptx_file();
  const std::string& xla_gpu_ptx_file(int index) const;
  std::string* mutable_xla_gpu_ptx_file(int index);
  void set_xla_gpu_ptx_file(int index, const std::string& value);
  void set_xla_gpu_ptx_file(int index, std::string&& value);
  void set_xla_gpu_ptx_file(int index, const char* value);
  void set_xla_gpu_ptx_file(int index, const char* value, size_t size);
  std::string* add_xla_gpu_ptx_file();
  void add_xla_gpu_ptx_file(const std::string& value);
  void add_xla_gpu_ptx_file(std::string&& value);
  void add_xla_gpu_ptx_file(const char* value);
  void add_xla_gpu_ptx_file(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& xla_gpu_ptx_file() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_xla_gpu_ptx_file();
  private:
  const std::string& _internal_xla_gpu_ptx_file(int index) const;
  std::string* _internal_add_xla_gpu_ptx_file();
  public:

  // repeated string xla_gpu_llvm_ir_file = 150;
  int xla_gpu_llvm_ir_file_size() const;
  private:
  int _internal_xla_gpu_llvm_ir_file_size() const;
  public:
  void clear_xla_gpu_llvm_ir_file();
  const std::string& xla_gpu_llvm_ir_file(int index) const;
  std::string* mutable_xla_gpu_llvm_ir_file(int index);
  void set_xla_gpu_llvm_ir_file(int index, const std::string& value);
  void set_xla_gpu_llvm_ir_file(int index, std::string&& value);
  void set_xla_gpu_llvm_ir_file(int index, const char* value);
  void set_xla_gpu_llvm_ir_file(int index, const char* value, size_t size);
  std::string* add_xla_gpu_llvm_ir_file();
  void add_xla_gpu_llvm_ir_file(const std::string& value);
  void add_xla_gpu_llvm_ir_file(std::string&& value);
  void add_xla_gpu_llvm_ir_file(const char* value);
  void add_xla_gpu_llvm_ir_file(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& xla_gpu_llvm_ir_file() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_xla_gpu_llvm_ir_file();
  private:
  const std::string& _internal_xla_gpu_llvm_ir_file(int index) const;
  std::string* _internal_add_xla_gpu_llvm_ir_file();
  public:

  // map<string, string> xla_backend_extra_options = 500;
  int xla_backend_extra_options_size() const;
  private:
  int _internal_xla_backend_extra_options_size() const;
  public:
  void clear_xla_backend_extra_options();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_xla_backend_extra_options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_xla_backend_extra_options();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      xla_backend_extra_options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_xla_backend_extra_options();

  // string xla_gpu_cuda_data_dir = 61;
  void clear_xla_gpu_cuda_data_dir();
  const std::string& xla_gpu_cuda_data_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xla_gpu_cuda_data_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xla_gpu_cuda_data_dir();
  PROTOBUF_MUST_USE_RESULT std::string* release_xla_gpu_cuda_data_dir();
  void set_allocated_xla_gpu_cuda_data_dir(std::string* xla_gpu_cuda_data_dir);
  private:
  const std::string& _internal_xla_gpu_cuda_data_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xla_gpu_cuda_data_dir(const std::string& value);
  std::string* _internal_mutable_xla_gpu_cuda_data_dir();
  public:

  // string xla_dump_to = 109;
  void clear_xla_dump_to();
  const std::string& xla_dump_to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xla_dump_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xla_dump_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_xla_dump_to();
  void set_allocated_xla_dump_to(std::string* xla_dump_to);
  private:
  const std::string& _internal_xla_dump_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xla_dump_to(const std::string& value);
  std::string* _internal_mutable_xla_dump_to();
  public:

  // string xla_dump_hlo_module_re = 110;
  void clear_xla_dump_hlo_module_re();
  const std::string& xla_dump_hlo_module_re() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xla_dump_hlo_module_re(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xla_dump_hlo_module_re();
  PROTOBUF_MUST_USE_RESULT std::string* release_xla_dump_hlo_module_re();
  void set_allocated_xla_dump_hlo_module_re(std::string* xla_dump_hlo_module_re);
  private:
  const std::string& _internal_xla_dump_hlo_module_re() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xla_dump_hlo_module_re(const std::string& value);
  std::string* _internal_mutable_xla_dump_hlo_module_re();
  public:

  // string xla_dump_hlo_pass_re = 111;
  void clear_xla_dump_hlo_pass_re();
  const std::string& xla_dump_hlo_pass_re() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xla_dump_hlo_pass_re(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xla_dump_hlo_pass_re();
  PROTOBUF_MUST_USE_RESULT std::string* release_xla_dump_hlo_pass_re();
  void set_allocated_xla_dump_hlo_pass_re(std::string* xla_dump_hlo_pass_re);
  private:
  const std::string& _internal_xla_dump_hlo_pass_re() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xla_dump_hlo_pass_re(const std::string& value);
  std::string* _internal_mutable_xla_dump_hlo_pass_re();
  public:

  // string xla_gpu_algorithm_denylist_path = 128;
  void clear_xla_gpu_algorithm_denylist_path();
  const std::string& xla_gpu_algorithm_denylist_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xla_gpu_algorithm_denylist_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xla_gpu_algorithm_denylist_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_xla_gpu_algorithm_denylist_path();
  void set_allocated_xla_gpu_algorithm_denylist_path(std::string* xla_gpu_algorithm_denylist_path);
  private:
  const std::string& _internal_xla_gpu_algorithm_denylist_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xla_gpu_algorithm_denylist_path(const std::string& value);
  std::string* _internal_mutable_xla_gpu_algorithm_denylist_path();
  public:

  // string xla_gpu_asm_extra_flags = 141;
  void clear_xla_gpu_asm_extra_flags();
  const std::string& xla_gpu_asm_extra_flags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xla_gpu_asm_extra_flags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xla_gpu_asm_extra_flags();
  PROTOBUF_MUST_USE_RESULT std::string* release_xla_gpu_asm_extra_flags();
  void set_allocated_xla_gpu_asm_extra_flags(std::string* xla_gpu_asm_extra_flags);
  private:
  const std::string& _internal_xla_gpu_asm_extra_flags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xla_gpu_asm_extra_flags(const std::string& value);
  std::string* _internal_mutable_xla_gpu_asm_extra_flags();
  public:

  // string xla_dump_hlo_pipeline_re = 154;
  void clear_xla_dump_hlo_pipeline_re();
  const std::string& xla_dump_hlo_pipeline_re() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xla_dump_hlo_pipeline_re(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xla_dump_hlo_pipeline_re();
  PROTOBUF_MUST_USE_RESULT std::string* release_xla_dump_hlo_pipeline_re();
  void set_allocated_xla_dump_hlo_pipeline_re(std::string* xla_dump_hlo_pipeline_re);
  private:
  const std::string& _internal_xla_dump_hlo_pipeline_re() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xla_dump_hlo_pipeline_re(const std::string& value);
  std::string* _internal_mutable_xla_dump_hlo_pipeline_re();
  public:

  // int32 xla_backend_optimization_level = 31;
  void clear_xla_backend_optimization_level();
  ::PROTOBUF_NAMESPACE_ID::int32 xla_backend_optimization_level() const;
  void set_xla_backend_optimization_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xla_backend_optimization_level() const;
  void _internal_set_xla_backend_optimization_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool xla_hlo_graph_addresses = 2;
  void clear_xla_hlo_graph_addresses();
  bool xla_hlo_graph_addresses() const;
  void set_xla_hlo_graph_addresses(bool value);
  private:
  bool _internal_xla_hlo_graph_addresses() const;
  void _internal_set_xla_hlo_graph_addresses(bool value);
  public:

  // bool xla_hlo_profile = 9;
  void clear_xla_hlo_profile();
  bool xla_hlo_profile() const;
  void set_xla_hlo_profile(bool value);
  private:
  bool _internal_xla_hlo_profile() const;
  void _internal_set_xla_hlo_profile(bool value);
  public:

  // bool xla_disable_all_hlo_passes = 104;
  void clear_xla_disable_all_hlo_passes();
  bool xla_disable_all_hlo_passes() const;
  void set_xla_disable_all_hlo_passes(bool value);
  private:
  bool _internal_xla_disable_all_hlo_passes() const;
  void _internal_set_xla_disable_all_hlo_passes(bool value);
  public:

  // bool xla_embed_ir_in_executable = 33;
  void clear_xla_embed_ir_in_executable();
  bool xla_embed_ir_in_executable() const;
  void set_xla_embed_ir_in_executable(bool value);
  private:
  bool _internal_xla_embed_ir_in_executable() const;
  void _internal_set_xla_embed_ir_in_executable(bool value);
  public:

  // bool xla_eliminate_hlo_implicit_broadcast = 35;
  void clear_xla_eliminate_hlo_implicit_broadcast();
  bool xla_eliminate_hlo_implicit_broadcast() const;
  void set_xla_eliminate_hlo_implicit_broadcast(bool value);
  private:
  bool _internal_xla_eliminate_hlo_implicit_broadcast() const;
  void _internal_set_xla_eliminate_hlo_implicit_broadcast(bool value);
  public:

  // bool xla_cpu_multi_thread_eigen = 60;
  void clear_xla_cpu_multi_thread_eigen();
  bool xla_cpu_multi_thread_eigen() const;
  void set_xla_cpu_multi_thread_eigen(bool value);
  private:
  bool _internal_xla_cpu_multi_thread_eigen() const;
  void _internal_set_xla_cpu_multi_thread_eigen(bool value);
  public:

  // bool xla_gpu_ftz = 62;
  void clear_xla_gpu_ftz();
  bool xla_gpu_ftz() const;
  void set_xla_gpu_ftz(bool value);
  private:
  bool _internal_xla_gpu_ftz() const;
  void _internal_set_xla_gpu_ftz(bool value);
  public:

  // bool xla_llvm_enable_alias_scope_metadata = 70;
  void clear_xla_llvm_enable_alias_scope_metadata();
  bool xla_llvm_enable_alias_scope_metadata() const;
  void set_xla_llvm_enable_alias_scope_metadata(bool value);
  private:
  bool _internal_xla_llvm_enable_alias_scope_metadata() const;
  void _internal_set_xla_llvm_enable_alias_scope_metadata(bool value);
  public:

  // bool xla_llvm_enable_noalias_metadata = 71;
  void clear_xla_llvm_enable_noalias_metadata();
  bool xla_llvm_enable_noalias_metadata() const;
  void set_xla_llvm_enable_noalias_metadata(bool value);
  private:
  bool _internal_xla_llvm_enable_noalias_metadata() const;
  void _internal_set_xla_llvm_enable_noalias_metadata(bool value);
  public:

  // bool xla_llvm_enable_invariant_load_metadata = 72;
  void clear_xla_llvm_enable_invariant_load_metadata();
  bool xla_llvm_enable_invariant_load_metadata() const;
  void set_xla_llvm_enable_invariant_load_metadata(bool value);
  private:
  bool _internal_xla_llvm_enable_invariant_load_metadata() const;
  void _internal_set_xla_llvm_enable_invariant_load_metadata(bool value);
  public:

  // bool xla_llvm_disable_expensive_passes = 73;
  void clear_xla_llvm_disable_expensive_passes();
  bool xla_llvm_disable_expensive_passes() const;
  void set_xla_llvm_disable_expensive_passes(bool value);
  private:
  bool _internal_xla_llvm_disable_expensive_passes() const;
  void _internal_set_xla_llvm_disable_expensive_passes(bool value);
  public:

  // bool xla_test_all_output_layouts = 90;
  void clear_xla_test_all_output_layouts();
  bool xla_test_all_output_layouts() const;
  void set_xla_test_all_output_layouts(bool value);
  private:
  bool _internal_xla_test_all_output_layouts() const;
  void _internal_set_xla_test_all_output_layouts(bool value);
  public:

  // int32 xla_gpu_max_kernel_unroll_factor = 98;
  void clear_xla_gpu_max_kernel_unroll_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 xla_gpu_max_kernel_unroll_factor() const;
  void set_xla_gpu_max_kernel_unroll_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xla_gpu_max_kernel_unroll_factor() const;
  void _internal_set_xla_gpu_max_kernel_unroll_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 xla_force_host_platform_device_count = 102;
  void clear_xla_force_host_platform_device_count();
  ::PROTOBUF_NAMESPACE_ID::int32 xla_force_host_platform_device_count() const;
  void set_xla_force_host_platform_device_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xla_force_host_platform_device_count() const;
  void _internal_set_xla_force_host_platform_device_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .xla.DebugOptions.StepMarkerLocation xla_step_marker_location = 108;
  void clear_xla_step_marker_location();
  ::xla::DebugOptions_StepMarkerLocation xla_step_marker_location() const;
  void set_xla_step_marker_location(::xla::DebugOptions_StepMarkerLocation value);
  private:
  ::xla::DebugOptions_StepMarkerLocation _internal_xla_step_marker_location() const;
  void _internal_set_xla_step_marker_location(::xla::DebugOptions_StepMarkerLocation value);
  public:

  // bool xla_hlo_evaluator_use_fast_path = 106;
  void clear_xla_hlo_evaluator_use_fast_path();
  bool xla_hlo_evaluator_use_fast_path() const;
  void set_xla_hlo_evaluator_use_fast_path(bool value);
  private:
  bool _internal_xla_hlo_evaluator_use_fast_path() const;
  void _internal_set_xla_hlo_evaluator_use_fast_path(bool value);
  public:

  // bool xla_allow_scalar_index_dynamic_ops = 107;
  void clear_xla_allow_scalar_index_dynamic_ops();
  bool xla_allow_scalar_index_dynamic_ops() const;
  void set_xla_allow_scalar_index_dynamic_ops(bool value);
  private:
  bool _internal_xla_allow_scalar_index_dynamic_ops() const;
  void _internal_set_xla_allow_scalar_index_dynamic_ops(bool value);
  public:

  // bool xla_dump_hlo_as_text = 112;
  void clear_xla_dump_hlo_as_text();
  bool xla_dump_hlo_as_text() const;
  void set_xla_dump_hlo_as_text(bool value);
  private:
  bool _internal_xla_dump_hlo_as_text() const;
  void _internal_set_xla_dump_hlo_as_text(bool value);
  public:

  // bool xla_dump_hlo_as_proto = 113;
  void clear_xla_dump_hlo_as_proto();
  bool xla_dump_hlo_as_proto() const;
  void set_xla_dump_hlo_as_proto(bool value);
  private:
  bool _internal_xla_dump_hlo_as_proto() const;
  void _internal_set_xla_dump_hlo_as_proto(bool value);
  public:

  // bool xla_test_all_input_layouts = 91;
  void clear_xla_test_all_input_layouts();
  bool xla_test_all_input_layouts() const;
  void set_xla_test_all_input_layouts(bool value);
  private:
  bool _internal_xla_test_all_input_layouts() const;
  void _internal_set_xla_test_all_input_layouts(bool value);
  public:

  // bool xla_hlo_graph_sharding_color = 92;
  void clear_xla_hlo_graph_sharding_color();
  bool xla_hlo_graph_sharding_color() const;
  void set_xla_hlo_graph_sharding_color(bool value);
  private:
  bool _internal_xla_hlo_graph_sharding_color() const;
  void _internal_set_xla_hlo_graph_sharding_color(bool value);
  public:

  // bool xla_cpu_use_mkl_dnn = 97;
  void clear_xla_cpu_use_mkl_dnn();
  bool xla_cpu_use_mkl_dnn() const;
  void set_xla_cpu_use_mkl_dnn(bool value);
  private:
  bool _internal_xla_cpu_use_mkl_dnn() const;
  void _internal_set_xla_cpu_use_mkl_dnn(bool value);
  public:

  // bool xla_cpu_use_xla_runtime = 177;
  void clear_xla_cpu_use_xla_runtime();
  bool xla_cpu_use_xla_runtime() const;
  void set_xla_cpu_use_xla_runtime(bool value);
  private:
  bool _internal_xla_cpu_use_xla_runtime() const;
  void _internal_set_xla_cpu_use_xla_runtime(bool value);
  public:

  // bool xla_cpu_enable_fast_math = 99;
  void clear_xla_cpu_enable_fast_math();
  bool xla_cpu_enable_fast_math() const;
  void set_xla_cpu_enable_fast_math(bool value);
  private:
  bool _internal_xla_cpu_enable_fast_math() const;
  void _internal_set_xla_cpu_enable_fast_math(bool value);
  public:

  // bool xla_cpu_fast_math_honor_nans = 120;
  void clear_xla_cpu_fast_math_honor_nans();
  bool xla_cpu_fast_math_honor_nans() const;
  void set_xla_cpu_fast_math_honor_nans(bool value);
  private:
  bool _internal_xla_cpu_fast_math_honor_nans() const;
  void _internal_set_xla_cpu_fast_math_honor_nans(bool value);
  public:

  // bool xla_cpu_fast_math_honor_infs = 121;
  void clear_xla_cpu_fast_math_honor_infs();
  bool xla_cpu_fast_math_honor_infs() const;
  void set_xla_cpu_fast_math_honor_infs(bool value);
  private:
  bool _internal_xla_cpu_fast_math_honor_infs() const;
  void _internal_set_xla_cpu_fast_math_honor_infs(bool value);
  public:

  // bool xla_cpu_fast_math_honor_division = 126;
  void clear_xla_cpu_fast_math_honor_division();
  bool xla_cpu_fast_math_honor_division() const;
  void set_xla_cpu_fast_math_honor_division(bool value);
  private:
  bool _internal_xla_cpu_fast_math_honor_division() const;
  void _internal_set_xla_cpu_fast_math_honor_division(bool value);
  public:

  // bool xla_cpu_fast_math_honor_functions = 129;
  void clear_xla_cpu_fast_math_honor_functions();
  bool xla_cpu_fast_math_honor_functions() const;
  void set_xla_cpu_fast_math_honor_functions(bool value);
  private:
  bool _internal_xla_cpu_fast_math_honor_functions() const;
  void _internal_set_xla_cpu_fast_math_honor_functions(bool value);
  public:

  // bool xla_cpu_enable_fast_min_max = 140;
  void clear_xla_cpu_enable_fast_min_max();
  bool xla_cpu_enable_fast_min_max() const;
  void set_xla_cpu_enable_fast_min_max(bool value);
  private:
  bool _internal_xla_cpu_enable_fast_min_max() const;
  void _internal_set_xla_cpu_enable_fast_min_max(bool value);
  public:

  // bool xla_gpu_enable_fast_min_max = 100;
  void clear_xla_gpu_enable_fast_min_max();
  bool xla_gpu_enable_fast_min_max() const;
  void set_xla_gpu_enable_fast_min_max(bool value);
  private:
  bool _internal_xla_gpu_enable_fast_min_max() const;
  void _internal_set_xla_gpu_enable_fast_min_max(bool value);
  public:

  // bool xla_allow_excess_precision = 122;
  void clear_xla_allow_excess_precision();
  bool xla_allow_excess_precision() const;
  void set_xla_allow_excess_precision(bool value);
  private:
  bool _internal_xla_allow_excess_precision() const;
  void _internal_set_xla_allow_excess_precision(bool value);
  public:

  // int32 xla_gpu_autotune_level = 123;
  void clear_xla_gpu_autotune_level();
  ::PROTOBUF_NAMESPACE_ID::int32 xla_gpu_autotune_level() const;
  void set_xla_gpu_autotune_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xla_gpu_autotune_level() const;
  void _internal_set_xla_gpu_autotune_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool xla_dump_hlo_as_dot = 114;
  void clear_xla_dump_hlo_as_dot();
  bool xla_dump_hlo_as_dot() const;
  void set_xla_dump_hlo_as_dot(bool value);
  private:
  bool _internal_xla_dump_hlo_as_dot() const;
  void _internal_set_xla_dump_hlo_as_dot(bool value);
  public:

  // bool xla_dump_hlo_as_url = 115;
  void clear_xla_dump_hlo_as_url();
  bool xla_dump_hlo_as_url() const;
  void set_xla_dump_hlo_as_url(bool value);
  private:
  bool _internal_xla_dump_hlo_as_url() const;
  void _internal_set_xla_dump_hlo_as_url(bool value);
  public:

  // bool xla_dump_hlo_as_html = 116;
  void clear_xla_dump_hlo_as_html();
  bool xla_dump_hlo_as_html() const;
  void set_xla_dump_hlo_as_html(bool value);
  private:
  bool _internal_xla_dump_hlo_as_html() const;
  void _internal_set_xla_dump_hlo_as_html(bool value);
  public:

  // bool xla_dump_fusion_visualization = 149;
  void clear_xla_dump_fusion_visualization();
  bool xla_dump_fusion_visualization() const;
  void set_xla_dump_fusion_visualization(bool value);
  private:
  bool _internal_xla_dump_fusion_visualization() const;
  void _internal_set_xla_dump_fusion_visualization(bool value);
  public:

  // int32 xla_dump_max_hlo_modules = 132;
  void clear_xla_dump_max_hlo_modules();
  ::PROTOBUF_NAMESPACE_ID::int32 xla_dump_max_hlo_modules() const;
  void set_xla_dump_max_hlo_modules(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xla_dump_max_hlo_modules() const;
  void _internal_set_xla_dump_max_hlo_modules(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool xla_dump_hlo_snapshots = 118;
  void clear_xla_dump_hlo_snapshots();
  bool xla_dump_hlo_snapshots() const;
  void set_xla_dump_hlo_snapshots(bool value);
  private:
  bool _internal_xla_dump_hlo_snapshots() const;
  void _internal_set_xla_dump_hlo_snapshots(bool value);
  public:

  // bool xla_dump_include_timestamp = 131;
  void clear_xla_dump_include_timestamp();
  bool xla_dump_include_timestamp() const;
  void set_xla_dump_include_timestamp(bool value);
  private:
  bool _internal_xla_dump_include_timestamp() const;
  void _internal_set_xla_dump_include_timestamp(bool value);
  public:

  // bool xla_dump_module_metadata = 144;
  void clear_xla_dump_module_metadata();
  bool xla_dump_module_metadata() const;
  void set_xla_dump_module_metadata(bool value);
  private:
  bool _internal_xla_dump_module_metadata() const;
  void _internal_set_xla_dump_module_metadata(bool value);
  public:

  // bool xla_dump_compress_protos = 151;
  void clear_xla_dump_compress_protos();
  bool xla_dump_compress_protos() const;
  void set_xla_dump_compress_protos(bool value);
  private:
  bool _internal_xla_dump_compress_protos() const;
  void _internal_set_xla_dump_compress_protos(bool value);
  public:

  // bool xla_tpu_detect_nan = 135;
  void clear_xla_tpu_detect_nan();
  bool xla_tpu_detect_nan() const;
  void set_xla_tpu_detect_nan(bool value);
  private:
  bool _internal_xla_tpu_detect_nan() const;
  void _internal_set_xla_tpu_detect_nan(bool value);
  public:

  // bool xla_tpu_detect_inf = 136;
  void clear_xla_tpu_detect_inf();
  bool xla_tpu_detect_inf() const;
  void set_xla_tpu_detect_inf(bool value);
  private:
  bool _internal_xla_tpu_detect_inf() const;
  void _internal_set_xla_tpu_detect_inf(bool value);
  public:

  // bool xla_cpu_enable_xprof_traceme = 137;
  void clear_xla_cpu_enable_xprof_traceme();
  bool xla_cpu_enable_xprof_traceme() const;
  void set_xla_cpu_enable_xprof_traceme(bool value);
  private:
  bool _internal_xla_cpu_enable_xprof_traceme() const;
  void _internal_set_xla_cpu_enable_xprof_traceme(bool value);
  public:

  // bool xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found = 138;
  void clear_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found();
  bool xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found() const;
  void set_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found(bool value);
  private:
  bool _internal_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found() const;
  void _internal_set_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found(bool value);
  public:

  // bool xla_gpu_crash_on_verification_failures = 101;
  void clear_xla_gpu_crash_on_verification_failures();
  bool xla_gpu_crash_on_verification_failures() const;
  void set_xla_gpu_crash_on_verification_failures(bool value);
  private:
  bool _internal_xla_gpu_crash_on_verification_failures() const;
  void _internal_set_xla_gpu_crash_on_verification_failures(bool value);
  public:

  // bool xla_gpu_disable_gpuasm_optimizations = 103;
  void clear_xla_gpu_disable_gpuasm_optimizations();
  bool xla_gpu_disable_gpuasm_optimizations() const;
  void set_xla_gpu_disable_gpuasm_optimizations(bool value);
  private:
  bool _internal_xla_gpu_disable_gpuasm_optimizations() const;
  void _internal_set_xla_gpu_disable_gpuasm_optimizations(bool value);
  public:

  // bool xla_cpu_enable_mlir_lowering = 171;
  void clear_xla_cpu_enable_mlir_lowering();
  bool xla_cpu_enable_mlir_lowering() const;
  void set_xla_cpu_enable_mlir_lowering(bool value);
  private:
  bool _internal_xla_cpu_enable_mlir_lowering() const;
  void _internal_set_xla_cpu_enable_mlir_lowering(bool value);
  public:

  // bool xla_gpu_enable_mlir_lowering = 173;
  void clear_xla_gpu_enable_mlir_lowering();
  bool xla_gpu_enable_mlir_lowering() const;
  void set_xla_gpu_enable_mlir_lowering(bool value);
  private:
  bool _internal_xla_gpu_enable_mlir_lowering() const;
  void _internal_set_xla_gpu_enable_mlir_lowering(bool value);
  public:

  // int32 xla_multiheap_size_constraint_per_heap = 142;
  void clear_xla_multiheap_size_constraint_per_heap();
  ::PROTOBUF_NAMESPACE_ID::int32 xla_multiheap_size_constraint_per_heap() const;
  void set_xla_multiheap_size_constraint_per_heap(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xla_multiheap_size_constraint_per_heap() const;
  void _internal_set_xla_multiheap_size_constraint_per_heap(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 xla_gpu_force_compilation_parallelism = 147;
  void clear_xla_gpu_force_compilation_parallelism();
  ::PROTOBUF_NAMESPACE_ID::int32 xla_gpu_force_compilation_parallelism() const;
  void set_xla_gpu_force_compilation_parallelism(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xla_gpu_force_compilation_parallelism() const;
  void _internal_set_xla_gpu_force_compilation_parallelism(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool xla_dump_hlo_as_long_text = 164;
  void clear_xla_dump_hlo_as_long_text();
  bool xla_dump_hlo_as_long_text() const;
  void set_xla_dump_hlo_as_long_text(bool value);
  private:
  bool _internal_xla_dump_hlo_as_long_text() const;
  void _internal_set_xla_dump_hlo_as_long_text(bool value);
  public:

  // bool xla_gpu_force_conv_nchw = 125;
  void clear_xla_gpu_force_conv_nchw();
  bool xla_gpu_force_conv_nchw() const;
  void set_xla_gpu_force_conv_nchw(bool value);
  private:
  bool _internal_xla_gpu_force_conv_nchw() const;
  void _internal_set_xla_gpu_force_conv_nchw(bool value);
  public:

  // bool xla_gpu_force_conv_nhwc = 146;
  void clear_xla_gpu_force_conv_nhwc();
  bool xla_gpu_force_conv_nhwc() const;
  void set_xla_gpu_force_conv_nhwc(bool value);
  private:
  bool _internal_xla_gpu_force_conv_nhwc() const;
  void _internal_set_xla_gpu_force_conv_nhwc(bool value);
  public:

  // bool xla_gpu_dump_llvmir = 155;
  void clear_xla_gpu_dump_llvmir();
  bool xla_gpu_dump_llvmir() const;
  void set_xla_gpu_dump_llvmir(bool value);
  private:
  bool _internal_xla_gpu_dump_llvmir() const;
  void _internal_set_xla_gpu_dump_llvmir(bool value);
  public:

  // bool xla_detailed_logging_and_dumping = 143;
  void clear_xla_detailed_logging_and_dumping();
  bool xla_detailed_logging_and_dumping() const;
  void set_xla_detailed_logging_and_dumping(bool value);
  private:
  bool _internal_xla_detailed_logging_and_dumping() const;
  void _internal_set_xla_detailed_logging_and_dumping(bool value);
  public:

  // bool xla_gpu_deterministic_ops = 148;
  void clear_xla_gpu_deterministic_ops();
  bool xla_gpu_deterministic_ops() const;
  void set_xla_gpu_deterministic_ops(bool value);
  private:
  bool _internal_xla_gpu_deterministic_ops() const;
  void _internal_set_xla_gpu_deterministic_ops(bool value);
  public:

  // bool xla_gpu_enable_async_all_reduce = 152;
  void clear_xla_gpu_enable_async_all_reduce();
  bool xla_gpu_enable_async_all_reduce() const;
  void set_xla_gpu_enable_async_all_reduce(bool value);
  private:
  bool _internal_xla_gpu_enable_async_all_reduce() const;
  void _internal_set_xla_gpu_enable_async_all_reduce(bool value);
  public:

  // bool xla_gpu_all_reduce_contiguous = 158;
  void clear_xla_gpu_all_reduce_contiguous();
  bool xla_gpu_all_reduce_contiguous() const;
  void set_xla_gpu_all_reduce_contiguous(bool value);
  private:
  bool _internal_xla_gpu_all_reduce_contiguous() const;
  void _internal_set_xla_gpu_all_reduce_contiguous(bool value);
  public:

  // int32 xla_gpu_all_reduce_blueconnect_num_devices_per_host = 159;
  void clear_xla_gpu_all_reduce_blueconnect_num_devices_per_host();
  ::PROTOBUF_NAMESPACE_ID::int32 xla_gpu_all_reduce_blueconnect_num_devices_per_host() const;
  void set_xla_gpu_all_reduce_blueconnect_num_devices_per_host(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xla_gpu_all_reduce_blueconnect_num_devices_per_host() const;
  void _internal_set_xla_gpu_all_reduce_blueconnect_num_devices_per_host(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 xla_gpu_all_reduce_combine_threshold_bytes = 157;
  void clear_xla_gpu_all_reduce_combine_threshold_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 xla_gpu_all_reduce_combine_threshold_bytes() const;
  void set_xla_gpu_all_reduce_combine_threshold_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_xla_gpu_all_reduce_combine_threshold_bytes() const;
  void _internal_set_xla_gpu_all_reduce_combine_threshold_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 xla_gpu_nccl_termination_timeout_seconds = 163;
  void clear_xla_gpu_nccl_termination_timeout_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 xla_gpu_nccl_termination_timeout_seconds() const;
  void set_xla_gpu_nccl_termination_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_xla_gpu_nccl_termination_timeout_seconds() const;
  void _internal_set_xla_gpu_nccl_termination_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool xla_gpu_enable_cudnn_frontend = 160;
  void clear_xla_gpu_enable_cudnn_frontend();
  bool xla_gpu_enable_cudnn_frontend() const;
  void set_xla_gpu_enable_cudnn_frontend(bool value);
  private:
  bool _internal_xla_gpu_enable_cudnn_frontend() const;
  void _internal_set_xla_gpu_enable_cudnn_frontend(bool value);
  public:

  // bool xla_dump_disable_metadata = 153;
  void clear_xla_dump_disable_metadata();
  bool xla_dump_disable_metadata() const;
  void set_xla_dump_disable_metadata(bool value);
  private:
  bool _internal_xla_dump_disable_metadata() const;
  void _internal_set_xla_dump_disable_metadata(bool value);
  public:

  // bool xla_gpu_strict_conv_algorithm_picker = 156;
  void clear_xla_gpu_strict_conv_algorithm_picker();
  bool xla_gpu_strict_conv_algorithm_picker() const;
  void set_xla_gpu_strict_conv_algorithm_picker(bool value);
  private:
  bool _internal_xla_gpu_strict_conv_algorithm_picker() const;
  void _internal_set_xla_gpu_strict_conv_algorithm_picker(bool value);
  public:

  // bool xla_gpu_enable_xla_runtime_executable = 169;
  void clear_xla_gpu_enable_xla_runtime_executable();
  bool xla_gpu_enable_xla_runtime_executable() const;
  void set_xla_gpu_enable_xla_runtime_executable(bool value);
  private:
  bool _internal_xla_gpu_enable_xla_runtime_executable() const;
  void _internal_set_xla_gpu_enable_xla_runtime_executable(bool value);
  public:

  // bool xla_gpu_enable_shared_constants = 165;
  void clear_xla_gpu_enable_shared_constants();
  bool xla_gpu_enable_shared_constants() const;
  void set_xla_gpu_enable_shared_constants(bool value);
  private:
  bool _internal_xla_gpu_enable_shared_constants() const;
  void _internal_set_xla_gpu_enable_shared_constants(bool value);
  public:

  // bool xla_gpu_enable_cublaslt = 166;
  void clear_xla_gpu_enable_cublaslt();
  bool xla_gpu_enable_cublaslt() const;
  void set_xla_gpu_enable_cublaslt(bool value);
  private:
  bool _internal_xla_gpu_enable_cublaslt() const;
  void _internal_set_xla_gpu_enable_cublaslt(bool value);
  public:

  // bool xla_gpu_simplify_all_fp_conversions = 168;
  void clear_xla_gpu_simplify_all_fp_conversions();
  bool xla_gpu_simplify_all_fp_conversions() const;
  void set_xla_gpu_simplify_all_fp_conversions(bool value);
  private:
  bool _internal_xla_gpu_simplify_all_fp_conversions() const;
  void _internal_set_xla_gpu_simplify_all_fp_conversions(bool value);
  public:

  // bool xla_gpu_normalize_layouts = 172;
  void clear_xla_gpu_normalize_layouts();
  bool xla_gpu_normalize_layouts() const;
  void set_xla_gpu_normalize_layouts(bool value);
  private:
  bool _internal_xla_gpu_normalize_layouts() const;
  void _internal_set_xla_gpu_normalize_layouts(bool value);
  public:

  // int64 xla_gpu_redzone_scratch_max_megabytes = 167;
  void clear_xla_gpu_redzone_scratch_max_megabytes();
  ::PROTOBUF_NAMESPACE_ID::int64 xla_gpu_redzone_scratch_max_megabytes() const;
  void set_xla_gpu_redzone_scratch_max_megabytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_xla_gpu_redzone_scratch_max_megabytes() const;
  void _internal_set_xla_gpu_redzone_scratch_max_megabytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .xla.DebugOptions.ShapeChecks xla_gpu_shape_checks = 170;
  void clear_xla_gpu_shape_checks();
  ::xla::DebugOptions_ShapeChecks xla_gpu_shape_checks() const;
  void set_xla_gpu_shape_checks(::xla::DebugOptions_ShapeChecks value);
  private:
  ::xla::DebugOptions_ShapeChecks _internal_xla_gpu_shape_checks() const;
  void _internal_set_xla_gpu_shape_checks(::xla::DebugOptions_ShapeChecks value);
  public:

  // bool xla_cpu_use_acl = 174;
  void clear_xla_cpu_use_acl();
  bool xla_cpu_use_acl() const;
  void set_xla_cpu_use_acl(bool value);
  private:
  bool _internal_xla_cpu_use_acl() const;
  void _internal_set_xla_cpu_use_acl(bool value);
  public:

  // bool xla_cpu_strict_dot_conv_math = 175;
  void clear_xla_cpu_strict_dot_conv_math();
  bool xla_cpu_strict_dot_conv_math() const;
  void set_xla_cpu_strict_dot_conv_math(bool value);
  private:
  bool _internal_xla_cpu_strict_dot_conv_math() const;
  void _internal_set_xla_cpu_strict_dot_conv_math(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xla.DebugOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> xla_disable_hlo_passes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> xla_enable_hlo_passes_only_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> xla_gpu_ptx_file_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> xla_gpu_llvm_ir_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DebugOptions_XlaBackendExtraOptionsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> xla_backend_extra_options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xla_gpu_cuda_data_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xla_dump_to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xla_dump_hlo_module_re_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xla_dump_hlo_pass_re_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xla_gpu_algorithm_denylist_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xla_gpu_asm_extra_flags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xla_dump_hlo_pipeline_re_;
  ::PROTOBUF_NAMESPACE_ID::int32 xla_backend_optimization_level_;
  bool xla_hlo_graph_addresses_;
  bool xla_hlo_profile_;
  bool xla_disable_all_hlo_passes_;
  bool xla_embed_ir_in_executable_;
  bool xla_eliminate_hlo_implicit_broadcast_;
  bool xla_cpu_multi_thread_eigen_;
  bool xla_gpu_ftz_;
  bool xla_llvm_enable_alias_scope_metadata_;
  bool xla_llvm_enable_noalias_metadata_;
  bool xla_llvm_enable_invariant_load_metadata_;
  bool xla_llvm_disable_expensive_passes_;
  bool xla_test_all_output_layouts_;
  ::PROTOBUF_NAMESPACE_ID::int32 xla_gpu_max_kernel_unroll_factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 xla_force_host_platform_device_count_;
  int xla_step_marker_location_;
  bool xla_hlo_evaluator_use_fast_path_;
  bool xla_allow_scalar_index_dynamic_ops_;
  bool xla_dump_hlo_as_text_;
  bool xla_dump_hlo_as_proto_;
  bool xla_test_all_input_layouts_;
  bool xla_hlo_graph_sharding_color_;
  bool xla_cpu_use_mkl_dnn_;
  bool xla_cpu_use_xla_runtime_;
  bool xla_cpu_enable_fast_math_;
  bool xla_cpu_fast_math_honor_nans_;
  bool xla_cpu_fast_math_honor_infs_;
  bool xla_cpu_fast_math_honor_division_;
  bool xla_cpu_fast_math_honor_functions_;
  bool xla_cpu_enable_fast_min_max_;
  bool xla_gpu_enable_fast_min_max_;
  bool xla_allow_excess_precision_;
  ::PROTOBUF_NAMESPACE_ID::int32 xla_gpu_autotune_level_;
  bool xla_dump_hlo_as_dot_;
  bool xla_dump_hlo_as_url_;
  bool xla_dump_hlo_as_html_;
  bool xla_dump_fusion_visualization_;
  ::PROTOBUF_NAMESPACE_ID::int32 xla_dump_max_hlo_modules_;
  bool xla_dump_hlo_snapshots_;
  bool xla_dump_include_timestamp_;
  bool xla_dump_module_metadata_;
  bool xla_dump_compress_protos_;
  bool xla_tpu_detect_nan_;
  bool xla_tpu_detect_inf_;
  bool xla_cpu_enable_xprof_traceme_;
  bool xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found_;
  bool xla_gpu_crash_on_verification_failures_;
  bool xla_gpu_disable_gpuasm_optimizations_;
  bool xla_cpu_enable_mlir_lowering_;
  bool xla_gpu_enable_mlir_lowering_;
  ::PROTOBUF_NAMESPACE_ID::int32 xla_multiheap_size_constraint_per_heap_;
  ::PROTOBUF_NAMESPACE_ID::int32 xla_gpu_force_compilation_parallelism_;
  bool xla_dump_hlo_as_long_text_;
  bool xla_gpu_force_conv_nchw_;
  bool xla_gpu_force_conv_nhwc_;
  bool xla_gpu_dump_llvmir_;
  bool xla_detailed_logging_and_dumping_;
  bool xla_gpu_deterministic_ops_;
  bool xla_gpu_enable_async_all_reduce_;
  bool xla_gpu_all_reduce_contiguous_;
  ::PROTOBUF_NAMESPACE_ID::int32 xla_gpu_all_reduce_blueconnect_num_devices_per_host_;
  ::PROTOBUF_NAMESPACE_ID::int64 xla_gpu_all_reduce_combine_threshold_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 xla_gpu_nccl_termination_timeout_seconds_;
  bool xla_gpu_enable_cudnn_frontend_;
  bool xla_dump_disable_metadata_;
  bool xla_gpu_strict_conv_algorithm_picker_;
  bool xla_gpu_enable_xla_runtime_executable_;
  bool xla_gpu_enable_shared_constants_;
  bool xla_gpu_enable_cublaslt_;
  bool xla_gpu_simplify_all_fp_conversions_;
  bool xla_gpu_normalize_layouts_;
  ::PROTOBUF_NAMESPACE_ID::int64 xla_gpu_redzone_scratch_max_megabytes_;
  int xla_gpu_shape_checks_;
  bool xla_cpu_use_acl_;
  bool xla_cpu_strict_dot_conv_math_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class ExecutionOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.ExecutionOptions) */ {
 public:
  inline ExecutionOptions() : ExecutionOptions(nullptr) {}
  ~ExecutionOptions() override;
  explicit constexpr ExecutionOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutionOptions(const ExecutionOptions& from);
  ExecutionOptions(ExecutionOptions&& from) noexcept
    : ExecutionOptions() {
    *this = ::std::move(from);
  }

  inline ExecutionOptions& operator=(const ExecutionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionOptions& operator=(ExecutionOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecutionOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionOptions* internal_default_instance() {
    return reinterpret_cast<const ExecutionOptions*>(
               &_ExecutionOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExecutionOptions& a, ExecutionOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionOptions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecutionOptions* New() const final {
    return new ExecutionOptions();
  }

  ExecutionOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecutionOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecutionOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.ExecutionOptions";
  }
  protected:
  explicit ExecutionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceHandlesFieldNumber = 5,
    kAutoSpmdPartitioningMeshShapeFieldNumber = 16,
    kAutoSpmdPartitioningMeshIdsFieldNumber = 17,
    kShapeWithOutputLayoutFieldNumber = 2,
    kDebugOptionsFieldNumber = 4,
    kDeviceAssignmentFieldNumber = 7,
    kSeedFieldNumber = 3,
    kNumReplicasFieldNumber = 6,
    kNumPartitionsFieldNumber = 9,
    kLaunchIdFieldNumber = 10,
    kAliasPassthroughParamsFieldNumber = 8,
    kUseSpmdPartitioningFieldNumber = 11,
    kUseAutoSpmdPartitioningFieldNumber = 15,
    kDeduplicateHloFieldNumber = 12,
    kAllowSpmdShardingPropagationToOutputFieldNumber = 14,
  };
  // repeated .xla.DeviceHandle device_handles = 5;
  int device_handles_size() const;
  private:
  int _internal_device_handles_size() const;
  public:
  void clear_device_handles();
  ::xla::DeviceHandle* mutable_device_handles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceHandle >*
      mutable_device_handles();
  private:
  const ::xla::DeviceHandle& _internal_device_handles(int index) const;
  ::xla::DeviceHandle* _internal_add_device_handles();
  public:
  const ::xla::DeviceHandle& device_handles(int index) const;
  ::xla::DeviceHandle* add_device_handles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceHandle >&
      device_handles() const;

  // repeated int64 auto_spmd_partitioning_mesh_shape = 16;
  int auto_spmd_partitioning_mesh_shape_size() const;
  private:
  int _internal_auto_spmd_partitioning_mesh_shape_size() const;
  public:
  void clear_auto_spmd_partitioning_mesh_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auto_spmd_partitioning_mesh_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_auto_spmd_partitioning_mesh_shape() const;
  void _internal_add_auto_spmd_partitioning_mesh_shape(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_auto_spmd_partitioning_mesh_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 auto_spmd_partitioning_mesh_shape(int index) const;
  void set_auto_spmd_partitioning_mesh_shape(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_auto_spmd_partitioning_mesh_shape(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      auto_spmd_partitioning_mesh_shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_auto_spmd_partitioning_mesh_shape();

  // repeated int64 auto_spmd_partitioning_mesh_ids = 17;
  int auto_spmd_partitioning_mesh_ids_size() const;
  private:
  int _internal_auto_spmd_partitioning_mesh_ids_size() const;
  public:
  void clear_auto_spmd_partitioning_mesh_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auto_spmd_partitioning_mesh_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_auto_spmd_partitioning_mesh_ids() const;
  void _internal_add_auto_spmd_partitioning_mesh_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_auto_spmd_partitioning_mesh_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 auto_spmd_partitioning_mesh_ids(int index) const;
  void set_auto_spmd_partitioning_mesh_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_auto_spmd_partitioning_mesh_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      auto_spmd_partitioning_mesh_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_auto_spmd_partitioning_mesh_ids();

  // .xla.ShapeProto shape_with_output_layout = 2;
  bool has_shape_with_output_layout() const;
  private:
  bool _internal_has_shape_with_output_layout() const;
  public:
  void clear_shape_with_output_layout();
  const ::xla::ShapeProto& shape_with_output_layout() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ShapeProto* release_shape_with_output_layout();
  ::xla::ShapeProto* mutable_shape_with_output_layout();
  void set_allocated_shape_with_output_layout(::xla::ShapeProto* shape_with_output_layout);
  private:
  const ::xla::ShapeProto& _internal_shape_with_output_layout() const;
  ::xla::ShapeProto* _internal_mutable_shape_with_output_layout();
  public:
  void unsafe_arena_set_allocated_shape_with_output_layout(
      ::xla::ShapeProto* shape_with_output_layout);
  ::xla::ShapeProto* unsafe_arena_release_shape_with_output_layout();

  // .xla.DebugOptions debug_options = 4;
  bool has_debug_options() const;
  private:
  bool _internal_has_debug_options() const;
  public:
  void clear_debug_options();
  const ::xla::DebugOptions& debug_options() const;
  PROTOBUF_MUST_USE_RESULT ::xla::DebugOptions* release_debug_options();
  ::xla::DebugOptions* mutable_debug_options();
  void set_allocated_debug_options(::xla::DebugOptions* debug_options);
  private:
  const ::xla::DebugOptions& _internal_debug_options() const;
  ::xla::DebugOptions* _internal_mutable_debug_options();
  public:
  void unsafe_arena_set_allocated_debug_options(
      ::xla::DebugOptions* debug_options);
  ::xla::DebugOptions* unsafe_arena_release_debug_options();

  // .xla.DeviceAssignmentProto device_assignment = 7;
  bool has_device_assignment() const;
  private:
  bool _internal_has_device_assignment() const;
  public:
  void clear_device_assignment();
  const ::xla::DeviceAssignmentProto& device_assignment() const;
  PROTOBUF_MUST_USE_RESULT ::xla::DeviceAssignmentProto* release_device_assignment();
  ::xla::DeviceAssignmentProto* mutable_device_assignment();
  void set_allocated_device_assignment(::xla::DeviceAssignmentProto* device_assignment);
  private:
  const ::xla::DeviceAssignmentProto& _internal_device_assignment() const;
  ::xla::DeviceAssignmentProto* _internal_mutable_device_assignment();
  public:
  void unsafe_arena_set_allocated_device_assignment(
      ::xla::DeviceAssignmentProto* device_assignment);
  ::xla::DeviceAssignmentProto* unsafe_arena_release_device_assignment();

  // uint64 seed = 3;
  void clear_seed();
  ::PROTOBUF_NAMESPACE_ID::uint64 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seed() const;
  void _internal_set_seed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 num_replicas = 6;
  void clear_num_replicas();
  ::PROTOBUF_NAMESPACE_ID::int32 num_replicas() const;
  void set_num_replicas(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_replicas() const;
  void _internal_set_num_replicas(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_partitions = 9;
  void clear_num_partitions();
  ::PROTOBUF_NAMESPACE_ID::int32 num_partitions() const;
  void set_num_partitions(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_partitions() const;
  void _internal_set_num_partitions(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 launch_id = 10;
  void clear_launch_id();
  ::PROTOBUF_NAMESPACE_ID::int32 launch_id() const;
  void set_launch_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_launch_id() const;
  void _internal_set_launch_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool alias_passthrough_params = 8;
  void clear_alias_passthrough_params();
  bool alias_passthrough_params() const;
  void set_alias_passthrough_params(bool value);
  private:
  bool _internal_alias_passthrough_params() const;
  void _internal_set_alias_passthrough_params(bool value);
  public:

  // bool use_spmd_partitioning = 11;
  void clear_use_spmd_partitioning();
  bool use_spmd_partitioning() const;
  void set_use_spmd_partitioning(bool value);
  private:
  bool _internal_use_spmd_partitioning() const;
  void _internal_set_use_spmd_partitioning(bool value);
  public:

  // bool use_auto_spmd_partitioning = 15;
  void clear_use_auto_spmd_partitioning();
  bool use_auto_spmd_partitioning() const;
  void set_use_auto_spmd_partitioning(bool value);
  private:
  bool _internal_use_auto_spmd_partitioning() const;
  void _internal_set_use_auto_spmd_partitioning(bool value);
  public:

  // bool deduplicate_hlo = 12;
  void clear_deduplicate_hlo();
  bool deduplicate_hlo() const;
  void set_deduplicate_hlo(bool value);
  private:
  bool _internal_deduplicate_hlo() const;
  void _internal_set_deduplicate_hlo(bool value);
  public:

  // bool allow_spmd_sharding_propagation_to_output = 14;
  void clear_allow_spmd_sharding_propagation_to_output();
  bool allow_spmd_sharding_propagation_to_output() const;
  void set_allow_spmd_sharding_propagation_to_output(bool value);
  private:
  bool _internal_allow_spmd_sharding_propagation_to_output() const;
  void _internal_set_allow_spmd_sharding_propagation_to_output(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xla.ExecutionOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceHandle > device_handles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > auto_spmd_partitioning_mesh_shape_;
  mutable std::atomic<int> _auto_spmd_partitioning_mesh_shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > auto_spmd_partitioning_mesh_ids_;
  mutable std::atomic<int> _auto_spmd_partitioning_mesh_ids_cached_byte_size_;
  ::xla::ShapeProto* shape_with_output_layout_;
  ::xla::DebugOptions* debug_options_;
  ::xla::DeviceAssignmentProto* device_assignment_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seed_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_replicas_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_partitions_;
  ::PROTOBUF_NAMESPACE_ID::int32 launch_id_;
  bool alias_passthrough_params_;
  bool use_spmd_partitioning_;
  bool use_auto_spmd_partitioning_;
  bool deduplicate_hlo_;
  bool allow_spmd_sharding_propagation_to_output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceHandlesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.GetDeviceHandlesRequest) */ {
 public:
  inline GetDeviceHandlesRequest() : GetDeviceHandlesRequest(nullptr) {}
  ~GetDeviceHandlesRequest() override;
  explicit constexpr GetDeviceHandlesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDeviceHandlesRequest(const GetDeviceHandlesRequest& from);
  GetDeviceHandlesRequest(GetDeviceHandlesRequest&& from) noexcept
    : GetDeviceHandlesRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceHandlesRequest& operator=(const GetDeviceHandlesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceHandlesRequest& operator=(GetDeviceHandlesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDeviceHandlesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDeviceHandlesRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceHandlesRequest*>(
               &_GetDeviceHandlesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetDeviceHandlesRequest& a, GetDeviceHandlesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceHandlesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceHandlesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceHandlesRequest* New() const final {
    return new GetDeviceHandlesRequest();
  }

  GetDeviceHandlesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceHandlesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDeviceHandlesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDeviceHandlesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceHandlesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.GetDeviceHandlesRequest";
  }
  protected:
  explicit GetDeviceHandlesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceCountFieldNumber = 1,
  };
  // int64 device_count = 1;
  void clear_device_count();
  ::PROTOBUF_NAMESPACE_ID::int64 device_count() const;
  void set_device_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_device_count() const;
  void _internal_set_device_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:xla.GetDeviceHandlesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 device_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceHandlesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.GetDeviceHandlesResponse) */ {
 public:
  inline GetDeviceHandlesResponse() : GetDeviceHandlesResponse(nullptr) {}
  ~GetDeviceHandlesResponse() override;
  explicit constexpr GetDeviceHandlesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDeviceHandlesResponse(const GetDeviceHandlesResponse& from);
  GetDeviceHandlesResponse(GetDeviceHandlesResponse&& from) noexcept
    : GetDeviceHandlesResponse() {
    *this = ::std::move(from);
  }

  inline GetDeviceHandlesResponse& operator=(const GetDeviceHandlesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceHandlesResponse& operator=(GetDeviceHandlesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDeviceHandlesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDeviceHandlesResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeviceHandlesResponse*>(
               &_GetDeviceHandlesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetDeviceHandlesResponse& a, GetDeviceHandlesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceHandlesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceHandlesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceHandlesResponse* New() const final {
    return new GetDeviceHandlesResponse();
  }

  GetDeviceHandlesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceHandlesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDeviceHandlesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDeviceHandlesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceHandlesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.GetDeviceHandlesResponse";
  }
  protected:
  explicit GetDeviceHandlesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceHandlesFieldNumber = 1,
  };
  // repeated .xla.DeviceHandle device_handles = 1;
  int device_handles_size() const;
  private:
  int _internal_device_handles_size() const;
  public:
  void clear_device_handles();
  ::xla::DeviceHandle* mutable_device_handles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceHandle >*
      mutable_device_handles();
  private:
  const ::xla::DeviceHandle& _internal_device_handles(int index) const;
  ::xla::DeviceHandle* _internal_add_device_handles();
  public:
  const ::xla::DeviceHandle& device_handles(int index) const;
  ::xla::DeviceHandle* add_device_handles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceHandle >&
      device_handles() const;

  // @@protoc_insertion_point(class_scope:xla.GetDeviceHandlesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceHandle > device_handles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class TransferToClientRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.TransferToClientRequest) */ {
 public:
  inline TransferToClientRequest() : TransferToClientRequest(nullptr) {}
  ~TransferToClientRequest() override;
  explicit constexpr TransferToClientRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferToClientRequest(const TransferToClientRequest& from);
  TransferToClientRequest(TransferToClientRequest&& from) noexcept
    : TransferToClientRequest() {
    *this = ::std::move(from);
  }

  inline TransferToClientRequest& operator=(const TransferToClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferToClientRequest& operator=(TransferToClientRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferToClientRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferToClientRequest* internal_default_instance() {
    return reinterpret_cast<const TransferToClientRequest*>(
               &_TransferToClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransferToClientRequest& a, TransferToClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferToClientRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferToClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferToClientRequest* New() const final {
    return new TransferToClientRequest();
  }

  TransferToClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferToClientRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferToClientRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransferToClientRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferToClientRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.TransferToClientRequest";
  }
  protected:
  explicit TransferToClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kShapeWithLayoutFieldNumber = 2,
  };
  // .xla.GlobalDataHandle data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::xla::GlobalDataHandle& data() const;
  PROTOBUF_MUST_USE_RESULT ::xla::GlobalDataHandle* release_data();
  ::xla::GlobalDataHandle* mutable_data();
  void set_allocated_data(::xla::GlobalDataHandle* data);
  private:
  const ::xla::GlobalDataHandle& _internal_data() const;
  ::xla::GlobalDataHandle* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::xla::GlobalDataHandle* data);
  ::xla::GlobalDataHandle* unsafe_arena_release_data();

  // .xla.ShapeProto shape_with_layout = 2;
  bool has_shape_with_layout() const;
  private:
  bool _internal_has_shape_with_layout() const;
  public:
  void clear_shape_with_layout();
  const ::xla::ShapeProto& shape_with_layout() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ShapeProto* release_shape_with_layout();
  ::xla::ShapeProto* mutable_shape_with_layout();
  void set_allocated_shape_with_layout(::xla::ShapeProto* shape_with_layout);
  private:
  const ::xla::ShapeProto& _internal_shape_with_layout() const;
  ::xla::ShapeProto* _internal_mutable_shape_with_layout();
  public:
  void unsafe_arena_set_allocated_shape_with_layout(
      ::xla::ShapeProto* shape_with_layout);
  ::xla::ShapeProto* unsafe_arena_release_shape_with_layout();

  // @@protoc_insertion_point(class_scope:xla.TransferToClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::GlobalDataHandle* data_;
  ::xla::ShapeProto* shape_with_layout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class TransferToClientResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.TransferToClientResponse) */ {
 public:
  inline TransferToClientResponse() : TransferToClientResponse(nullptr) {}
  ~TransferToClientResponse() override;
  explicit constexpr TransferToClientResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferToClientResponse(const TransferToClientResponse& from);
  TransferToClientResponse(TransferToClientResponse&& from) noexcept
    : TransferToClientResponse() {
    *this = ::std::move(from);
  }

  inline TransferToClientResponse& operator=(const TransferToClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferToClientResponse& operator=(TransferToClientResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferToClientResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferToClientResponse* internal_default_instance() {
    return reinterpret_cast<const TransferToClientResponse*>(
               &_TransferToClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TransferToClientResponse& a, TransferToClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferToClientResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferToClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferToClientResponse* New() const final {
    return new TransferToClientResponse();
  }

  TransferToClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferToClientResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferToClientResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransferToClientResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferToClientResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.TransferToClientResponse";
  }
  protected:
  explicit TransferToClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralFieldNumber = 1,
  };
  // .xla.LiteralProto literal = 1;
  bool has_literal() const;
  private:
  bool _internal_has_literal() const;
  public:
  void clear_literal();
  const ::xla::LiteralProto& literal() const;
  PROTOBUF_MUST_USE_RESULT ::xla::LiteralProto* release_literal();
  ::xla::LiteralProto* mutable_literal();
  void set_allocated_literal(::xla::LiteralProto* literal);
  private:
  const ::xla::LiteralProto& _internal_literal() const;
  ::xla::LiteralProto* _internal_mutable_literal();
  public:
  void unsafe_arena_set_allocated_literal(
      ::xla::LiteralProto* literal);
  ::xla::LiteralProto* unsafe_arena_release_literal();

  // @@protoc_insertion_point(class_scope:xla.TransferToClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::LiteralProto* literal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class TransferToServerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.TransferToServerRequest) */ {
 public:
  inline TransferToServerRequest() : TransferToServerRequest(nullptr) {}
  ~TransferToServerRequest() override;
  explicit constexpr TransferToServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferToServerRequest(const TransferToServerRequest& from);
  TransferToServerRequest(TransferToServerRequest&& from) noexcept
    : TransferToServerRequest() {
    *this = ::std::move(from);
  }

  inline TransferToServerRequest& operator=(const TransferToServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferToServerRequest& operator=(TransferToServerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferToServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferToServerRequest* internal_default_instance() {
    return reinterpret_cast<const TransferToServerRequest*>(
               &_TransferToServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TransferToServerRequest& a, TransferToServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferToServerRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferToServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferToServerRequest* New() const final {
    return new TransferToServerRequest();
  }

  TransferToServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferToServerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferToServerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransferToServerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferToServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.TransferToServerRequest";
  }
  protected:
  explicit TransferToServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralFieldNumber = 1,
    kDeviceHandleFieldNumber = 2,
  };
  // .xla.LiteralProto literal = 1;
  bool has_literal() const;
  private:
  bool _internal_has_literal() const;
  public:
  void clear_literal();
  const ::xla::LiteralProto& literal() const;
  PROTOBUF_MUST_USE_RESULT ::xla::LiteralProto* release_literal();
  ::xla::LiteralProto* mutable_literal();
  void set_allocated_literal(::xla::LiteralProto* literal);
  private:
  const ::xla::LiteralProto& _internal_literal() const;
  ::xla::LiteralProto* _internal_mutable_literal();
  public:
  void unsafe_arena_set_allocated_literal(
      ::xla::LiteralProto* literal);
  ::xla::LiteralProto* unsafe_arena_release_literal();

  // .xla.DeviceHandle device_handle = 2;
  bool has_device_handle() const;
  private:
  bool _internal_has_device_handle() const;
  public:
  void clear_device_handle();
  const ::xla::DeviceHandle& device_handle() const;
  PROTOBUF_MUST_USE_RESULT ::xla::DeviceHandle* release_device_handle();
  ::xla::DeviceHandle* mutable_device_handle();
  void set_allocated_device_handle(::xla::DeviceHandle* device_handle);
  private:
  const ::xla::DeviceHandle& _internal_device_handle() const;
  ::xla::DeviceHandle* _internal_mutable_device_handle();
  public:
  void unsafe_arena_set_allocated_device_handle(
      ::xla::DeviceHandle* device_handle);
  ::xla::DeviceHandle* unsafe_arena_release_device_handle();

  // @@protoc_insertion_point(class_scope:xla.TransferToServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::LiteralProto* literal_;
  ::xla::DeviceHandle* device_handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class TransferToServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.TransferToServerResponse) */ {
 public:
  inline TransferToServerResponse() : TransferToServerResponse(nullptr) {}
  ~TransferToServerResponse() override;
  explicit constexpr TransferToServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferToServerResponse(const TransferToServerResponse& from);
  TransferToServerResponse(TransferToServerResponse&& from) noexcept
    : TransferToServerResponse() {
    *this = ::std::move(from);
  }

  inline TransferToServerResponse& operator=(const TransferToServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferToServerResponse& operator=(TransferToServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferToServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferToServerResponse* internal_default_instance() {
    return reinterpret_cast<const TransferToServerResponse*>(
               &_TransferToServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TransferToServerResponse& a, TransferToServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferToServerResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferToServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferToServerResponse* New() const final {
    return new TransferToServerResponse();
  }

  TransferToServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferToServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferToServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransferToServerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferToServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.TransferToServerResponse";
  }
  protected:
  explicit TransferToServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .xla.GlobalDataHandle data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::xla::GlobalDataHandle& data() const;
  PROTOBUF_MUST_USE_RESULT ::xla::GlobalDataHandle* release_data();
  ::xla::GlobalDataHandle* mutable_data();
  void set_allocated_data(::xla::GlobalDataHandle* data);
  private:
  const ::xla::GlobalDataHandle& _internal_data() const;
  ::xla::GlobalDataHandle* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::xla::GlobalDataHandle* data);
  ::xla::GlobalDataHandle* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:xla.TransferToServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::GlobalDataHandle* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class TransferToInfeedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.TransferToInfeedRequest) */ {
 public:
  inline TransferToInfeedRequest() : TransferToInfeedRequest(nullptr) {}
  ~TransferToInfeedRequest() override;
  explicit constexpr TransferToInfeedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferToInfeedRequest(const TransferToInfeedRequest& from);
  TransferToInfeedRequest(TransferToInfeedRequest&& from) noexcept
    : TransferToInfeedRequest() {
    *this = ::std::move(from);
  }

  inline TransferToInfeedRequest& operator=(const TransferToInfeedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferToInfeedRequest& operator=(TransferToInfeedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferToInfeedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferToInfeedRequest* internal_default_instance() {
    return reinterpret_cast<const TransferToInfeedRequest*>(
               &_TransferToInfeedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TransferToInfeedRequest& a, TransferToInfeedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferToInfeedRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferToInfeedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferToInfeedRequest* New() const final {
    return new TransferToInfeedRequest();
  }

  TransferToInfeedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferToInfeedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferToInfeedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransferToInfeedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferToInfeedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.TransferToInfeedRequest";
  }
  protected:
  explicit TransferToInfeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralFieldNumber = 1,
    kDeviceHandleFieldNumber = 3,
    kReplicaIdFieldNumber = 2,
  };
  // .xla.LiteralProto literal = 1;
  bool has_literal() const;
  private:
  bool _internal_has_literal() const;
  public:
  void clear_literal();
  const ::xla::LiteralProto& literal() const;
  PROTOBUF_MUST_USE_RESULT ::xla::LiteralProto* release_literal();
  ::xla::LiteralProto* mutable_literal();
  void set_allocated_literal(::xla::LiteralProto* literal);
  private:
  const ::xla::LiteralProto& _internal_literal() const;
  ::xla::LiteralProto* _internal_mutable_literal();
  public:
  void unsafe_arena_set_allocated_literal(
      ::xla::LiteralProto* literal);
  ::xla::LiteralProto* unsafe_arena_release_literal();

  // .xla.DeviceHandle device_handle = 3;
  bool has_device_handle() const;
  private:
  bool _internal_has_device_handle() const;
  public:
  void clear_device_handle();
  const ::xla::DeviceHandle& device_handle() const;
  PROTOBUF_MUST_USE_RESULT ::xla::DeviceHandle* release_device_handle();
  ::xla::DeviceHandle* mutable_device_handle();
  void set_allocated_device_handle(::xla::DeviceHandle* device_handle);
  private:
  const ::xla::DeviceHandle& _internal_device_handle() const;
  ::xla::DeviceHandle* _internal_mutable_device_handle();
  public:
  void unsafe_arena_set_allocated_device_handle(
      ::xla::DeviceHandle* device_handle);
  ::xla::DeviceHandle* unsafe_arena_release_device_handle();

  // int64 replica_id = 2;
  void clear_replica_id();
  ::PROTOBUF_NAMESPACE_ID::int64 replica_id() const;
  void set_replica_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_replica_id() const;
  void _internal_set_replica_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:xla.TransferToInfeedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::LiteralProto* literal_;
  ::xla::DeviceHandle* device_handle_;
  ::PROTOBUF_NAMESPACE_ID::int64 replica_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class TransferToInfeedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.TransferToInfeedResponse) */ {
 public:
  inline TransferToInfeedResponse() : TransferToInfeedResponse(nullptr) {}
  ~TransferToInfeedResponse() override;
  explicit constexpr TransferToInfeedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferToInfeedResponse(const TransferToInfeedResponse& from);
  TransferToInfeedResponse(TransferToInfeedResponse&& from) noexcept
    : TransferToInfeedResponse() {
    *this = ::std::move(from);
  }

  inline TransferToInfeedResponse& operator=(const TransferToInfeedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferToInfeedResponse& operator=(TransferToInfeedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferToInfeedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferToInfeedResponse* internal_default_instance() {
    return reinterpret_cast<const TransferToInfeedResponse*>(
               &_TransferToInfeedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TransferToInfeedResponse& a, TransferToInfeedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferToInfeedResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferToInfeedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferToInfeedResponse* New() const final {
    return new TransferToInfeedResponse();
  }

  TransferToInfeedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferToInfeedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferToInfeedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransferToInfeedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferToInfeedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.TransferToInfeedResponse";
  }
  protected:
  explicit TransferToInfeedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:xla.TransferToInfeedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class TransferFromOutfeedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.TransferFromOutfeedRequest) */ {
 public:
  inline TransferFromOutfeedRequest() : TransferFromOutfeedRequest(nullptr) {}
  ~TransferFromOutfeedRequest() override;
  explicit constexpr TransferFromOutfeedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferFromOutfeedRequest(const TransferFromOutfeedRequest& from);
  TransferFromOutfeedRequest(TransferFromOutfeedRequest&& from) noexcept
    : TransferFromOutfeedRequest() {
    *this = ::std::move(from);
  }

  inline TransferFromOutfeedRequest& operator=(const TransferFromOutfeedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferFromOutfeedRequest& operator=(TransferFromOutfeedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferFromOutfeedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferFromOutfeedRequest* internal_default_instance() {
    return reinterpret_cast<const TransferFromOutfeedRequest*>(
               &_TransferFromOutfeedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TransferFromOutfeedRequest& a, TransferFromOutfeedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferFromOutfeedRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferFromOutfeedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferFromOutfeedRequest* New() const final {
    return new TransferFromOutfeedRequest();
  }

  TransferFromOutfeedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferFromOutfeedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferFromOutfeedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransferFromOutfeedRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferFromOutfeedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.TransferFromOutfeedRequest";
  }
  protected:
  explicit TransferFromOutfeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeWithLayoutFieldNumber = 1,
    kDeviceHandleFieldNumber = 3,
    kReplicaIdFieldNumber = 2,
  };
  // .xla.ShapeProto shape_with_layout = 1;
  bool has_shape_with_layout() const;
  private:
  bool _internal_has_shape_with_layout() const;
  public:
  void clear_shape_with_layout();
  const ::xla::ShapeProto& shape_with_layout() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ShapeProto* release_shape_with_layout();
  ::xla::ShapeProto* mutable_shape_with_layout();
  void set_allocated_shape_with_layout(::xla::ShapeProto* shape_with_layout);
  private:
  const ::xla::ShapeProto& _internal_shape_with_layout() const;
  ::xla::ShapeProto* _internal_mutable_shape_with_layout();
  public:
  void unsafe_arena_set_allocated_shape_with_layout(
      ::xla::ShapeProto* shape_with_layout);
  ::xla::ShapeProto* unsafe_arena_release_shape_with_layout();

  // .xla.DeviceHandle device_handle = 3;
  bool has_device_handle() const;
  private:
  bool _internal_has_device_handle() const;
  public:
  void clear_device_handle();
  const ::xla::DeviceHandle& device_handle() const;
  PROTOBUF_MUST_USE_RESULT ::xla::DeviceHandle* release_device_handle();
  ::xla::DeviceHandle* mutable_device_handle();
  void set_allocated_device_handle(::xla::DeviceHandle* device_handle);
  private:
  const ::xla::DeviceHandle& _internal_device_handle() const;
  ::xla::DeviceHandle* _internal_mutable_device_handle();
  public:
  void unsafe_arena_set_allocated_device_handle(
      ::xla::DeviceHandle* device_handle);
  ::xla::DeviceHandle* unsafe_arena_release_device_handle();

  // int64 replica_id = 2;
  void clear_replica_id();
  ::PROTOBUF_NAMESPACE_ID::int64 replica_id() const;
  void set_replica_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_replica_id() const;
  void _internal_set_replica_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:xla.TransferFromOutfeedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ShapeProto* shape_with_layout_;
  ::xla::DeviceHandle* device_handle_;
  ::PROTOBUF_NAMESPACE_ID::int64 replica_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class TransferFromOutfeedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.TransferFromOutfeedResponse) */ {
 public:
  inline TransferFromOutfeedResponse() : TransferFromOutfeedResponse(nullptr) {}
  ~TransferFromOutfeedResponse() override;
  explicit constexpr TransferFromOutfeedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferFromOutfeedResponse(const TransferFromOutfeedResponse& from);
  TransferFromOutfeedResponse(TransferFromOutfeedResponse&& from) noexcept
    : TransferFromOutfeedResponse() {
    *this = ::std::move(from);
  }

  inline TransferFromOutfeedResponse& operator=(const TransferFromOutfeedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferFromOutfeedResponse& operator=(TransferFromOutfeedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferFromOutfeedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferFromOutfeedResponse* internal_default_instance() {
    return reinterpret_cast<const TransferFromOutfeedResponse*>(
               &_TransferFromOutfeedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TransferFromOutfeedResponse& a, TransferFromOutfeedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferFromOutfeedResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferFromOutfeedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferFromOutfeedResponse* New() const final {
    return new TransferFromOutfeedResponse();
  }

  TransferFromOutfeedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferFromOutfeedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferFromOutfeedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransferFromOutfeedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferFromOutfeedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.TransferFromOutfeedResponse";
  }
  protected:
  explicit TransferFromOutfeedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralFieldNumber = 1,
  };
  // .xla.LiteralProto literal = 1;
  bool has_literal() const;
  private:
  bool _internal_has_literal() const;
  public:
  void clear_literal();
  const ::xla::LiteralProto& literal() const;
  PROTOBUF_MUST_USE_RESULT ::xla::LiteralProto* release_literal();
  ::xla::LiteralProto* mutable_literal();
  void set_allocated_literal(::xla::LiteralProto* literal);
  private:
  const ::xla::LiteralProto& _internal_literal() const;
  ::xla::LiteralProto* _internal_mutable_literal();
  public:
  void unsafe_arena_set_allocated_literal(
      ::xla::LiteralProto* literal);
  ::xla::LiteralProto* unsafe_arena_release_literal();

  // @@protoc_insertion_point(class_scope:xla.TransferFromOutfeedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::LiteralProto* literal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class ResetDeviceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.ResetDeviceRequest) */ {
 public:
  inline ResetDeviceRequest() : ResetDeviceRequest(nullptr) {}
  ~ResetDeviceRequest() override;
  explicit constexpr ResetDeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetDeviceRequest(const ResetDeviceRequest& from);
  ResetDeviceRequest(ResetDeviceRequest&& from) noexcept
    : ResetDeviceRequest() {
    *this = ::std::move(from);
  }

  inline ResetDeviceRequest& operator=(const ResetDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetDeviceRequest& operator=(ResetDeviceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetDeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const ResetDeviceRequest*>(
               &_ResetDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ResetDeviceRequest& a, ResetDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetDeviceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetDeviceRequest* New() const final {
    return new ResetDeviceRequest();
  }

  ResetDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetDeviceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResetDeviceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResetDeviceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetDeviceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.ResetDeviceRequest";
  }
  protected:
  explicit ResetDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceHandleFieldNumber = 1,
  };
  // .xla.DeviceHandle device_handle = 1;
  bool has_device_handle() const;
  private:
  bool _internal_has_device_handle() const;
  public:
  void clear_device_handle();
  const ::xla::DeviceHandle& device_handle() const;
  PROTOBUF_MUST_USE_RESULT ::xla::DeviceHandle* release_device_handle();
  ::xla::DeviceHandle* mutable_device_handle();
  void set_allocated_device_handle(::xla::DeviceHandle* device_handle);
  private:
  const ::xla::DeviceHandle& _internal_device_handle() const;
  ::xla::DeviceHandle* _internal_mutable_device_handle();
  public:
  void unsafe_arena_set_allocated_device_handle(
      ::xla::DeviceHandle* device_handle);
  ::xla::DeviceHandle* unsafe_arena_release_device_handle();

  // @@protoc_insertion_point(class_scope:xla.ResetDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::DeviceHandle* device_handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class ResetDeviceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.ResetDeviceResponse) */ {
 public:
  inline ResetDeviceResponse() : ResetDeviceResponse(nullptr) {}
  ~ResetDeviceResponse() override;
  explicit constexpr ResetDeviceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetDeviceResponse(const ResetDeviceResponse& from);
  ResetDeviceResponse(ResetDeviceResponse&& from) noexcept
    : ResetDeviceResponse() {
    *this = ::std::move(from);
  }

  inline ResetDeviceResponse& operator=(const ResetDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetDeviceResponse& operator=(ResetDeviceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetDeviceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const ResetDeviceResponse*>(
               &_ResetDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ResetDeviceResponse& a, ResetDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetDeviceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetDeviceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetDeviceResponse* New() const final {
    return new ResetDeviceResponse();
  }

  ResetDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetDeviceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResetDeviceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResetDeviceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetDeviceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.ResetDeviceResponse";
  }
  protected:
  explicit ResetDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:xla.ResetDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class ComputationGraphStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.ComputationGraphStatsRequest) */ {
 public:
  inline ComputationGraphStatsRequest() : ComputationGraphStatsRequest(nullptr) {}
  ~ComputationGraphStatsRequest() override;
  explicit constexpr ComputationGraphStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComputationGraphStatsRequest(const ComputationGraphStatsRequest& from);
  ComputationGraphStatsRequest(ComputationGraphStatsRequest&& from) noexcept
    : ComputationGraphStatsRequest() {
    *this = ::std::move(from);
  }

  inline ComputationGraphStatsRequest& operator=(const ComputationGraphStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComputationGraphStatsRequest& operator=(ComputationGraphStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComputationGraphStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComputationGraphStatsRequest* internal_default_instance() {
    return reinterpret_cast<const ComputationGraphStatsRequest*>(
               &_ComputationGraphStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ComputationGraphStatsRequest& a, ComputationGraphStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ComputationGraphStatsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComputationGraphStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComputationGraphStatsRequest* New() const final {
    return new ComputationGraphStatsRequest();
  }

  ComputationGraphStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComputationGraphStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComputationGraphStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ComputationGraphStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComputationGraphStatsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.ComputationGraphStatsRequest";
  }
  protected:
  explicit ComputationGraphStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComputationFieldNumber = 1,
    kDebugOptionsFieldNumber = 2,
  };
  // .xla.HloModuleProto computation = 1;
  bool has_computation() const;
  private:
  bool _internal_has_computation() const;
  public:
  void clear_computation();
  const ::xla::HloModuleProto& computation() const;
  PROTOBUF_MUST_USE_RESULT ::xla::HloModuleProto* release_computation();
  ::xla::HloModuleProto* mutable_computation();
  void set_allocated_computation(::xla::HloModuleProto* computation);
  private:
  const ::xla::HloModuleProto& _internal_computation() const;
  ::xla::HloModuleProto* _internal_mutable_computation();
  public:
  void unsafe_arena_set_allocated_computation(
      ::xla::HloModuleProto* computation);
  ::xla::HloModuleProto* unsafe_arena_release_computation();

  // .xla.DebugOptions debug_options = 2;
  bool has_debug_options() const;
  private:
  bool _internal_has_debug_options() const;
  public:
  void clear_debug_options();
  const ::xla::DebugOptions& debug_options() const;
  PROTOBUF_MUST_USE_RESULT ::xla::DebugOptions* release_debug_options();
  ::xla::DebugOptions* mutable_debug_options();
  void set_allocated_debug_options(::xla::DebugOptions* debug_options);
  private:
  const ::xla::DebugOptions& _internal_debug_options() const;
  ::xla::DebugOptions* _internal_mutable_debug_options();
  public:
  void unsafe_arena_set_allocated_debug_options(
      ::xla::DebugOptions* debug_options);
  ::xla::DebugOptions* unsafe_arena_release_debug_options();

  // @@protoc_insertion_point(class_scope:xla.ComputationGraphStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::HloModuleProto* computation_;
  ::xla::DebugOptions* debug_options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class ComputationStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.ComputationStatsResponse) */ {
 public:
  inline ComputationStatsResponse() : ComputationStatsResponse(nullptr) {}
  ~ComputationStatsResponse() override;
  explicit constexpr ComputationStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComputationStatsResponse(const ComputationStatsResponse& from);
  ComputationStatsResponse(ComputationStatsResponse&& from) noexcept
    : ComputationStatsResponse() {
    *this = ::std::move(from);
  }

  inline ComputationStatsResponse& operator=(const ComputationStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComputationStatsResponse& operator=(ComputationStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComputationStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComputationStatsResponse* internal_default_instance() {
    return reinterpret_cast<const ComputationStatsResponse*>(
               &_ComputationStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ComputationStatsResponse& a, ComputationStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ComputationStatsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComputationStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComputationStatsResponse* New() const final {
    return new ComputationStatsResponse();
  }

  ComputationStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComputationStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComputationStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ComputationStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComputationStatsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.ComputationStatsResponse";
  }
  protected:
  explicit ComputationStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // .xla.ComputationStats stats = 1;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::xla::ComputationStats& stats() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ComputationStats* release_stats();
  ::xla::ComputationStats* mutable_stats();
  void set_allocated_stats(::xla::ComputationStats* stats);
  private:
  const ::xla::ComputationStats& _internal_stats() const;
  ::xla::ComputationStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::xla::ComputationStats* stats);
  ::xla::ComputationStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:xla.ComputationStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ComputationStats* stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class CreateChannelHandleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.CreateChannelHandleRequest) */ {
 public:
  inline CreateChannelHandleRequest() : CreateChannelHandleRequest(nullptr) {}
  ~CreateChannelHandleRequest() override;
  explicit constexpr CreateChannelHandleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateChannelHandleRequest(const CreateChannelHandleRequest& from);
  CreateChannelHandleRequest(CreateChannelHandleRequest&& from) noexcept
    : CreateChannelHandleRequest() {
    *this = ::std::move(from);
  }

  inline CreateChannelHandleRequest& operator=(const CreateChannelHandleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChannelHandleRequest& operator=(CreateChannelHandleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChannelHandleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChannelHandleRequest* internal_default_instance() {
    return reinterpret_cast<const CreateChannelHandleRequest*>(
               &_CreateChannelHandleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CreateChannelHandleRequest& a, CreateChannelHandleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChannelHandleRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChannelHandleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelHandleRequest* New() const final {
    return new CreateChannelHandleRequest();
  }

  CreateChannelHandleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateChannelHandleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateChannelHandleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateChannelHandleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChannelHandleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.CreateChannelHandleRequest";
  }
  protected:
  explicit CreateChannelHandleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelTypeFieldNumber = 1,
  };
  // .xla.ChannelHandle.ChannelType channel_type = 1;
  void clear_channel_type();
  ::xla::ChannelHandle_ChannelType channel_type() const;
  void set_channel_type(::xla::ChannelHandle_ChannelType value);
  private:
  ::xla::ChannelHandle_ChannelType _internal_channel_type() const;
  void _internal_set_channel_type(::xla::ChannelHandle_ChannelType value);
  public:

  // @@protoc_insertion_point(class_scope:xla.CreateChannelHandleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int channel_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class CreateChannelHandleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.CreateChannelHandleResponse) */ {
 public:
  inline CreateChannelHandleResponse() : CreateChannelHandleResponse(nullptr) {}
  ~CreateChannelHandleResponse() override;
  explicit constexpr CreateChannelHandleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateChannelHandleResponse(const CreateChannelHandleResponse& from);
  CreateChannelHandleResponse(CreateChannelHandleResponse&& from) noexcept
    : CreateChannelHandleResponse() {
    *this = ::std::move(from);
  }

  inline CreateChannelHandleResponse& operator=(const CreateChannelHandleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChannelHandleResponse& operator=(CreateChannelHandleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChannelHandleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChannelHandleResponse* internal_default_instance() {
    return reinterpret_cast<const CreateChannelHandleResponse*>(
               &_CreateChannelHandleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CreateChannelHandleResponse& a, CreateChannelHandleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChannelHandleResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChannelHandleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelHandleResponse* New() const final {
    return new CreateChannelHandleResponse();
  }

  CreateChannelHandleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateChannelHandleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateChannelHandleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateChannelHandleResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChannelHandleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.CreateChannelHandleResponse";
  }
  protected:
  explicit CreateChannelHandleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
  };
  // .xla.ChannelHandle channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::xla::ChannelHandle& channel() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ChannelHandle* release_channel();
  ::xla::ChannelHandle* mutable_channel();
  void set_allocated_channel(::xla::ChannelHandle* channel);
  private:
  const ::xla::ChannelHandle& _internal_channel() const;
  ::xla::ChannelHandle* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::xla::ChannelHandle* channel);
  ::xla::ChannelHandle* unsafe_arena_release_channel();

  // @@protoc_insertion_point(class_scope:xla.CreateChannelHandleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ChannelHandle* channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class UnregisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.UnregisterRequest) */ {
 public:
  inline UnregisterRequest() : UnregisterRequest(nullptr) {}
  ~UnregisterRequest() override;
  explicit constexpr UnregisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnregisterRequest(const UnregisterRequest& from);
  UnregisterRequest(UnregisterRequest&& from) noexcept
    : UnregisterRequest() {
    *this = ::std::move(from);
  }

  inline UnregisterRequest& operator=(const UnregisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterRequest& operator=(UnregisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnregisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnregisterRequest* internal_default_instance() {
    return reinterpret_cast<const UnregisterRequest*>(
               &_UnregisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UnregisterRequest& a, UnregisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnregisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnregisterRequest* New() const final {
    return new UnregisterRequest();
  }

  UnregisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnregisterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnregisterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.UnregisterRequest";
  }
  protected:
  explicit UnregisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .xla.GlobalDataHandle data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::xla::GlobalDataHandle* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >*
      mutable_data();
  private:
  const ::xla::GlobalDataHandle& _internal_data(int index) const;
  ::xla::GlobalDataHandle* _internal_add_data();
  public:
  const ::xla::GlobalDataHandle& data(int index) const;
  ::xla::GlobalDataHandle* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >&
      data() const;

  // @@protoc_insertion_point(class_scope:xla.UnregisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class UnregisterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.UnregisterResponse) */ {
 public:
  inline UnregisterResponse() : UnregisterResponse(nullptr) {}
  ~UnregisterResponse() override;
  explicit constexpr UnregisterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnregisterResponse(const UnregisterResponse& from);
  UnregisterResponse(UnregisterResponse&& from) noexcept
    : UnregisterResponse() {
    *this = ::std::move(from);
  }

  inline UnregisterResponse& operator=(const UnregisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterResponse& operator=(UnregisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnregisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnregisterResponse* internal_default_instance() {
    return reinterpret_cast<const UnregisterResponse*>(
               &_UnregisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UnregisterResponse& a, UnregisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnregisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnregisterResponse* New() const final {
    return new UnregisterResponse();
  }

  UnregisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnregisterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnregisterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.UnregisterResponse";
  }
  protected:
  explicit UnregisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:xla.UnregisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class CompileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.CompileRequest) */ {
 public:
  inline CompileRequest() : CompileRequest(nullptr) {}
  ~CompileRequest() override;
  explicit constexpr CompileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompileRequest(const CompileRequest& from);
  CompileRequest(CompileRequest&& from) noexcept
    : CompileRequest() {
    *this = ::std::move(from);
  }

  inline CompileRequest& operator=(const CompileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileRequest& operator=(CompileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompileRequest* internal_default_instance() {
    return reinterpret_cast<const CompileRequest*>(
               &_CompileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CompileRequest& a, CompileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompileRequest* New() const final {
    return new CompileRequest();
  }

  CompileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CompileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.CompileRequest";
  }
  protected:
  explicit CompileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputShapeWithLayoutFieldNumber = 3,
    kComputationFieldNumber = 1,
    kExecutionOptionsFieldNumber = 2,
  };
  // repeated .xla.ShapeProto input_shape_with_layout = 3;
  int input_shape_with_layout_size() const;
  private:
  int _internal_input_shape_with_layout_size() const;
  public:
  void clear_input_shape_with_layout();
  ::xla::ShapeProto* mutable_input_shape_with_layout(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto >*
      mutable_input_shape_with_layout();
  private:
  const ::xla::ShapeProto& _internal_input_shape_with_layout(int index) const;
  ::xla::ShapeProto* _internal_add_input_shape_with_layout();
  public:
  const ::xla::ShapeProto& input_shape_with_layout(int index) const;
  ::xla::ShapeProto* add_input_shape_with_layout();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto >&
      input_shape_with_layout() const;

  // .xla.HloModuleProto computation = 1;
  bool has_computation() const;
  private:
  bool _internal_has_computation() const;
  public:
  void clear_computation();
  const ::xla::HloModuleProto& computation() const;
  PROTOBUF_MUST_USE_RESULT ::xla::HloModuleProto* release_computation();
  ::xla::HloModuleProto* mutable_computation();
  void set_allocated_computation(::xla::HloModuleProto* computation);
  private:
  const ::xla::HloModuleProto& _internal_computation() const;
  ::xla::HloModuleProto* _internal_mutable_computation();
  public:
  void unsafe_arena_set_allocated_computation(
      ::xla::HloModuleProto* computation);
  ::xla::HloModuleProto* unsafe_arena_release_computation();

  // .xla.ExecutionOptions execution_options = 2;
  bool has_execution_options() const;
  private:
  bool _internal_has_execution_options() const;
  public:
  void clear_execution_options();
  const ::xla::ExecutionOptions& execution_options() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ExecutionOptions* release_execution_options();
  ::xla::ExecutionOptions* mutable_execution_options();
  void set_allocated_execution_options(::xla::ExecutionOptions* execution_options);
  private:
  const ::xla::ExecutionOptions& _internal_execution_options() const;
  ::xla::ExecutionOptions* _internal_mutable_execution_options();
  public:
  void unsafe_arena_set_allocated_execution_options(
      ::xla::ExecutionOptions* execution_options);
  ::xla::ExecutionOptions* unsafe_arena_release_execution_options();

  // @@protoc_insertion_point(class_scope:xla.CompileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto > input_shape_with_layout_;
  ::xla::HloModuleProto* computation_;
  ::xla::ExecutionOptions* execution_options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class CompileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.CompileResponse) */ {
 public:
  inline CompileResponse() : CompileResponse(nullptr) {}
  ~CompileResponse() override;
  explicit constexpr CompileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompileResponse(const CompileResponse& from);
  CompileResponse(CompileResponse&& from) noexcept
    : CompileResponse() {
    *this = ::std::move(from);
  }

  inline CompileResponse& operator=(const CompileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileResponse& operator=(CompileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompileResponse* internal_default_instance() {
    return reinterpret_cast<const CompileResponse*>(
               &_CompileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CompileResponse& a, CompileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompileResponse* New() const final {
    return new CompileResponse();
  }

  CompileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CompileResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.CompileResponse";
  }
  protected:
  explicit CompileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
  };
  // .xla.ExecutionHandle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::xla::ExecutionHandle& handle() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ExecutionHandle* release_handle();
  ::xla::ExecutionHandle* mutable_handle();
  void set_allocated_handle(::xla::ExecutionHandle* handle);
  private:
  const ::xla::ExecutionHandle& _internal_handle() const;
  ::xla::ExecutionHandle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::xla::ExecutionHandle* handle);
  ::xla::ExecutionHandle* unsafe_arena_release_handle();

  // @@protoc_insertion_point(class_scope:xla.CompileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ExecutionHandle* handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class ExecuteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.ExecuteRequest) */ {
 public:
  inline ExecuteRequest() : ExecuteRequest(nullptr) {}
  ~ExecuteRequest() override;
  explicit constexpr ExecuteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteRequest(const ExecuteRequest& from);
  ExecuteRequest(ExecuteRequest&& from) noexcept
    : ExecuteRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteRequest& operator=(const ExecuteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteRequest& operator=(ExecuteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteRequest*>(
               &_ExecuteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ExecuteRequest& a, ExecuteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteRequest* New() const final {
    return new ExecuteRequest();
  }

  ExecuteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecuteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecuteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.ExecuteRequest";
  }
  protected:
  explicit ExecuteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 2,
    kHandleFieldNumber = 1,
  };
  // repeated .xla.GlobalDataHandle arguments = 2;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::xla::GlobalDataHandle* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >*
      mutable_arguments();
  private:
  const ::xla::GlobalDataHandle& _internal_arguments(int index) const;
  ::xla::GlobalDataHandle* _internal_add_arguments();
  public:
  const ::xla::GlobalDataHandle& arguments(int index) const;
  ::xla::GlobalDataHandle* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >&
      arguments() const;

  // .xla.ExecutionHandle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::xla::ExecutionHandle& handle() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ExecutionHandle* release_handle();
  ::xla::ExecutionHandle* mutable_handle();
  void set_allocated_handle(::xla::ExecutionHandle* handle);
  private:
  const ::xla::ExecutionHandle& _internal_handle() const;
  ::xla::ExecutionHandle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::xla::ExecutionHandle* handle);
  ::xla::ExecutionHandle* unsafe_arena_release_handle();

  // @@protoc_insertion_point(class_scope:xla.ExecuteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle > arguments_;
  ::xla::ExecutionHandle* handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class ExecuteGraphRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.ExecuteGraphRequest) */ {
 public:
  inline ExecuteGraphRequest() : ExecuteGraphRequest(nullptr) {}
  ~ExecuteGraphRequest() override;
  explicit constexpr ExecuteGraphRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteGraphRequest(const ExecuteGraphRequest& from);
  ExecuteGraphRequest(ExecuteGraphRequest&& from) noexcept
    : ExecuteGraphRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteGraphRequest& operator=(const ExecuteGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteGraphRequest& operator=(ExecuteGraphRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteGraphRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteGraphRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteGraphRequest*>(
               &_ExecuteGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ExecuteGraphRequest& a, ExecuteGraphRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteGraphRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteGraphRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteGraphRequest* New() const final {
    return new ExecuteGraphRequest();
  }

  ExecuteGraphRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteGraphRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecuteGraphRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecuteGraphRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteGraphRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.ExecuteGraphRequest";
  }
  protected:
  explicit ExecuteGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 2,
    kComputationFieldNumber = 1,
    kExecutionOptionsFieldNumber = 3,
  };
  // repeated .xla.GlobalDataHandle arguments = 2;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::xla::GlobalDataHandle* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >*
      mutable_arguments();
  private:
  const ::xla::GlobalDataHandle& _internal_arguments(int index) const;
  ::xla::GlobalDataHandle* _internal_add_arguments();
  public:
  const ::xla::GlobalDataHandle& arguments(int index) const;
  ::xla::GlobalDataHandle* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >&
      arguments() const;

  // .xla.HloModuleProto computation = 1;
  bool has_computation() const;
  private:
  bool _internal_has_computation() const;
  public:
  void clear_computation();
  const ::xla::HloModuleProto& computation() const;
  PROTOBUF_MUST_USE_RESULT ::xla::HloModuleProto* release_computation();
  ::xla::HloModuleProto* mutable_computation();
  void set_allocated_computation(::xla::HloModuleProto* computation);
  private:
  const ::xla::HloModuleProto& _internal_computation() const;
  ::xla::HloModuleProto* _internal_mutable_computation();
  public:
  void unsafe_arena_set_allocated_computation(
      ::xla::HloModuleProto* computation);
  ::xla::HloModuleProto* unsafe_arena_release_computation();

  // .xla.ExecutionOptions execution_options = 3;
  bool has_execution_options() const;
  private:
  bool _internal_has_execution_options() const;
  public:
  void clear_execution_options();
  const ::xla::ExecutionOptions& execution_options() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ExecutionOptions* release_execution_options();
  ::xla::ExecutionOptions* mutable_execution_options();
  void set_allocated_execution_options(::xla::ExecutionOptions* execution_options);
  private:
  const ::xla::ExecutionOptions& _internal_execution_options() const;
  ::xla::ExecutionOptions* _internal_mutable_execution_options();
  public:
  void unsafe_arena_set_allocated_execution_options(
      ::xla::ExecutionOptions* execution_options);
  ::xla::ExecutionOptions* unsafe_arena_release_execution_options();

  // @@protoc_insertion_point(class_scope:xla.ExecuteGraphRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle > arguments_;
  ::xla::HloModuleProto* computation_;
  ::xla::ExecutionOptions* execution_options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class ExecuteGraphParallelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.ExecuteGraphParallelRequest) */ {
 public:
  inline ExecuteGraphParallelRequest() : ExecuteGraphParallelRequest(nullptr) {}
  ~ExecuteGraphParallelRequest() override;
  explicit constexpr ExecuteGraphParallelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteGraphParallelRequest(const ExecuteGraphParallelRequest& from);
  ExecuteGraphParallelRequest(ExecuteGraphParallelRequest&& from) noexcept
    : ExecuteGraphParallelRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteGraphParallelRequest& operator=(const ExecuteGraphParallelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteGraphParallelRequest& operator=(ExecuteGraphParallelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteGraphParallelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteGraphParallelRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteGraphParallelRequest*>(
               &_ExecuteGraphParallelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ExecuteGraphParallelRequest& a, ExecuteGraphParallelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteGraphParallelRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteGraphParallelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteGraphParallelRequest* New() const final {
    return new ExecuteGraphParallelRequest();
  }

  ExecuteGraphParallelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteGraphParallelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecuteGraphParallelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecuteGraphParallelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteGraphParallelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.ExecuteGraphParallelRequest";
  }
  protected:
  explicit ExecuteGraphParallelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 1,
  };
  // repeated .xla.ExecuteGraphRequest requests = 1;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::xla::ExecuteGraphRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ExecuteGraphRequest >*
      mutable_requests();
  private:
  const ::xla::ExecuteGraphRequest& _internal_requests(int index) const;
  ::xla::ExecuteGraphRequest* _internal_add_requests();
  public:
  const ::xla::ExecuteGraphRequest& requests(int index) const;
  ::xla::ExecuteGraphRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ExecuteGraphRequest >&
      requests() const;

  // @@protoc_insertion_point(class_scope:xla.ExecuteGraphParallelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ExecuteGraphRequest > requests_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class ExecuteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.ExecuteResponse) */ {
 public:
  inline ExecuteResponse() : ExecuteResponse(nullptr) {}
  ~ExecuteResponse() override;
  explicit constexpr ExecuteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteResponse(const ExecuteResponse& from);
  ExecuteResponse(ExecuteResponse&& from) noexcept
    : ExecuteResponse() {
    *this = ::std::move(from);
  }

  inline ExecuteResponse& operator=(const ExecuteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteResponse& operator=(ExecuteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteResponse* internal_default_instance() {
    return reinterpret_cast<const ExecuteResponse*>(
               &_ExecuteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ExecuteResponse& a, ExecuteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteResponse* New() const final {
    return new ExecuteResponse();
  }

  ExecuteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecuteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecuteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.ExecuteResponse";
  }
  protected:
  explicit ExecuteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFieldNumber = 1,
    kProfileFieldNumber = 2,
  };
  // .xla.GlobalDataHandle output = 1;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::xla::GlobalDataHandle& output() const;
  PROTOBUF_MUST_USE_RESULT ::xla::GlobalDataHandle* release_output();
  ::xla::GlobalDataHandle* mutable_output();
  void set_allocated_output(::xla::GlobalDataHandle* output);
  private:
  const ::xla::GlobalDataHandle& _internal_output() const;
  ::xla::GlobalDataHandle* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::xla::GlobalDataHandle* output);
  ::xla::GlobalDataHandle* unsafe_arena_release_output();

  // .xla.ExecutionProfile profile = 2;
  bool has_profile() const;
  private:
  bool _internal_has_profile() const;
  public:
  void clear_profile();
  const ::xla::ExecutionProfile& profile() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ExecutionProfile* release_profile();
  ::xla::ExecutionProfile* mutable_profile();
  void set_allocated_profile(::xla::ExecutionProfile* profile);
  private:
  const ::xla::ExecutionProfile& _internal_profile() const;
  ::xla::ExecutionProfile* _internal_mutable_profile();
  public:
  void unsafe_arena_set_allocated_profile(
      ::xla::ExecutionProfile* profile);
  ::xla::ExecutionProfile* unsafe_arena_release_profile();

  // @@protoc_insertion_point(class_scope:xla.ExecuteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::GlobalDataHandle* output_;
  ::xla::ExecutionProfile* profile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class ExecuteParallelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.ExecuteParallelResponse) */ {
 public:
  inline ExecuteParallelResponse() : ExecuteParallelResponse(nullptr) {}
  ~ExecuteParallelResponse() override;
  explicit constexpr ExecuteParallelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteParallelResponse(const ExecuteParallelResponse& from);
  ExecuteParallelResponse(ExecuteParallelResponse&& from) noexcept
    : ExecuteParallelResponse() {
    *this = ::std::move(from);
  }

  inline ExecuteParallelResponse& operator=(const ExecuteParallelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteParallelResponse& operator=(ExecuteParallelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteParallelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteParallelResponse* internal_default_instance() {
    return reinterpret_cast<const ExecuteParallelResponse*>(
               &_ExecuteParallelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ExecuteParallelResponse& a, ExecuteParallelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteParallelResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteParallelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteParallelResponse* New() const final {
    return new ExecuteParallelResponse();
  }

  ExecuteParallelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteParallelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecuteParallelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExecuteParallelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteParallelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.ExecuteParallelResponse";
  }
  protected:
  explicit ExecuteParallelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 1,
  };
  // repeated .xla.ExecuteResponse responses = 1;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::xla::ExecuteResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ExecuteResponse >*
      mutable_responses();
  private:
  const ::xla::ExecuteResponse& _internal_responses(int index) const;
  ::xla::ExecuteResponse* _internal_add_responses();
  public:
  const ::xla::ExecuteResponse& responses(int index) const;
  ::xla::ExecuteResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ExecuteResponse >&
      responses() const;

  // @@protoc_insertion_point(class_scope:xla.ExecuteParallelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ExecuteResponse > responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class WaitForExecutionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.WaitForExecutionRequest) */ {
 public:
  inline WaitForExecutionRequest() : WaitForExecutionRequest(nullptr) {}
  ~WaitForExecutionRequest() override;
  explicit constexpr WaitForExecutionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitForExecutionRequest(const WaitForExecutionRequest& from);
  WaitForExecutionRequest(WaitForExecutionRequest&& from) noexcept
    : WaitForExecutionRequest() {
    *this = ::std::move(from);
  }

  inline WaitForExecutionRequest& operator=(const WaitForExecutionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitForExecutionRequest& operator=(WaitForExecutionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitForExecutionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitForExecutionRequest* internal_default_instance() {
    return reinterpret_cast<const WaitForExecutionRequest*>(
               &_WaitForExecutionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(WaitForExecutionRequest& a, WaitForExecutionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitForExecutionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitForExecutionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitForExecutionRequest* New() const final {
    return new WaitForExecutionRequest();
  }

  WaitForExecutionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitForExecutionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitForExecutionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitForExecutionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitForExecutionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.WaitForExecutionRequest";
  }
  protected:
  explicit WaitForExecutionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExecutionFieldNumber = 1,
  };
  // .xla.ExecutionHandle execution = 1;
  bool has_execution() const;
  private:
  bool _internal_has_execution() const;
  public:
  void clear_execution();
  const ::xla::ExecutionHandle& execution() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ExecutionHandle* release_execution();
  ::xla::ExecutionHandle* mutable_execution();
  void set_allocated_execution(::xla::ExecutionHandle* execution);
  private:
  const ::xla::ExecutionHandle& _internal_execution() const;
  ::xla::ExecutionHandle* _internal_mutable_execution();
  public:
  void unsafe_arena_set_allocated_execution(
      ::xla::ExecutionHandle* execution);
  ::xla::ExecutionHandle* unsafe_arena_release_execution();

  // @@protoc_insertion_point(class_scope:xla.WaitForExecutionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ExecutionHandle* execution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class WaitForExecutionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.WaitForExecutionResponse) */ {
 public:
  inline WaitForExecutionResponse() : WaitForExecutionResponse(nullptr) {}
  ~WaitForExecutionResponse() override;
  explicit constexpr WaitForExecutionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitForExecutionResponse(const WaitForExecutionResponse& from);
  WaitForExecutionResponse(WaitForExecutionResponse&& from) noexcept
    : WaitForExecutionResponse() {
    *this = ::std::move(from);
  }

  inline WaitForExecutionResponse& operator=(const WaitForExecutionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitForExecutionResponse& operator=(WaitForExecutionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitForExecutionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitForExecutionResponse* internal_default_instance() {
    return reinterpret_cast<const WaitForExecutionResponse*>(
               &_WaitForExecutionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(WaitForExecutionResponse& a, WaitForExecutionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitForExecutionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitForExecutionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitForExecutionResponse* New() const final {
    return new WaitForExecutionResponse();
  }

  WaitForExecutionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitForExecutionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitForExecutionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitForExecutionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitForExecutionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.WaitForExecutionResponse";
  }
  protected:
  explicit WaitForExecutionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFieldNumber = 1,
    kProfileFieldNumber = 2,
  };
  // .xla.GlobalDataHandle output = 1;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::xla::GlobalDataHandle& output() const;
  PROTOBUF_MUST_USE_RESULT ::xla::GlobalDataHandle* release_output();
  ::xla::GlobalDataHandle* mutable_output();
  void set_allocated_output(::xla::GlobalDataHandle* output);
  private:
  const ::xla::GlobalDataHandle& _internal_output() const;
  ::xla::GlobalDataHandle* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::xla::GlobalDataHandle* output);
  ::xla::GlobalDataHandle* unsafe_arena_release_output();

  // .xla.ExecutionProfile profile = 2;
  bool has_profile() const;
  private:
  bool _internal_has_profile() const;
  public:
  void clear_profile();
  const ::xla::ExecutionProfile& profile() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ExecutionProfile* release_profile();
  ::xla::ExecutionProfile* mutable_profile();
  void set_allocated_profile(::xla::ExecutionProfile* profile);
  private:
  const ::xla::ExecutionProfile& _internal_profile() const;
  ::xla::ExecutionProfile* _internal_mutable_profile();
  public:
  void unsafe_arena_set_allocated_profile(
      ::xla::ExecutionProfile* profile);
  ::xla::ExecutionProfile* unsafe_arena_release_profile();

  // @@protoc_insertion_point(class_scope:xla.WaitForExecutionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::GlobalDataHandle* output_;
  ::xla::ExecutionProfile* profile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class ComputeConstantGraphRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.ComputeConstantGraphRequest) */ {
 public:
  inline ComputeConstantGraphRequest() : ComputeConstantGraphRequest(nullptr) {}
  ~ComputeConstantGraphRequest() override;
  explicit constexpr ComputeConstantGraphRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComputeConstantGraphRequest(const ComputeConstantGraphRequest& from);
  ComputeConstantGraphRequest(ComputeConstantGraphRequest&& from) noexcept
    : ComputeConstantGraphRequest() {
    *this = ::std::move(from);
  }

  inline ComputeConstantGraphRequest& operator=(const ComputeConstantGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComputeConstantGraphRequest& operator=(ComputeConstantGraphRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComputeConstantGraphRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComputeConstantGraphRequest* internal_default_instance() {
    return reinterpret_cast<const ComputeConstantGraphRequest*>(
               &_ComputeConstantGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ComputeConstantGraphRequest& a, ComputeConstantGraphRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ComputeConstantGraphRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComputeConstantGraphRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComputeConstantGraphRequest* New() const final {
    return new ComputeConstantGraphRequest();
  }

  ComputeConstantGraphRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComputeConstantGraphRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComputeConstantGraphRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ComputeConstantGraphRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComputeConstantGraphRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.ComputeConstantGraphRequest";
  }
  protected:
  explicit ComputeConstantGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComputationFieldNumber = 1,
    kOutputLayoutFieldNumber = 2,
  };
  // .xla.HloModuleProto computation = 1;
  bool has_computation() const;
  private:
  bool _internal_has_computation() const;
  public:
  void clear_computation();
  const ::xla::HloModuleProto& computation() const;
  PROTOBUF_MUST_USE_RESULT ::xla::HloModuleProto* release_computation();
  ::xla::HloModuleProto* mutable_computation();
  void set_allocated_computation(::xla::HloModuleProto* computation);
  private:
  const ::xla::HloModuleProto& _internal_computation() const;
  ::xla::HloModuleProto* _internal_mutable_computation();
  public:
  void unsafe_arena_set_allocated_computation(
      ::xla::HloModuleProto* computation);
  ::xla::HloModuleProto* unsafe_arena_release_computation();

  // .xla.LayoutProto output_layout = 2;
  bool has_output_layout() const;
  private:
  bool _internal_has_output_layout() const;
  public:
  void clear_output_layout();
  const ::xla::LayoutProto& output_layout() const;
  PROTOBUF_MUST_USE_RESULT ::xla::LayoutProto* release_output_layout();
  ::xla::LayoutProto* mutable_output_layout();
  void set_allocated_output_layout(::xla::LayoutProto* output_layout);
  private:
  const ::xla::LayoutProto& _internal_output_layout() const;
  ::xla::LayoutProto* _internal_mutable_output_layout();
  public:
  void unsafe_arena_set_allocated_output_layout(
      ::xla::LayoutProto* output_layout);
  ::xla::LayoutProto* unsafe_arena_release_output_layout();

  // @@protoc_insertion_point(class_scope:xla.ComputeConstantGraphRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::HloModuleProto* computation_;
  ::xla::LayoutProto* output_layout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class ComputeConstantResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.ComputeConstantResponse) */ {
 public:
  inline ComputeConstantResponse() : ComputeConstantResponse(nullptr) {}
  ~ComputeConstantResponse() override;
  explicit constexpr ComputeConstantResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComputeConstantResponse(const ComputeConstantResponse& from);
  ComputeConstantResponse(ComputeConstantResponse&& from) noexcept
    : ComputeConstantResponse() {
    *this = ::std::move(from);
  }

  inline ComputeConstantResponse& operator=(const ComputeConstantResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComputeConstantResponse& operator=(ComputeConstantResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComputeConstantResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComputeConstantResponse* internal_default_instance() {
    return reinterpret_cast<const ComputeConstantResponse*>(
               &_ComputeConstantResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ComputeConstantResponse& a, ComputeConstantResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ComputeConstantResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComputeConstantResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComputeConstantResponse* New() const final {
    return new ComputeConstantResponse();
  }

  ComputeConstantResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComputeConstantResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComputeConstantResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ComputeConstantResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComputeConstantResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.ComputeConstantResponse";
  }
  protected:
  explicit ComputeConstantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralFieldNumber = 1,
  };
  // .xla.LiteralProto literal = 1;
  bool has_literal() const;
  private:
  bool _internal_has_literal() const;
  public:
  void clear_literal();
  const ::xla::LiteralProto& literal() const;
  PROTOBUF_MUST_USE_RESULT ::xla::LiteralProto* release_literal();
  ::xla::LiteralProto* mutable_literal();
  void set_allocated_literal(::xla::LiteralProto* literal);
  private:
  const ::xla::LiteralProto& _internal_literal() const;
  ::xla::LiteralProto* _internal_mutable_literal();
  public:
  void unsafe_arena_set_allocated_literal(
      ::xla::LiteralProto* literal);
  ::xla::LiteralProto* unsafe_arena_release_literal();

  // @@protoc_insertion_point(class_scope:xla.ComputeConstantResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::LiteralProto* literal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class DeconstructTupleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.DeconstructTupleRequest) */ {
 public:
  inline DeconstructTupleRequest() : DeconstructTupleRequest(nullptr) {}
  ~DeconstructTupleRequest() override;
  explicit constexpr DeconstructTupleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeconstructTupleRequest(const DeconstructTupleRequest& from);
  DeconstructTupleRequest(DeconstructTupleRequest&& from) noexcept
    : DeconstructTupleRequest() {
    *this = ::std::move(from);
  }

  inline DeconstructTupleRequest& operator=(const DeconstructTupleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeconstructTupleRequest& operator=(DeconstructTupleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeconstructTupleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeconstructTupleRequest* internal_default_instance() {
    return reinterpret_cast<const DeconstructTupleRequest*>(
               &_DeconstructTupleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DeconstructTupleRequest& a, DeconstructTupleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeconstructTupleRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeconstructTupleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeconstructTupleRequest* New() const final {
    return new DeconstructTupleRequest();
  }

  DeconstructTupleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeconstructTupleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeconstructTupleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeconstructTupleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeconstructTupleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.DeconstructTupleRequest";
  }
  protected:
  explicit DeconstructTupleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTupleHandleFieldNumber = 2,
  };
  // .xla.GlobalDataHandle tuple_handle = 2;
  bool has_tuple_handle() const;
  private:
  bool _internal_has_tuple_handle() const;
  public:
  void clear_tuple_handle();
  const ::xla::GlobalDataHandle& tuple_handle() const;
  PROTOBUF_MUST_USE_RESULT ::xla::GlobalDataHandle* release_tuple_handle();
  ::xla::GlobalDataHandle* mutable_tuple_handle();
  void set_allocated_tuple_handle(::xla::GlobalDataHandle* tuple_handle);
  private:
  const ::xla::GlobalDataHandle& _internal_tuple_handle() const;
  ::xla::GlobalDataHandle* _internal_mutable_tuple_handle();
  public:
  void unsafe_arena_set_allocated_tuple_handle(
      ::xla::GlobalDataHandle* tuple_handle);
  ::xla::GlobalDataHandle* unsafe_arena_release_tuple_handle();

  // @@protoc_insertion_point(class_scope:xla.DeconstructTupleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::GlobalDataHandle* tuple_handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class DeconstructTupleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.DeconstructTupleResponse) */ {
 public:
  inline DeconstructTupleResponse() : DeconstructTupleResponse(nullptr) {}
  ~DeconstructTupleResponse() override;
  explicit constexpr DeconstructTupleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeconstructTupleResponse(const DeconstructTupleResponse& from);
  DeconstructTupleResponse(DeconstructTupleResponse&& from) noexcept
    : DeconstructTupleResponse() {
    *this = ::std::move(from);
  }

  inline DeconstructTupleResponse& operator=(const DeconstructTupleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeconstructTupleResponse& operator=(DeconstructTupleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeconstructTupleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeconstructTupleResponse* internal_default_instance() {
    return reinterpret_cast<const DeconstructTupleResponse*>(
               &_DeconstructTupleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DeconstructTupleResponse& a, DeconstructTupleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeconstructTupleResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeconstructTupleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeconstructTupleResponse* New() const final {
    return new DeconstructTupleResponse();
  }

  DeconstructTupleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeconstructTupleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeconstructTupleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeconstructTupleResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeconstructTupleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.DeconstructTupleResponse";
  }
  protected:
  explicit DeconstructTupleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementHandlesFieldNumber = 1,
  };
  // repeated .xla.GlobalDataHandle element_handles = 1;
  int element_handles_size() const;
  private:
  int _internal_element_handles_size() const;
  public:
  void clear_element_handles();
  ::xla::GlobalDataHandle* mutable_element_handles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >*
      mutable_element_handles();
  private:
  const ::xla::GlobalDataHandle& _internal_element_handles(int index) const;
  ::xla::GlobalDataHandle* _internal_add_element_handles();
  public:
  const ::xla::GlobalDataHandle& element_handles(int index) const;
  ::xla::GlobalDataHandle* add_element_handles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >&
      element_handles() const;

  // @@protoc_insertion_point(class_scope:xla.DeconstructTupleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle > element_handles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class LoadDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.LoadDataRequest) */ {
 public:
  inline LoadDataRequest() : LoadDataRequest(nullptr) {}
  ~LoadDataRequest() override;
  explicit constexpr LoadDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadDataRequest(const LoadDataRequest& from);
  LoadDataRequest(LoadDataRequest&& from) noexcept
    : LoadDataRequest() {
    *this = ::std::move(from);
  }

  inline LoadDataRequest& operator=(const LoadDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadDataRequest& operator=(LoadDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadDataRequest* internal_default_instance() {
    return reinterpret_cast<const LoadDataRequest*>(
               &_LoadDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(LoadDataRequest& a, LoadDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadDataRequest* New() const final {
    return new LoadDataRequest();
  }

  LoadDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.LoadDataRequest";
  }
  protected:
  explicit LoadDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnioTabletPathFieldNumber = 1,
    kColumnioFieldFieldNumber = 2,
    kElementShapeFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kLimitFieldNumber = 5,
    kZipFieldNumber = 6,
  };
  // string columnio_tablet_path = 1;
  void clear_columnio_tablet_path();
  const std::string& columnio_tablet_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_columnio_tablet_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_columnio_tablet_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_columnio_tablet_path();
  void set_allocated_columnio_tablet_path(std::string* columnio_tablet_path);
  private:
  const std::string& _internal_columnio_tablet_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_columnio_tablet_path(const std::string& value);
  std::string* _internal_mutable_columnio_tablet_path();
  public:

  // string columnio_field = 2;
  void clear_columnio_field();
  const std::string& columnio_field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_columnio_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_columnio_field();
  PROTOBUF_MUST_USE_RESULT std::string* release_columnio_field();
  void set_allocated_columnio_field(std::string* columnio_field);
  private:
  const std::string& _internal_columnio_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_columnio_field(const std::string& value);
  std::string* _internal_mutable_columnio_field();
  public:

  // .xla.ShapeProto element_shape = 3;
  bool has_element_shape() const;
  private:
  bool _internal_has_element_shape() const;
  public:
  void clear_element_shape();
  const ::xla::ShapeProto& element_shape() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ShapeProto* release_element_shape();
  ::xla::ShapeProto* mutable_element_shape();
  void set_allocated_element_shape(::xla::ShapeProto* element_shape);
  private:
  const ::xla::ShapeProto& _internal_element_shape() const;
  ::xla::ShapeProto* _internal_mutable_element_shape();
  public:
  void unsafe_arena_set_allocated_element_shape(
      ::xla::ShapeProto* element_shape);
  ::xla::ShapeProto* unsafe_arena_release_element_shape();

  // int64 offset = 4;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 limit = 5;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool zip = 6;
  void clear_zip();
  bool zip() const;
  void set_zip(bool value);
  private:
  bool _internal_zip() const;
  void _internal_set_zip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xla.LoadDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr columnio_tablet_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr columnio_field_;
  ::xla::ShapeProto* element_shape_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  bool zip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class LoadDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.LoadDataResponse) */ {
 public:
  inline LoadDataResponse() : LoadDataResponse(nullptr) {}
  ~LoadDataResponse() override;
  explicit constexpr LoadDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadDataResponse(const LoadDataResponse& from);
  LoadDataResponse(LoadDataResponse&& from) noexcept
    : LoadDataResponse() {
    *this = ::std::move(from);
  }

  inline LoadDataResponse& operator=(const LoadDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadDataResponse& operator=(LoadDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadDataResponse* internal_default_instance() {
    return reinterpret_cast<const LoadDataResponse*>(
               &_LoadDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(LoadDataResponse& a, LoadDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadDataResponse* New() const final {
    return new LoadDataResponse();
  }

  LoadDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.LoadDataResponse";
  }
  protected:
  explicit LoadDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kDataShapeFieldNumber = 2,
    kAvailableRowsFieldNumber = 3,
    kRowsLoadedFieldNumber = 4,
    kNanosecondsFieldNumber = 5,
  };
  // .xla.GlobalDataHandle data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::xla::GlobalDataHandle& data() const;
  PROTOBUF_MUST_USE_RESULT ::xla::GlobalDataHandle* release_data();
  ::xla::GlobalDataHandle* mutable_data();
  void set_allocated_data(::xla::GlobalDataHandle* data);
  private:
  const ::xla::GlobalDataHandle& _internal_data() const;
  ::xla::GlobalDataHandle* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::xla::GlobalDataHandle* data);
  ::xla::GlobalDataHandle* unsafe_arena_release_data();

  // .xla.ShapeProto data_shape = 2;
  bool has_data_shape() const;
  private:
  bool _internal_has_data_shape() const;
  public:
  void clear_data_shape();
  const ::xla::ShapeProto& data_shape() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ShapeProto* release_data_shape();
  ::xla::ShapeProto* mutable_data_shape();
  void set_allocated_data_shape(::xla::ShapeProto* data_shape);
  private:
  const ::xla::ShapeProto& _internal_data_shape() const;
  ::xla::ShapeProto* _internal_mutable_data_shape();
  public:
  void unsafe_arena_set_allocated_data_shape(
      ::xla::ShapeProto* data_shape);
  ::xla::ShapeProto* unsafe_arena_release_data_shape();

  // int64 available_rows = 3;
  void clear_available_rows();
  ::PROTOBUF_NAMESPACE_ID::int64 available_rows() const;
  void set_available_rows(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_available_rows() const;
  void _internal_set_available_rows(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 rows_loaded = 4;
  void clear_rows_loaded();
  ::PROTOBUF_NAMESPACE_ID::int64 rows_loaded() const;
  void set_rows_loaded(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rows_loaded() const;
  void _internal_set_rows_loaded(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 nanoseconds = 5;
  void clear_nanoseconds();
  ::PROTOBUF_NAMESPACE_ID::int64 nanoseconds() const;
  void set_nanoseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_nanoseconds() const;
  void _internal_set_nanoseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:xla.LoadDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::GlobalDataHandle* data_;
  ::xla::ShapeProto* data_shape_;
  ::PROTOBUF_NAMESPACE_ID::int64 available_rows_;
  ::PROTOBUF_NAMESPACE_ID::int64 rows_loaded_;
  ::PROTOBUF_NAMESPACE_ID::int64 nanoseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class GetShapeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.GetShapeRequest) */ {
 public:
  inline GetShapeRequest() : GetShapeRequest(nullptr) {}
  ~GetShapeRequest() override;
  explicit constexpr GetShapeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetShapeRequest(const GetShapeRequest& from);
  GetShapeRequest(GetShapeRequest&& from) noexcept
    : GetShapeRequest() {
    *this = ::std::move(from);
  }

  inline GetShapeRequest& operator=(const GetShapeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetShapeRequest& operator=(GetShapeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetShapeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetShapeRequest* internal_default_instance() {
    return reinterpret_cast<const GetShapeRequest*>(
               &_GetShapeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetShapeRequest& a, GetShapeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetShapeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetShapeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetShapeRequest* New() const final {
    return new GetShapeRequest();
  }

  GetShapeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetShapeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetShapeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetShapeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetShapeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.GetShapeRequest";
  }
  protected:
  explicit GetShapeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .xla.GlobalDataHandle data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::xla::GlobalDataHandle& data() const;
  PROTOBUF_MUST_USE_RESULT ::xla::GlobalDataHandle* release_data();
  ::xla::GlobalDataHandle* mutable_data();
  void set_allocated_data(::xla::GlobalDataHandle* data);
  private:
  const ::xla::GlobalDataHandle& _internal_data() const;
  ::xla::GlobalDataHandle* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::xla::GlobalDataHandle* data);
  ::xla::GlobalDataHandle* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:xla.GetShapeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::GlobalDataHandle* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class GetShapeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.GetShapeResponse) */ {
 public:
  inline GetShapeResponse() : GetShapeResponse(nullptr) {}
  ~GetShapeResponse() override;
  explicit constexpr GetShapeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetShapeResponse(const GetShapeResponse& from);
  GetShapeResponse(GetShapeResponse&& from) noexcept
    : GetShapeResponse() {
    *this = ::std::move(from);
  }

  inline GetShapeResponse& operator=(const GetShapeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetShapeResponse& operator=(GetShapeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetShapeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetShapeResponse* internal_default_instance() {
    return reinterpret_cast<const GetShapeResponse*>(
               &_GetShapeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetShapeResponse& a, GetShapeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetShapeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetShapeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetShapeResponse* New() const final {
    return new GetShapeResponse();
  }

  GetShapeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetShapeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetShapeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetShapeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetShapeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.GetShapeResponse";
  }
  protected:
  explicit GetShapeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
  };
  // .xla.ShapeProto shape = 1;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::xla::ShapeProto& shape() const;
  PROTOBUF_MUST_USE_RESULT ::xla::ShapeProto* release_shape();
  ::xla::ShapeProto* mutable_shape();
  void set_allocated_shape(::xla::ShapeProto* shape);
  private:
  const ::xla::ShapeProto& _internal_shape() const;
  ::xla::ShapeProto* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::xla::ShapeProto* shape);
  ::xla::ShapeProto* unsafe_arena_release_shape();

  // @@protoc_insertion_point(class_scope:xla.GetShapeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::ShapeProto* shape_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class UnpackRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.UnpackRequest) */ {
 public:
  inline UnpackRequest() : UnpackRequest(nullptr) {}
  ~UnpackRequest() override;
  explicit constexpr UnpackRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnpackRequest(const UnpackRequest& from);
  UnpackRequest(UnpackRequest&& from) noexcept
    : UnpackRequest() {
    *this = ::std::move(from);
  }

  inline UnpackRequest& operator=(const UnpackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnpackRequest& operator=(UnpackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnpackRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnpackRequest* internal_default_instance() {
    return reinterpret_cast<const UnpackRequest*>(
               &_UnpackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(UnpackRequest& a, UnpackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnpackRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnpackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnpackRequest* New() const final {
    return new UnpackRequest();
  }

  UnpackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnpackRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnpackRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnpackRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnpackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.UnpackRequest";
  }
  protected:
  explicit UnpackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .xla.GlobalDataHandle data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::xla::GlobalDataHandle& data() const;
  PROTOBUF_MUST_USE_RESULT ::xla::GlobalDataHandle* release_data();
  ::xla::GlobalDataHandle* mutable_data();
  void set_allocated_data(::xla::GlobalDataHandle* data);
  private:
  const ::xla::GlobalDataHandle& _internal_data() const;
  ::xla::GlobalDataHandle* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::xla::GlobalDataHandle* data);
  ::xla::GlobalDataHandle* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:xla.UnpackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xla::GlobalDataHandle* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// -------------------------------------------------------------------

class UnpackResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.UnpackResponse) */ {
 public:
  inline UnpackResponse() : UnpackResponse(nullptr) {}
  ~UnpackResponse() override;
  explicit constexpr UnpackResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnpackResponse(const UnpackResponse& from);
  UnpackResponse(UnpackResponse&& from) noexcept
    : UnpackResponse() {
    *this = ::std::move(from);
  }

  inline UnpackResponse& operator=(const UnpackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnpackResponse& operator=(UnpackResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnpackResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnpackResponse* internal_default_instance() {
    return reinterpret_cast<const UnpackResponse*>(
               &_UnpackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(UnpackResponse& a, UnpackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnpackResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnpackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnpackResponse* New() const final {
    return new UnpackResponse();
  }

  UnpackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnpackResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnpackResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnpackResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnpackResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.UnpackResponse";
  }
  protected:
  explicit UnpackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTiedDataFieldNumber = 1,
  };
  // repeated .xla.GlobalDataHandle tied_data = 1;
  int tied_data_size() const;
  private:
  int _internal_tied_data_size() const;
  public:
  void clear_tied_data();
  ::xla::GlobalDataHandle* mutable_tied_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >*
      mutable_tied_data();
  private:
  const ::xla::GlobalDataHandle& _internal_tied_data(int index) const;
  ::xla::GlobalDataHandle* _internal_add_tied_data();
  public:
  const ::xla::GlobalDataHandle& tied_data(int index) const;
  ::xla::GlobalDataHandle* add_tied_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >&
      tied_data() const;

  // @@protoc_insertion_point(class_scope:xla.UnpackResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle > tied_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fxla_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DebugOptions

// bool xla_hlo_graph_addresses = 2;
inline void DebugOptions::clear_xla_hlo_graph_addresses() {
  xla_hlo_graph_addresses_ = false;
}
inline bool DebugOptions::_internal_xla_hlo_graph_addresses() const {
  return xla_hlo_graph_addresses_;
}
inline bool DebugOptions::xla_hlo_graph_addresses() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_hlo_graph_addresses)
  return _internal_xla_hlo_graph_addresses();
}
inline void DebugOptions::_internal_set_xla_hlo_graph_addresses(bool value) {
  
  xla_hlo_graph_addresses_ = value;
}
inline void DebugOptions::set_xla_hlo_graph_addresses(bool value) {
  _internal_set_xla_hlo_graph_addresses(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_hlo_graph_addresses)
}

// bool xla_hlo_profile = 9;
inline void DebugOptions::clear_xla_hlo_profile() {
  xla_hlo_profile_ = false;
}
inline bool DebugOptions::_internal_xla_hlo_profile() const {
  return xla_hlo_profile_;
}
inline bool DebugOptions::xla_hlo_profile() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_hlo_profile)
  return _internal_xla_hlo_profile();
}
inline void DebugOptions::_internal_set_xla_hlo_profile(bool value) {
  
  xla_hlo_profile_ = value;
}
inline void DebugOptions::set_xla_hlo_profile(bool value) {
  _internal_set_xla_hlo_profile(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_hlo_profile)
}

// repeated string xla_disable_hlo_passes = 30;
inline int DebugOptions::_internal_xla_disable_hlo_passes_size() const {
  return xla_disable_hlo_passes_.size();
}
inline int DebugOptions::xla_disable_hlo_passes_size() const {
  return _internal_xla_disable_hlo_passes_size();
}
inline void DebugOptions::clear_xla_disable_hlo_passes() {
  xla_disable_hlo_passes_.Clear();
}
inline std::string* DebugOptions::add_xla_disable_hlo_passes() {
  std::string* _s = _internal_add_xla_disable_hlo_passes();
  // @@protoc_insertion_point(field_add_mutable:xla.DebugOptions.xla_disable_hlo_passes)
  return _s;
}
inline const std::string& DebugOptions::_internal_xla_disable_hlo_passes(int index) const {
  return xla_disable_hlo_passes_.Get(index);
}
inline const std::string& DebugOptions::xla_disable_hlo_passes(int index) const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_disable_hlo_passes)
  return _internal_xla_disable_hlo_passes(index);
}
inline std::string* DebugOptions::mutable_xla_disable_hlo_passes(int index) {
  // @@protoc_insertion_point(field_mutable:xla.DebugOptions.xla_disable_hlo_passes)
  return xla_disable_hlo_passes_.Mutable(index);
}
inline void DebugOptions::set_xla_disable_hlo_passes(int index, const std::string& value) {
  xla_disable_hlo_passes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_disable_hlo_passes)
}
inline void DebugOptions::set_xla_disable_hlo_passes(int index, std::string&& value) {
  xla_disable_hlo_passes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_disable_hlo_passes)
}
inline void DebugOptions::set_xla_disable_hlo_passes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  xla_disable_hlo_passes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xla.DebugOptions.xla_disable_hlo_passes)
}
inline void DebugOptions::set_xla_disable_hlo_passes(int index, const char* value, size_t size) {
  xla_disable_hlo_passes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xla.DebugOptions.xla_disable_hlo_passes)
}
inline std::string* DebugOptions::_internal_add_xla_disable_hlo_passes() {
  return xla_disable_hlo_passes_.Add();
}
inline void DebugOptions::add_xla_disable_hlo_passes(const std::string& value) {
  xla_disable_hlo_passes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xla.DebugOptions.xla_disable_hlo_passes)
}
inline void DebugOptions::add_xla_disable_hlo_passes(std::string&& value) {
  xla_disable_hlo_passes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xla.DebugOptions.xla_disable_hlo_passes)
}
inline void DebugOptions::add_xla_disable_hlo_passes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  xla_disable_hlo_passes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xla.DebugOptions.xla_disable_hlo_passes)
}
inline void DebugOptions::add_xla_disable_hlo_passes(const char* value, size_t size) {
  xla_disable_hlo_passes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xla.DebugOptions.xla_disable_hlo_passes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DebugOptions::xla_disable_hlo_passes() const {
  // @@protoc_insertion_point(field_list:xla.DebugOptions.xla_disable_hlo_passes)
  return xla_disable_hlo_passes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DebugOptions::mutable_xla_disable_hlo_passes() {
  // @@protoc_insertion_point(field_mutable_list:xla.DebugOptions.xla_disable_hlo_passes)
  return &xla_disable_hlo_passes_;
}

// repeated string xla_enable_hlo_passes_only = 124;
inline int DebugOptions::_internal_xla_enable_hlo_passes_only_size() const {
  return xla_enable_hlo_passes_only_.size();
}
inline int DebugOptions::xla_enable_hlo_passes_only_size() const {
  return _internal_xla_enable_hlo_passes_only_size();
}
inline void DebugOptions::clear_xla_enable_hlo_passes_only() {
  xla_enable_hlo_passes_only_.Clear();
}
inline std::string* DebugOptions::add_xla_enable_hlo_passes_only() {
  std::string* _s = _internal_add_xla_enable_hlo_passes_only();
  // @@protoc_insertion_point(field_add_mutable:xla.DebugOptions.xla_enable_hlo_passes_only)
  return _s;
}
inline const std::string& DebugOptions::_internal_xla_enable_hlo_passes_only(int index) const {
  return xla_enable_hlo_passes_only_.Get(index);
}
inline const std::string& DebugOptions::xla_enable_hlo_passes_only(int index) const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_enable_hlo_passes_only)
  return _internal_xla_enable_hlo_passes_only(index);
}
inline std::string* DebugOptions::mutable_xla_enable_hlo_passes_only(int index) {
  // @@protoc_insertion_point(field_mutable:xla.DebugOptions.xla_enable_hlo_passes_only)
  return xla_enable_hlo_passes_only_.Mutable(index);
}
inline void DebugOptions::set_xla_enable_hlo_passes_only(int index, const std::string& value) {
  xla_enable_hlo_passes_only_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_enable_hlo_passes_only)
}
inline void DebugOptions::set_xla_enable_hlo_passes_only(int index, std::string&& value) {
  xla_enable_hlo_passes_only_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_enable_hlo_passes_only)
}
inline void DebugOptions::set_xla_enable_hlo_passes_only(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  xla_enable_hlo_passes_only_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xla.DebugOptions.xla_enable_hlo_passes_only)
}
inline void DebugOptions::set_xla_enable_hlo_passes_only(int index, const char* value, size_t size) {
  xla_enable_hlo_passes_only_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xla.DebugOptions.xla_enable_hlo_passes_only)
}
inline std::string* DebugOptions::_internal_add_xla_enable_hlo_passes_only() {
  return xla_enable_hlo_passes_only_.Add();
}
inline void DebugOptions::add_xla_enable_hlo_passes_only(const std::string& value) {
  xla_enable_hlo_passes_only_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xla.DebugOptions.xla_enable_hlo_passes_only)
}
inline void DebugOptions::add_xla_enable_hlo_passes_only(std::string&& value) {
  xla_enable_hlo_passes_only_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xla.DebugOptions.xla_enable_hlo_passes_only)
}
inline void DebugOptions::add_xla_enable_hlo_passes_only(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  xla_enable_hlo_passes_only_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xla.DebugOptions.xla_enable_hlo_passes_only)
}
inline void DebugOptions::add_xla_enable_hlo_passes_only(const char* value, size_t size) {
  xla_enable_hlo_passes_only_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xla.DebugOptions.xla_enable_hlo_passes_only)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DebugOptions::xla_enable_hlo_passes_only() const {
  // @@protoc_insertion_point(field_list:xla.DebugOptions.xla_enable_hlo_passes_only)
  return xla_enable_hlo_passes_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DebugOptions::mutable_xla_enable_hlo_passes_only() {
  // @@protoc_insertion_point(field_mutable_list:xla.DebugOptions.xla_enable_hlo_passes_only)
  return &xla_enable_hlo_passes_only_;
}

// bool xla_disable_all_hlo_passes = 104;
inline void DebugOptions::clear_xla_disable_all_hlo_passes() {
  xla_disable_all_hlo_passes_ = false;
}
inline bool DebugOptions::_internal_xla_disable_all_hlo_passes() const {
  return xla_disable_all_hlo_passes_;
}
inline bool DebugOptions::xla_disable_all_hlo_passes() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_disable_all_hlo_passes)
  return _internal_xla_disable_all_hlo_passes();
}
inline void DebugOptions::_internal_set_xla_disable_all_hlo_passes(bool value) {
  
  xla_disable_all_hlo_passes_ = value;
}
inline void DebugOptions::set_xla_disable_all_hlo_passes(bool value) {
  _internal_set_xla_disable_all_hlo_passes(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_disable_all_hlo_passes)
}

// int32 xla_backend_optimization_level = 31;
inline void DebugOptions::clear_xla_backend_optimization_level() {
  xla_backend_optimization_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::_internal_xla_backend_optimization_level() const {
  return xla_backend_optimization_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::xla_backend_optimization_level() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_backend_optimization_level)
  return _internal_xla_backend_optimization_level();
}
inline void DebugOptions::_internal_set_xla_backend_optimization_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xla_backend_optimization_level_ = value;
}
inline void DebugOptions::set_xla_backend_optimization_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xla_backend_optimization_level(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_backend_optimization_level)
}

// bool xla_embed_ir_in_executable = 33;
inline void DebugOptions::clear_xla_embed_ir_in_executable() {
  xla_embed_ir_in_executable_ = false;
}
inline bool DebugOptions::_internal_xla_embed_ir_in_executable() const {
  return xla_embed_ir_in_executable_;
}
inline bool DebugOptions::xla_embed_ir_in_executable() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_embed_ir_in_executable)
  return _internal_xla_embed_ir_in_executable();
}
inline void DebugOptions::_internal_set_xla_embed_ir_in_executable(bool value) {
  
  xla_embed_ir_in_executable_ = value;
}
inline void DebugOptions::set_xla_embed_ir_in_executable(bool value) {
  _internal_set_xla_embed_ir_in_executable(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_embed_ir_in_executable)
}

// bool xla_eliminate_hlo_implicit_broadcast = 35;
inline void DebugOptions::clear_xla_eliminate_hlo_implicit_broadcast() {
  xla_eliminate_hlo_implicit_broadcast_ = false;
}
inline bool DebugOptions::_internal_xla_eliminate_hlo_implicit_broadcast() const {
  return xla_eliminate_hlo_implicit_broadcast_;
}
inline bool DebugOptions::xla_eliminate_hlo_implicit_broadcast() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_eliminate_hlo_implicit_broadcast)
  return _internal_xla_eliminate_hlo_implicit_broadcast();
}
inline void DebugOptions::_internal_set_xla_eliminate_hlo_implicit_broadcast(bool value) {
  
  xla_eliminate_hlo_implicit_broadcast_ = value;
}
inline void DebugOptions::set_xla_eliminate_hlo_implicit_broadcast(bool value) {
  _internal_set_xla_eliminate_hlo_implicit_broadcast(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_eliminate_hlo_implicit_broadcast)
}

// bool xla_cpu_multi_thread_eigen = 60;
inline void DebugOptions::clear_xla_cpu_multi_thread_eigen() {
  xla_cpu_multi_thread_eigen_ = false;
}
inline bool DebugOptions::_internal_xla_cpu_multi_thread_eigen() const {
  return xla_cpu_multi_thread_eigen_;
}
inline bool DebugOptions::xla_cpu_multi_thread_eigen() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_cpu_multi_thread_eigen)
  return _internal_xla_cpu_multi_thread_eigen();
}
inline void DebugOptions::_internal_set_xla_cpu_multi_thread_eigen(bool value) {
  
  xla_cpu_multi_thread_eigen_ = value;
}
inline void DebugOptions::set_xla_cpu_multi_thread_eigen(bool value) {
  _internal_set_xla_cpu_multi_thread_eigen(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_cpu_multi_thread_eigen)
}

// string xla_gpu_cuda_data_dir = 61;
inline void DebugOptions::clear_xla_gpu_cuda_data_dir() {
  xla_gpu_cuda_data_dir_.ClearToEmpty();
}
inline const std::string& DebugOptions::xla_gpu_cuda_data_dir() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_cuda_data_dir)
  return _internal_xla_gpu_cuda_data_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DebugOptions::set_xla_gpu_cuda_data_dir(ArgT0&& arg0, ArgT... args) {
 
 xla_gpu_cuda_data_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_cuda_data_dir)
}
inline std::string* DebugOptions::mutable_xla_gpu_cuda_data_dir() {
  std::string* _s = _internal_mutable_xla_gpu_cuda_data_dir();
  // @@protoc_insertion_point(field_mutable:xla.DebugOptions.xla_gpu_cuda_data_dir)
  return _s;
}
inline const std::string& DebugOptions::_internal_xla_gpu_cuda_data_dir() const {
  return xla_gpu_cuda_data_dir_.Get();
}
inline void DebugOptions::_internal_set_xla_gpu_cuda_data_dir(const std::string& value) {
  
  xla_gpu_cuda_data_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DebugOptions::_internal_mutable_xla_gpu_cuda_data_dir() {
  
  return xla_gpu_cuda_data_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DebugOptions::release_xla_gpu_cuda_data_dir() {
  // @@protoc_insertion_point(field_release:xla.DebugOptions.xla_gpu_cuda_data_dir)
  return xla_gpu_cuda_data_dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DebugOptions::set_allocated_xla_gpu_cuda_data_dir(std::string* xla_gpu_cuda_data_dir) {
  if (xla_gpu_cuda_data_dir != nullptr) {
    
  } else {
    
  }
  xla_gpu_cuda_data_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xla_gpu_cuda_data_dir,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xla.DebugOptions.xla_gpu_cuda_data_dir)
}

// bool xla_gpu_ftz = 62;
inline void DebugOptions::clear_xla_gpu_ftz() {
  xla_gpu_ftz_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_ftz() const {
  return xla_gpu_ftz_;
}
inline bool DebugOptions::xla_gpu_ftz() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_ftz)
  return _internal_xla_gpu_ftz();
}
inline void DebugOptions::_internal_set_xla_gpu_ftz(bool value) {
  
  xla_gpu_ftz_ = value;
}
inline void DebugOptions::set_xla_gpu_ftz(bool value) {
  _internal_set_xla_gpu_ftz(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_ftz)
}

// bool xla_llvm_enable_alias_scope_metadata = 70;
inline void DebugOptions::clear_xla_llvm_enable_alias_scope_metadata() {
  xla_llvm_enable_alias_scope_metadata_ = false;
}
inline bool DebugOptions::_internal_xla_llvm_enable_alias_scope_metadata() const {
  return xla_llvm_enable_alias_scope_metadata_;
}
inline bool DebugOptions::xla_llvm_enable_alias_scope_metadata() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_llvm_enable_alias_scope_metadata)
  return _internal_xla_llvm_enable_alias_scope_metadata();
}
inline void DebugOptions::_internal_set_xla_llvm_enable_alias_scope_metadata(bool value) {
  
  xla_llvm_enable_alias_scope_metadata_ = value;
}
inline void DebugOptions::set_xla_llvm_enable_alias_scope_metadata(bool value) {
  _internal_set_xla_llvm_enable_alias_scope_metadata(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_llvm_enable_alias_scope_metadata)
}

// bool xla_llvm_enable_noalias_metadata = 71;
inline void DebugOptions::clear_xla_llvm_enable_noalias_metadata() {
  xla_llvm_enable_noalias_metadata_ = false;
}
inline bool DebugOptions::_internal_xla_llvm_enable_noalias_metadata() const {
  return xla_llvm_enable_noalias_metadata_;
}
inline bool DebugOptions::xla_llvm_enable_noalias_metadata() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_llvm_enable_noalias_metadata)
  return _internal_xla_llvm_enable_noalias_metadata();
}
inline void DebugOptions::_internal_set_xla_llvm_enable_noalias_metadata(bool value) {
  
  xla_llvm_enable_noalias_metadata_ = value;
}
inline void DebugOptions::set_xla_llvm_enable_noalias_metadata(bool value) {
  _internal_set_xla_llvm_enable_noalias_metadata(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_llvm_enable_noalias_metadata)
}

// bool xla_llvm_enable_invariant_load_metadata = 72;
inline void DebugOptions::clear_xla_llvm_enable_invariant_load_metadata() {
  xla_llvm_enable_invariant_load_metadata_ = false;
}
inline bool DebugOptions::_internal_xla_llvm_enable_invariant_load_metadata() const {
  return xla_llvm_enable_invariant_load_metadata_;
}
inline bool DebugOptions::xla_llvm_enable_invariant_load_metadata() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_llvm_enable_invariant_load_metadata)
  return _internal_xla_llvm_enable_invariant_load_metadata();
}
inline void DebugOptions::_internal_set_xla_llvm_enable_invariant_load_metadata(bool value) {
  
  xla_llvm_enable_invariant_load_metadata_ = value;
}
inline void DebugOptions::set_xla_llvm_enable_invariant_load_metadata(bool value) {
  _internal_set_xla_llvm_enable_invariant_load_metadata(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_llvm_enable_invariant_load_metadata)
}

// bool xla_llvm_disable_expensive_passes = 73;
inline void DebugOptions::clear_xla_llvm_disable_expensive_passes() {
  xla_llvm_disable_expensive_passes_ = false;
}
inline bool DebugOptions::_internal_xla_llvm_disable_expensive_passes() const {
  return xla_llvm_disable_expensive_passes_;
}
inline bool DebugOptions::xla_llvm_disable_expensive_passes() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_llvm_disable_expensive_passes)
  return _internal_xla_llvm_disable_expensive_passes();
}
inline void DebugOptions::_internal_set_xla_llvm_disable_expensive_passes(bool value) {
  
  xla_llvm_disable_expensive_passes_ = value;
}
inline void DebugOptions::set_xla_llvm_disable_expensive_passes(bool value) {
  _internal_set_xla_llvm_disable_expensive_passes(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_llvm_disable_expensive_passes)
}

// bool xla_test_all_output_layouts = 90;
inline void DebugOptions::clear_xla_test_all_output_layouts() {
  xla_test_all_output_layouts_ = false;
}
inline bool DebugOptions::_internal_xla_test_all_output_layouts() const {
  return xla_test_all_output_layouts_;
}
inline bool DebugOptions::xla_test_all_output_layouts() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_test_all_output_layouts)
  return _internal_xla_test_all_output_layouts();
}
inline void DebugOptions::_internal_set_xla_test_all_output_layouts(bool value) {
  
  xla_test_all_output_layouts_ = value;
}
inline void DebugOptions::set_xla_test_all_output_layouts(bool value) {
  _internal_set_xla_test_all_output_layouts(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_test_all_output_layouts)
}

// bool xla_test_all_input_layouts = 91;
inline void DebugOptions::clear_xla_test_all_input_layouts() {
  xla_test_all_input_layouts_ = false;
}
inline bool DebugOptions::_internal_xla_test_all_input_layouts() const {
  return xla_test_all_input_layouts_;
}
inline bool DebugOptions::xla_test_all_input_layouts() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_test_all_input_layouts)
  return _internal_xla_test_all_input_layouts();
}
inline void DebugOptions::_internal_set_xla_test_all_input_layouts(bool value) {
  
  xla_test_all_input_layouts_ = value;
}
inline void DebugOptions::set_xla_test_all_input_layouts(bool value) {
  _internal_set_xla_test_all_input_layouts(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_test_all_input_layouts)
}

// bool xla_hlo_graph_sharding_color = 92;
inline void DebugOptions::clear_xla_hlo_graph_sharding_color() {
  xla_hlo_graph_sharding_color_ = false;
}
inline bool DebugOptions::_internal_xla_hlo_graph_sharding_color() const {
  return xla_hlo_graph_sharding_color_;
}
inline bool DebugOptions::xla_hlo_graph_sharding_color() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_hlo_graph_sharding_color)
  return _internal_xla_hlo_graph_sharding_color();
}
inline void DebugOptions::_internal_set_xla_hlo_graph_sharding_color(bool value) {
  
  xla_hlo_graph_sharding_color_ = value;
}
inline void DebugOptions::set_xla_hlo_graph_sharding_color(bool value) {
  _internal_set_xla_hlo_graph_sharding_color(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_hlo_graph_sharding_color)
}

// bool xla_cpu_use_mkl_dnn = 97;
inline void DebugOptions::clear_xla_cpu_use_mkl_dnn() {
  xla_cpu_use_mkl_dnn_ = false;
}
inline bool DebugOptions::_internal_xla_cpu_use_mkl_dnn() const {
  return xla_cpu_use_mkl_dnn_;
}
inline bool DebugOptions::xla_cpu_use_mkl_dnn() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_cpu_use_mkl_dnn)
  return _internal_xla_cpu_use_mkl_dnn();
}
inline void DebugOptions::_internal_set_xla_cpu_use_mkl_dnn(bool value) {
  
  xla_cpu_use_mkl_dnn_ = value;
}
inline void DebugOptions::set_xla_cpu_use_mkl_dnn(bool value) {
  _internal_set_xla_cpu_use_mkl_dnn(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_cpu_use_mkl_dnn)
}

// bool xla_cpu_use_xla_runtime = 177;
inline void DebugOptions::clear_xla_cpu_use_xla_runtime() {
  xla_cpu_use_xla_runtime_ = false;
}
inline bool DebugOptions::_internal_xla_cpu_use_xla_runtime() const {
  return xla_cpu_use_xla_runtime_;
}
inline bool DebugOptions::xla_cpu_use_xla_runtime() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_cpu_use_xla_runtime)
  return _internal_xla_cpu_use_xla_runtime();
}
inline void DebugOptions::_internal_set_xla_cpu_use_xla_runtime(bool value) {
  
  xla_cpu_use_xla_runtime_ = value;
}
inline void DebugOptions::set_xla_cpu_use_xla_runtime(bool value) {
  _internal_set_xla_cpu_use_xla_runtime(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_cpu_use_xla_runtime)
}

// int32 xla_gpu_max_kernel_unroll_factor = 98;
inline void DebugOptions::clear_xla_gpu_max_kernel_unroll_factor() {
  xla_gpu_max_kernel_unroll_factor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::_internal_xla_gpu_max_kernel_unroll_factor() const {
  return xla_gpu_max_kernel_unroll_factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::xla_gpu_max_kernel_unroll_factor() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_max_kernel_unroll_factor)
  return _internal_xla_gpu_max_kernel_unroll_factor();
}
inline void DebugOptions::_internal_set_xla_gpu_max_kernel_unroll_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xla_gpu_max_kernel_unroll_factor_ = value;
}
inline void DebugOptions::set_xla_gpu_max_kernel_unroll_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xla_gpu_max_kernel_unroll_factor(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_max_kernel_unroll_factor)
}

// bool xla_cpu_enable_fast_math = 99;
inline void DebugOptions::clear_xla_cpu_enable_fast_math() {
  xla_cpu_enable_fast_math_ = false;
}
inline bool DebugOptions::_internal_xla_cpu_enable_fast_math() const {
  return xla_cpu_enable_fast_math_;
}
inline bool DebugOptions::xla_cpu_enable_fast_math() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_cpu_enable_fast_math)
  return _internal_xla_cpu_enable_fast_math();
}
inline void DebugOptions::_internal_set_xla_cpu_enable_fast_math(bool value) {
  
  xla_cpu_enable_fast_math_ = value;
}
inline void DebugOptions::set_xla_cpu_enable_fast_math(bool value) {
  _internal_set_xla_cpu_enable_fast_math(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_cpu_enable_fast_math)
}

// bool xla_cpu_fast_math_honor_nans = 120;
inline void DebugOptions::clear_xla_cpu_fast_math_honor_nans() {
  xla_cpu_fast_math_honor_nans_ = false;
}
inline bool DebugOptions::_internal_xla_cpu_fast_math_honor_nans() const {
  return xla_cpu_fast_math_honor_nans_;
}
inline bool DebugOptions::xla_cpu_fast_math_honor_nans() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_cpu_fast_math_honor_nans)
  return _internal_xla_cpu_fast_math_honor_nans();
}
inline void DebugOptions::_internal_set_xla_cpu_fast_math_honor_nans(bool value) {
  
  xla_cpu_fast_math_honor_nans_ = value;
}
inline void DebugOptions::set_xla_cpu_fast_math_honor_nans(bool value) {
  _internal_set_xla_cpu_fast_math_honor_nans(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_cpu_fast_math_honor_nans)
}

// bool xla_cpu_fast_math_honor_infs = 121;
inline void DebugOptions::clear_xla_cpu_fast_math_honor_infs() {
  xla_cpu_fast_math_honor_infs_ = false;
}
inline bool DebugOptions::_internal_xla_cpu_fast_math_honor_infs() const {
  return xla_cpu_fast_math_honor_infs_;
}
inline bool DebugOptions::xla_cpu_fast_math_honor_infs() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_cpu_fast_math_honor_infs)
  return _internal_xla_cpu_fast_math_honor_infs();
}
inline void DebugOptions::_internal_set_xla_cpu_fast_math_honor_infs(bool value) {
  
  xla_cpu_fast_math_honor_infs_ = value;
}
inline void DebugOptions::set_xla_cpu_fast_math_honor_infs(bool value) {
  _internal_set_xla_cpu_fast_math_honor_infs(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_cpu_fast_math_honor_infs)
}

// bool xla_cpu_fast_math_honor_division = 126;
inline void DebugOptions::clear_xla_cpu_fast_math_honor_division() {
  xla_cpu_fast_math_honor_division_ = false;
}
inline bool DebugOptions::_internal_xla_cpu_fast_math_honor_division() const {
  return xla_cpu_fast_math_honor_division_;
}
inline bool DebugOptions::xla_cpu_fast_math_honor_division() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_cpu_fast_math_honor_division)
  return _internal_xla_cpu_fast_math_honor_division();
}
inline void DebugOptions::_internal_set_xla_cpu_fast_math_honor_division(bool value) {
  
  xla_cpu_fast_math_honor_division_ = value;
}
inline void DebugOptions::set_xla_cpu_fast_math_honor_division(bool value) {
  _internal_set_xla_cpu_fast_math_honor_division(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_cpu_fast_math_honor_division)
}

// bool xla_cpu_fast_math_honor_functions = 129;
inline void DebugOptions::clear_xla_cpu_fast_math_honor_functions() {
  xla_cpu_fast_math_honor_functions_ = false;
}
inline bool DebugOptions::_internal_xla_cpu_fast_math_honor_functions() const {
  return xla_cpu_fast_math_honor_functions_;
}
inline bool DebugOptions::xla_cpu_fast_math_honor_functions() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_cpu_fast_math_honor_functions)
  return _internal_xla_cpu_fast_math_honor_functions();
}
inline void DebugOptions::_internal_set_xla_cpu_fast_math_honor_functions(bool value) {
  
  xla_cpu_fast_math_honor_functions_ = value;
}
inline void DebugOptions::set_xla_cpu_fast_math_honor_functions(bool value) {
  _internal_set_xla_cpu_fast_math_honor_functions(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_cpu_fast_math_honor_functions)
}

// bool xla_cpu_enable_fast_min_max = 140;
inline void DebugOptions::clear_xla_cpu_enable_fast_min_max() {
  xla_cpu_enable_fast_min_max_ = false;
}
inline bool DebugOptions::_internal_xla_cpu_enable_fast_min_max() const {
  return xla_cpu_enable_fast_min_max_;
}
inline bool DebugOptions::xla_cpu_enable_fast_min_max() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_cpu_enable_fast_min_max)
  return _internal_xla_cpu_enable_fast_min_max();
}
inline void DebugOptions::_internal_set_xla_cpu_enable_fast_min_max(bool value) {
  
  xla_cpu_enable_fast_min_max_ = value;
}
inline void DebugOptions::set_xla_cpu_enable_fast_min_max(bool value) {
  _internal_set_xla_cpu_enable_fast_min_max(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_cpu_enable_fast_min_max)
}

// bool xla_gpu_enable_fast_min_max = 100;
inline void DebugOptions::clear_xla_gpu_enable_fast_min_max() {
  xla_gpu_enable_fast_min_max_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_enable_fast_min_max() const {
  return xla_gpu_enable_fast_min_max_;
}
inline bool DebugOptions::xla_gpu_enable_fast_min_max() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_enable_fast_min_max)
  return _internal_xla_gpu_enable_fast_min_max();
}
inline void DebugOptions::_internal_set_xla_gpu_enable_fast_min_max(bool value) {
  
  xla_gpu_enable_fast_min_max_ = value;
}
inline void DebugOptions::set_xla_gpu_enable_fast_min_max(bool value) {
  _internal_set_xla_gpu_enable_fast_min_max(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_enable_fast_min_max)
}

// bool xla_allow_excess_precision = 122;
inline void DebugOptions::clear_xla_allow_excess_precision() {
  xla_allow_excess_precision_ = false;
}
inline bool DebugOptions::_internal_xla_allow_excess_precision() const {
  return xla_allow_excess_precision_;
}
inline bool DebugOptions::xla_allow_excess_precision() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_allow_excess_precision)
  return _internal_xla_allow_excess_precision();
}
inline void DebugOptions::_internal_set_xla_allow_excess_precision(bool value) {
  
  xla_allow_excess_precision_ = value;
}
inline void DebugOptions::set_xla_allow_excess_precision(bool value) {
  _internal_set_xla_allow_excess_precision(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_allow_excess_precision)
}

// bool xla_gpu_crash_on_verification_failures = 101;
inline void DebugOptions::clear_xla_gpu_crash_on_verification_failures() {
  xla_gpu_crash_on_verification_failures_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_crash_on_verification_failures() const {
  return xla_gpu_crash_on_verification_failures_;
}
inline bool DebugOptions::xla_gpu_crash_on_verification_failures() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_crash_on_verification_failures)
  return _internal_xla_gpu_crash_on_verification_failures();
}
inline void DebugOptions::_internal_set_xla_gpu_crash_on_verification_failures(bool value) {
  
  xla_gpu_crash_on_verification_failures_ = value;
}
inline void DebugOptions::set_xla_gpu_crash_on_verification_failures(bool value) {
  _internal_set_xla_gpu_crash_on_verification_failures(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_crash_on_verification_failures)
}

// int32 xla_gpu_autotune_level = 123;
inline void DebugOptions::clear_xla_gpu_autotune_level() {
  xla_gpu_autotune_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::_internal_xla_gpu_autotune_level() const {
  return xla_gpu_autotune_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::xla_gpu_autotune_level() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_autotune_level)
  return _internal_xla_gpu_autotune_level();
}
inline void DebugOptions::_internal_set_xla_gpu_autotune_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xla_gpu_autotune_level_ = value;
}
inline void DebugOptions::set_xla_gpu_autotune_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xla_gpu_autotune_level(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_autotune_level)
}

// int32 xla_force_host_platform_device_count = 102;
inline void DebugOptions::clear_xla_force_host_platform_device_count() {
  xla_force_host_platform_device_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::_internal_xla_force_host_platform_device_count() const {
  return xla_force_host_platform_device_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::xla_force_host_platform_device_count() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_force_host_platform_device_count)
  return _internal_xla_force_host_platform_device_count();
}
inline void DebugOptions::_internal_set_xla_force_host_platform_device_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xla_force_host_platform_device_count_ = value;
}
inline void DebugOptions::set_xla_force_host_platform_device_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xla_force_host_platform_device_count(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_force_host_platform_device_count)
}

// bool xla_gpu_disable_gpuasm_optimizations = 103;
inline void DebugOptions::clear_xla_gpu_disable_gpuasm_optimizations() {
  xla_gpu_disable_gpuasm_optimizations_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_disable_gpuasm_optimizations() const {
  return xla_gpu_disable_gpuasm_optimizations_;
}
inline bool DebugOptions::xla_gpu_disable_gpuasm_optimizations() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_disable_gpuasm_optimizations)
  return _internal_xla_gpu_disable_gpuasm_optimizations();
}
inline void DebugOptions::_internal_set_xla_gpu_disable_gpuasm_optimizations(bool value) {
  
  xla_gpu_disable_gpuasm_optimizations_ = value;
}
inline void DebugOptions::set_xla_gpu_disable_gpuasm_optimizations(bool value) {
  _internal_set_xla_gpu_disable_gpuasm_optimizations(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_disable_gpuasm_optimizations)
}

// .xla.DebugOptions.ShapeChecks xla_gpu_shape_checks = 170;
inline void DebugOptions::clear_xla_gpu_shape_checks() {
  xla_gpu_shape_checks_ = 0;
}
inline ::xla::DebugOptions_ShapeChecks DebugOptions::_internal_xla_gpu_shape_checks() const {
  return static_cast< ::xla::DebugOptions_ShapeChecks >(xla_gpu_shape_checks_);
}
inline ::xla::DebugOptions_ShapeChecks DebugOptions::xla_gpu_shape_checks() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_shape_checks)
  return _internal_xla_gpu_shape_checks();
}
inline void DebugOptions::_internal_set_xla_gpu_shape_checks(::xla::DebugOptions_ShapeChecks value) {
  
  xla_gpu_shape_checks_ = value;
}
inline void DebugOptions::set_xla_gpu_shape_checks(::xla::DebugOptions_ShapeChecks value) {
  _internal_set_xla_gpu_shape_checks(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_shape_checks)
}

// bool xla_cpu_enable_mlir_lowering = 171;
inline void DebugOptions::clear_xla_cpu_enable_mlir_lowering() {
  xla_cpu_enable_mlir_lowering_ = false;
}
inline bool DebugOptions::_internal_xla_cpu_enable_mlir_lowering() const {
  return xla_cpu_enable_mlir_lowering_;
}
inline bool DebugOptions::xla_cpu_enable_mlir_lowering() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_cpu_enable_mlir_lowering)
  return _internal_xla_cpu_enable_mlir_lowering();
}
inline void DebugOptions::_internal_set_xla_cpu_enable_mlir_lowering(bool value) {
  
  xla_cpu_enable_mlir_lowering_ = value;
}
inline void DebugOptions::set_xla_cpu_enable_mlir_lowering(bool value) {
  _internal_set_xla_cpu_enable_mlir_lowering(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_cpu_enable_mlir_lowering)
}

// bool xla_gpu_enable_mlir_lowering = 173;
inline void DebugOptions::clear_xla_gpu_enable_mlir_lowering() {
  xla_gpu_enable_mlir_lowering_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_enable_mlir_lowering() const {
  return xla_gpu_enable_mlir_lowering_;
}
inline bool DebugOptions::xla_gpu_enable_mlir_lowering() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_enable_mlir_lowering)
  return _internal_xla_gpu_enable_mlir_lowering();
}
inline void DebugOptions::_internal_set_xla_gpu_enable_mlir_lowering(bool value) {
  
  xla_gpu_enable_mlir_lowering_ = value;
}
inline void DebugOptions::set_xla_gpu_enable_mlir_lowering(bool value) {
  _internal_set_xla_gpu_enable_mlir_lowering(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_enable_mlir_lowering)
}

// bool xla_hlo_evaluator_use_fast_path = 106;
inline void DebugOptions::clear_xla_hlo_evaluator_use_fast_path() {
  xla_hlo_evaluator_use_fast_path_ = false;
}
inline bool DebugOptions::_internal_xla_hlo_evaluator_use_fast_path() const {
  return xla_hlo_evaluator_use_fast_path_;
}
inline bool DebugOptions::xla_hlo_evaluator_use_fast_path() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_hlo_evaluator_use_fast_path)
  return _internal_xla_hlo_evaluator_use_fast_path();
}
inline void DebugOptions::_internal_set_xla_hlo_evaluator_use_fast_path(bool value) {
  
  xla_hlo_evaluator_use_fast_path_ = value;
}
inline void DebugOptions::set_xla_hlo_evaluator_use_fast_path(bool value) {
  _internal_set_xla_hlo_evaluator_use_fast_path(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_hlo_evaluator_use_fast_path)
}

// bool xla_allow_scalar_index_dynamic_ops = 107;
inline void DebugOptions::clear_xla_allow_scalar_index_dynamic_ops() {
  xla_allow_scalar_index_dynamic_ops_ = false;
}
inline bool DebugOptions::_internal_xla_allow_scalar_index_dynamic_ops() const {
  return xla_allow_scalar_index_dynamic_ops_;
}
inline bool DebugOptions::xla_allow_scalar_index_dynamic_ops() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_allow_scalar_index_dynamic_ops)
  return _internal_xla_allow_scalar_index_dynamic_ops();
}
inline void DebugOptions::_internal_set_xla_allow_scalar_index_dynamic_ops(bool value) {
  
  xla_allow_scalar_index_dynamic_ops_ = value;
}
inline void DebugOptions::set_xla_allow_scalar_index_dynamic_ops(bool value) {
  _internal_set_xla_allow_scalar_index_dynamic_ops(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_allow_scalar_index_dynamic_ops)
}

// .xla.DebugOptions.StepMarkerLocation xla_step_marker_location = 108;
inline void DebugOptions::clear_xla_step_marker_location() {
  xla_step_marker_location_ = 0;
}
inline ::xla::DebugOptions_StepMarkerLocation DebugOptions::_internal_xla_step_marker_location() const {
  return static_cast< ::xla::DebugOptions_StepMarkerLocation >(xla_step_marker_location_);
}
inline ::xla::DebugOptions_StepMarkerLocation DebugOptions::xla_step_marker_location() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_step_marker_location)
  return _internal_xla_step_marker_location();
}
inline void DebugOptions::_internal_set_xla_step_marker_location(::xla::DebugOptions_StepMarkerLocation value) {
  
  xla_step_marker_location_ = value;
}
inline void DebugOptions::set_xla_step_marker_location(::xla::DebugOptions_StepMarkerLocation value) {
  _internal_set_xla_step_marker_location(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_step_marker_location)
}

// string xla_dump_to = 109;
inline void DebugOptions::clear_xla_dump_to() {
  xla_dump_to_.ClearToEmpty();
}
inline const std::string& DebugOptions::xla_dump_to() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_to)
  return _internal_xla_dump_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DebugOptions::set_xla_dump_to(ArgT0&& arg0, ArgT... args) {
 
 xla_dump_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_to)
}
inline std::string* DebugOptions::mutable_xla_dump_to() {
  std::string* _s = _internal_mutable_xla_dump_to();
  // @@protoc_insertion_point(field_mutable:xla.DebugOptions.xla_dump_to)
  return _s;
}
inline const std::string& DebugOptions::_internal_xla_dump_to() const {
  return xla_dump_to_.Get();
}
inline void DebugOptions::_internal_set_xla_dump_to(const std::string& value) {
  
  xla_dump_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DebugOptions::_internal_mutable_xla_dump_to() {
  
  return xla_dump_to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DebugOptions::release_xla_dump_to() {
  // @@protoc_insertion_point(field_release:xla.DebugOptions.xla_dump_to)
  return xla_dump_to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DebugOptions::set_allocated_xla_dump_to(std::string* xla_dump_to) {
  if (xla_dump_to != nullptr) {
    
  } else {
    
  }
  xla_dump_to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xla_dump_to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xla.DebugOptions.xla_dump_to)
}

// string xla_dump_hlo_module_re = 110;
inline void DebugOptions::clear_xla_dump_hlo_module_re() {
  xla_dump_hlo_module_re_.ClearToEmpty();
}
inline const std::string& DebugOptions::xla_dump_hlo_module_re() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_hlo_module_re)
  return _internal_xla_dump_hlo_module_re();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DebugOptions::set_xla_dump_hlo_module_re(ArgT0&& arg0, ArgT... args) {
 
 xla_dump_hlo_module_re_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_hlo_module_re)
}
inline std::string* DebugOptions::mutable_xla_dump_hlo_module_re() {
  std::string* _s = _internal_mutable_xla_dump_hlo_module_re();
  // @@protoc_insertion_point(field_mutable:xla.DebugOptions.xla_dump_hlo_module_re)
  return _s;
}
inline const std::string& DebugOptions::_internal_xla_dump_hlo_module_re() const {
  return xla_dump_hlo_module_re_.Get();
}
inline void DebugOptions::_internal_set_xla_dump_hlo_module_re(const std::string& value) {
  
  xla_dump_hlo_module_re_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DebugOptions::_internal_mutable_xla_dump_hlo_module_re() {
  
  return xla_dump_hlo_module_re_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DebugOptions::release_xla_dump_hlo_module_re() {
  // @@protoc_insertion_point(field_release:xla.DebugOptions.xla_dump_hlo_module_re)
  return xla_dump_hlo_module_re_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DebugOptions::set_allocated_xla_dump_hlo_module_re(std::string* xla_dump_hlo_module_re) {
  if (xla_dump_hlo_module_re != nullptr) {
    
  } else {
    
  }
  xla_dump_hlo_module_re_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xla_dump_hlo_module_re,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xla.DebugOptions.xla_dump_hlo_module_re)
}

// string xla_dump_hlo_pass_re = 111;
inline void DebugOptions::clear_xla_dump_hlo_pass_re() {
  xla_dump_hlo_pass_re_.ClearToEmpty();
}
inline const std::string& DebugOptions::xla_dump_hlo_pass_re() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_hlo_pass_re)
  return _internal_xla_dump_hlo_pass_re();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DebugOptions::set_xla_dump_hlo_pass_re(ArgT0&& arg0, ArgT... args) {
 
 xla_dump_hlo_pass_re_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_hlo_pass_re)
}
inline std::string* DebugOptions::mutable_xla_dump_hlo_pass_re() {
  std::string* _s = _internal_mutable_xla_dump_hlo_pass_re();
  // @@protoc_insertion_point(field_mutable:xla.DebugOptions.xla_dump_hlo_pass_re)
  return _s;
}
inline const std::string& DebugOptions::_internal_xla_dump_hlo_pass_re() const {
  return xla_dump_hlo_pass_re_.Get();
}
inline void DebugOptions::_internal_set_xla_dump_hlo_pass_re(const std::string& value) {
  
  xla_dump_hlo_pass_re_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DebugOptions::_internal_mutable_xla_dump_hlo_pass_re() {
  
  return xla_dump_hlo_pass_re_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DebugOptions::release_xla_dump_hlo_pass_re() {
  // @@protoc_insertion_point(field_release:xla.DebugOptions.xla_dump_hlo_pass_re)
  return xla_dump_hlo_pass_re_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DebugOptions::set_allocated_xla_dump_hlo_pass_re(std::string* xla_dump_hlo_pass_re) {
  if (xla_dump_hlo_pass_re != nullptr) {
    
  } else {
    
  }
  xla_dump_hlo_pass_re_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xla_dump_hlo_pass_re,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xla.DebugOptions.xla_dump_hlo_pass_re)
}

// bool xla_dump_hlo_as_text = 112;
inline void DebugOptions::clear_xla_dump_hlo_as_text() {
  xla_dump_hlo_as_text_ = false;
}
inline bool DebugOptions::_internal_xla_dump_hlo_as_text() const {
  return xla_dump_hlo_as_text_;
}
inline bool DebugOptions::xla_dump_hlo_as_text() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_hlo_as_text)
  return _internal_xla_dump_hlo_as_text();
}
inline void DebugOptions::_internal_set_xla_dump_hlo_as_text(bool value) {
  
  xla_dump_hlo_as_text_ = value;
}
inline void DebugOptions::set_xla_dump_hlo_as_text(bool value) {
  _internal_set_xla_dump_hlo_as_text(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_hlo_as_text)
}

// bool xla_dump_hlo_as_proto = 113;
inline void DebugOptions::clear_xla_dump_hlo_as_proto() {
  xla_dump_hlo_as_proto_ = false;
}
inline bool DebugOptions::_internal_xla_dump_hlo_as_proto() const {
  return xla_dump_hlo_as_proto_;
}
inline bool DebugOptions::xla_dump_hlo_as_proto() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_hlo_as_proto)
  return _internal_xla_dump_hlo_as_proto();
}
inline void DebugOptions::_internal_set_xla_dump_hlo_as_proto(bool value) {
  
  xla_dump_hlo_as_proto_ = value;
}
inline void DebugOptions::set_xla_dump_hlo_as_proto(bool value) {
  _internal_set_xla_dump_hlo_as_proto(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_hlo_as_proto)
}

// bool xla_dump_hlo_as_dot = 114;
inline void DebugOptions::clear_xla_dump_hlo_as_dot() {
  xla_dump_hlo_as_dot_ = false;
}
inline bool DebugOptions::_internal_xla_dump_hlo_as_dot() const {
  return xla_dump_hlo_as_dot_;
}
inline bool DebugOptions::xla_dump_hlo_as_dot() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_hlo_as_dot)
  return _internal_xla_dump_hlo_as_dot();
}
inline void DebugOptions::_internal_set_xla_dump_hlo_as_dot(bool value) {
  
  xla_dump_hlo_as_dot_ = value;
}
inline void DebugOptions::set_xla_dump_hlo_as_dot(bool value) {
  _internal_set_xla_dump_hlo_as_dot(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_hlo_as_dot)
}

// bool xla_dump_hlo_as_url = 115;
inline void DebugOptions::clear_xla_dump_hlo_as_url() {
  xla_dump_hlo_as_url_ = false;
}
inline bool DebugOptions::_internal_xla_dump_hlo_as_url() const {
  return xla_dump_hlo_as_url_;
}
inline bool DebugOptions::xla_dump_hlo_as_url() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_hlo_as_url)
  return _internal_xla_dump_hlo_as_url();
}
inline void DebugOptions::_internal_set_xla_dump_hlo_as_url(bool value) {
  
  xla_dump_hlo_as_url_ = value;
}
inline void DebugOptions::set_xla_dump_hlo_as_url(bool value) {
  _internal_set_xla_dump_hlo_as_url(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_hlo_as_url)
}

// bool xla_dump_hlo_as_html = 116;
inline void DebugOptions::clear_xla_dump_hlo_as_html() {
  xla_dump_hlo_as_html_ = false;
}
inline bool DebugOptions::_internal_xla_dump_hlo_as_html() const {
  return xla_dump_hlo_as_html_;
}
inline bool DebugOptions::xla_dump_hlo_as_html() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_hlo_as_html)
  return _internal_xla_dump_hlo_as_html();
}
inline void DebugOptions::_internal_set_xla_dump_hlo_as_html(bool value) {
  
  xla_dump_hlo_as_html_ = value;
}
inline void DebugOptions::set_xla_dump_hlo_as_html(bool value) {
  _internal_set_xla_dump_hlo_as_html(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_hlo_as_html)
}

// bool xla_dump_fusion_visualization = 149;
inline void DebugOptions::clear_xla_dump_fusion_visualization() {
  xla_dump_fusion_visualization_ = false;
}
inline bool DebugOptions::_internal_xla_dump_fusion_visualization() const {
  return xla_dump_fusion_visualization_;
}
inline bool DebugOptions::xla_dump_fusion_visualization() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_fusion_visualization)
  return _internal_xla_dump_fusion_visualization();
}
inline void DebugOptions::_internal_set_xla_dump_fusion_visualization(bool value) {
  
  xla_dump_fusion_visualization_ = value;
}
inline void DebugOptions::set_xla_dump_fusion_visualization(bool value) {
  _internal_set_xla_dump_fusion_visualization(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_fusion_visualization)
}

// bool xla_dump_hlo_snapshots = 118;
inline void DebugOptions::clear_xla_dump_hlo_snapshots() {
  xla_dump_hlo_snapshots_ = false;
}
inline bool DebugOptions::_internal_xla_dump_hlo_snapshots() const {
  return xla_dump_hlo_snapshots_;
}
inline bool DebugOptions::xla_dump_hlo_snapshots() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_hlo_snapshots)
  return _internal_xla_dump_hlo_snapshots();
}
inline void DebugOptions::_internal_set_xla_dump_hlo_snapshots(bool value) {
  
  xla_dump_hlo_snapshots_ = value;
}
inline void DebugOptions::set_xla_dump_hlo_snapshots(bool value) {
  _internal_set_xla_dump_hlo_snapshots(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_hlo_snapshots)
}

// bool xla_dump_include_timestamp = 131;
inline void DebugOptions::clear_xla_dump_include_timestamp() {
  xla_dump_include_timestamp_ = false;
}
inline bool DebugOptions::_internal_xla_dump_include_timestamp() const {
  return xla_dump_include_timestamp_;
}
inline bool DebugOptions::xla_dump_include_timestamp() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_include_timestamp)
  return _internal_xla_dump_include_timestamp();
}
inline void DebugOptions::_internal_set_xla_dump_include_timestamp(bool value) {
  
  xla_dump_include_timestamp_ = value;
}
inline void DebugOptions::set_xla_dump_include_timestamp(bool value) {
  _internal_set_xla_dump_include_timestamp(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_include_timestamp)
}

// int32 xla_dump_max_hlo_modules = 132;
inline void DebugOptions::clear_xla_dump_max_hlo_modules() {
  xla_dump_max_hlo_modules_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::_internal_xla_dump_max_hlo_modules() const {
  return xla_dump_max_hlo_modules_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::xla_dump_max_hlo_modules() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_max_hlo_modules)
  return _internal_xla_dump_max_hlo_modules();
}
inline void DebugOptions::_internal_set_xla_dump_max_hlo_modules(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xla_dump_max_hlo_modules_ = value;
}
inline void DebugOptions::set_xla_dump_max_hlo_modules(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xla_dump_max_hlo_modules(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_max_hlo_modules)
}

// bool xla_dump_module_metadata = 144;
inline void DebugOptions::clear_xla_dump_module_metadata() {
  xla_dump_module_metadata_ = false;
}
inline bool DebugOptions::_internal_xla_dump_module_metadata() const {
  return xla_dump_module_metadata_;
}
inline bool DebugOptions::xla_dump_module_metadata() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_module_metadata)
  return _internal_xla_dump_module_metadata();
}
inline void DebugOptions::_internal_set_xla_dump_module_metadata(bool value) {
  
  xla_dump_module_metadata_ = value;
}
inline void DebugOptions::set_xla_dump_module_metadata(bool value) {
  _internal_set_xla_dump_module_metadata(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_module_metadata)
}

// bool xla_dump_compress_protos = 151;
inline void DebugOptions::clear_xla_dump_compress_protos() {
  xla_dump_compress_protos_ = false;
}
inline bool DebugOptions::_internal_xla_dump_compress_protos() const {
  return xla_dump_compress_protos_;
}
inline bool DebugOptions::xla_dump_compress_protos() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_compress_protos)
  return _internal_xla_dump_compress_protos();
}
inline void DebugOptions::_internal_set_xla_dump_compress_protos(bool value) {
  
  xla_dump_compress_protos_ = value;
}
inline void DebugOptions::set_xla_dump_compress_protos(bool value) {
  _internal_set_xla_dump_compress_protos(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_compress_protos)
}

// bool xla_dump_hlo_as_long_text = 164;
inline void DebugOptions::clear_xla_dump_hlo_as_long_text() {
  xla_dump_hlo_as_long_text_ = false;
}
inline bool DebugOptions::_internal_xla_dump_hlo_as_long_text() const {
  return xla_dump_hlo_as_long_text_;
}
inline bool DebugOptions::xla_dump_hlo_as_long_text() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_hlo_as_long_text)
  return _internal_xla_dump_hlo_as_long_text();
}
inline void DebugOptions::_internal_set_xla_dump_hlo_as_long_text(bool value) {
  
  xla_dump_hlo_as_long_text_ = value;
}
inline void DebugOptions::set_xla_dump_hlo_as_long_text(bool value) {
  _internal_set_xla_dump_hlo_as_long_text(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_hlo_as_long_text)
}

// bool xla_gpu_force_conv_nchw = 125;
inline void DebugOptions::clear_xla_gpu_force_conv_nchw() {
  xla_gpu_force_conv_nchw_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_force_conv_nchw() const {
  return xla_gpu_force_conv_nchw_;
}
inline bool DebugOptions::xla_gpu_force_conv_nchw() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_force_conv_nchw)
  return _internal_xla_gpu_force_conv_nchw();
}
inline void DebugOptions::_internal_set_xla_gpu_force_conv_nchw(bool value) {
  
  xla_gpu_force_conv_nchw_ = value;
}
inline void DebugOptions::set_xla_gpu_force_conv_nchw(bool value) {
  _internal_set_xla_gpu_force_conv_nchw(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_force_conv_nchw)
}

// bool xla_gpu_force_conv_nhwc = 146;
inline void DebugOptions::clear_xla_gpu_force_conv_nhwc() {
  xla_gpu_force_conv_nhwc_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_force_conv_nhwc() const {
  return xla_gpu_force_conv_nhwc_;
}
inline bool DebugOptions::xla_gpu_force_conv_nhwc() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_force_conv_nhwc)
  return _internal_xla_gpu_force_conv_nhwc();
}
inline void DebugOptions::_internal_set_xla_gpu_force_conv_nhwc(bool value) {
  
  xla_gpu_force_conv_nhwc_ = value;
}
inline void DebugOptions::set_xla_gpu_force_conv_nhwc(bool value) {
  _internal_set_xla_gpu_force_conv_nhwc(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_force_conv_nhwc)
}

// repeated string xla_gpu_ptx_file = 127;
inline int DebugOptions::_internal_xla_gpu_ptx_file_size() const {
  return xla_gpu_ptx_file_.size();
}
inline int DebugOptions::xla_gpu_ptx_file_size() const {
  return _internal_xla_gpu_ptx_file_size();
}
inline void DebugOptions::clear_xla_gpu_ptx_file() {
  xla_gpu_ptx_file_.Clear();
}
inline std::string* DebugOptions::add_xla_gpu_ptx_file() {
  std::string* _s = _internal_add_xla_gpu_ptx_file();
  // @@protoc_insertion_point(field_add_mutable:xla.DebugOptions.xla_gpu_ptx_file)
  return _s;
}
inline const std::string& DebugOptions::_internal_xla_gpu_ptx_file(int index) const {
  return xla_gpu_ptx_file_.Get(index);
}
inline const std::string& DebugOptions::xla_gpu_ptx_file(int index) const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_ptx_file)
  return _internal_xla_gpu_ptx_file(index);
}
inline std::string* DebugOptions::mutable_xla_gpu_ptx_file(int index) {
  // @@protoc_insertion_point(field_mutable:xla.DebugOptions.xla_gpu_ptx_file)
  return xla_gpu_ptx_file_.Mutable(index);
}
inline void DebugOptions::set_xla_gpu_ptx_file(int index, const std::string& value) {
  xla_gpu_ptx_file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_ptx_file)
}
inline void DebugOptions::set_xla_gpu_ptx_file(int index, std::string&& value) {
  xla_gpu_ptx_file_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_ptx_file)
}
inline void DebugOptions::set_xla_gpu_ptx_file(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  xla_gpu_ptx_file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xla.DebugOptions.xla_gpu_ptx_file)
}
inline void DebugOptions::set_xla_gpu_ptx_file(int index, const char* value, size_t size) {
  xla_gpu_ptx_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xla.DebugOptions.xla_gpu_ptx_file)
}
inline std::string* DebugOptions::_internal_add_xla_gpu_ptx_file() {
  return xla_gpu_ptx_file_.Add();
}
inline void DebugOptions::add_xla_gpu_ptx_file(const std::string& value) {
  xla_gpu_ptx_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xla.DebugOptions.xla_gpu_ptx_file)
}
inline void DebugOptions::add_xla_gpu_ptx_file(std::string&& value) {
  xla_gpu_ptx_file_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xla.DebugOptions.xla_gpu_ptx_file)
}
inline void DebugOptions::add_xla_gpu_ptx_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  xla_gpu_ptx_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xla.DebugOptions.xla_gpu_ptx_file)
}
inline void DebugOptions::add_xla_gpu_ptx_file(const char* value, size_t size) {
  xla_gpu_ptx_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xla.DebugOptions.xla_gpu_ptx_file)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DebugOptions::xla_gpu_ptx_file() const {
  // @@protoc_insertion_point(field_list:xla.DebugOptions.xla_gpu_ptx_file)
  return xla_gpu_ptx_file_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DebugOptions::mutable_xla_gpu_ptx_file() {
  // @@protoc_insertion_point(field_mutable_list:xla.DebugOptions.xla_gpu_ptx_file)
  return &xla_gpu_ptx_file_;
}

// bool xla_gpu_dump_llvmir = 155;
inline void DebugOptions::clear_xla_gpu_dump_llvmir() {
  xla_gpu_dump_llvmir_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_dump_llvmir() const {
  return xla_gpu_dump_llvmir_;
}
inline bool DebugOptions::xla_gpu_dump_llvmir() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_dump_llvmir)
  return _internal_xla_gpu_dump_llvmir();
}
inline void DebugOptions::_internal_set_xla_gpu_dump_llvmir(bool value) {
  
  xla_gpu_dump_llvmir_ = value;
}
inline void DebugOptions::set_xla_gpu_dump_llvmir(bool value) {
  _internal_set_xla_gpu_dump_llvmir(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_dump_llvmir)
}

// string xla_gpu_algorithm_denylist_path = 128;
inline void DebugOptions::clear_xla_gpu_algorithm_denylist_path() {
  xla_gpu_algorithm_denylist_path_.ClearToEmpty();
}
inline const std::string& DebugOptions::xla_gpu_algorithm_denylist_path() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_algorithm_denylist_path)
  return _internal_xla_gpu_algorithm_denylist_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DebugOptions::set_xla_gpu_algorithm_denylist_path(ArgT0&& arg0, ArgT... args) {
 
 xla_gpu_algorithm_denylist_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_algorithm_denylist_path)
}
inline std::string* DebugOptions::mutable_xla_gpu_algorithm_denylist_path() {
  std::string* _s = _internal_mutable_xla_gpu_algorithm_denylist_path();
  // @@protoc_insertion_point(field_mutable:xla.DebugOptions.xla_gpu_algorithm_denylist_path)
  return _s;
}
inline const std::string& DebugOptions::_internal_xla_gpu_algorithm_denylist_path() const {
  return xla_gpu_algorithm_denylist_path_.Get();
}
inline void DebugOptions::_internal_set_xla_gpu_algorithm_denylist_path(const std::string& value) {
  
  xla_gpu_algorithm_denylist_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DebugOptions::_internal_mutable_xla_gpu_algorithm_denylist_path() {
  
  return xla_gpu_algorithm_denylist_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DebugOptions::release_xla_gpu_algorithm_denylist_path() {
  // @@protoc_insertion_point(field_release:xla.DebugOptions.xla_gpu_algorithm_denylist_path)
  return xla_gpu_algorithm_denylist_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DebugOptions::set_allocated_xla_gpu_algorithm_denylist_path(std::string* xla_gpu_algorithm_denylist_path) {
  if (xla_gpu_algorithm_denylist_path != nullptr) {
    
  } else {
    
  }
  xla_gpu_algorithm_denylist_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xla_gpu_algorithm_denylist_path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xla.DebugOptions.xla_gpu_algorithm_denylist_path)
}

// bool xla_tpu_detect_nan = 135;
inline void DebugOptions::clear_xla_tpu_detect_nan() {
  xla_tpu_detect_nan_ = false;
}
inline bool DebugOptions::_internal_xla_tpu_detect_nan() const {
  return xla_tpu_detect_nan_;
}
inline bool DebugOptions::xla_tpu_detect_nan() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_tpu_detect_nan)
  return _internal_xla_tpu_detect_nan();
}
inline void DebugOptions::_internal_set_xla_tpu_detect_nan(bool value) {
  
  xla_tpu_detect_nan_ = value;
}
inline void DebugOptions::set_xla_tpu_detect_nan(bool value) {
  _internal_set_xla_tpu_detect_nan(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_tpu_detect_nan)
}

// bool xla_tpu_detect_inf = 136;
inline void DebugOptions::clear_xla_tpu_detect_inf() {
  xla_tpu_detect_inf_ = false;
}
inline bool DebugOptions::_internal_xla_tpu_detect_inf() const {
  return xla_tpu_detect_inf_;
}
inline bool DebugOptions::xla_tpu_detect_inf() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_tpu_detect_inf)
  return _internal_xla_tpu_detect_inf();
}
inline void DebugOptions::_internal_set_xla_tpu_detect_inf(bool value) {
  
  xla_tpu_detect_inf_ = value;
}
inline void DebugOptions::set_xla_tpu_detect_inf(bool value) {
  _internal_set_xla_tpu_detect_inf(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_tpu_detect_inf)
}

// bool xla_cpu_enable_xprof_traceme = 137;
inline void DebugOptions::clear_xla_cpu_enable_xprof_traceme() {
  xla_cpu_enable_xprof_traceme_ = false;
}
inline bool DebugOptions::_internal_xla_cpu_enable_xprof_traceme() const {
  return xla_cpu_enable_xprof_traceme_;
}
inline bool DebugOptions::xla_cpu_enable_xprof_traceme() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_cpu_enable_xprof_traceme)
  return _internal_xla_cpu_enable_xprof_traceme();
}
inline void DebugOptions::_internal_set_xla_cpu_enable_xprof_traceme(bool value) {
  
  xla_cpu_enable_xprof_traceme_ = value;
}
inline void DebugOptions::set_xla_cpu_enable_xprof_traceme(bool value) {
  _internal_set_xla_cpu_enable_xprof_traceme(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_cpu_enable_xprof_traceme)
}

// bool xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found = 138;
inline void DebugOptions::clear_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found() {
  xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found() const {
  return xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found_;
}
inline bool DebugOptions::xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found)
  return _internal_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found();
}
inline void DebugOptions::_internal_set_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found(bool value) {
  
  xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found_ = value;
}
inline void DebugOptions::set_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found(bool value) {
  _internal_set_xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found)
}

// string xla_gpu_asm_extra_flags = 141;
inline void DebugOptions::clear_xla_gpu_asm_extra_flags() {
  xla_gpu_asm_extra_flags_.ClearToEmpty();
}
inline const std::string& DebugOptions::xla_gpu_asm_extra_flags() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_asm_extra_flags)
  return _internal_xla_gpu_asm_extra_flags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DebugOptions::set_xla_gpu_asm_extra_flags(ArgT0&& arg0, ArgT... args) {
 
 xla_gpu_asm_extra_flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_asm_extra_flags)
}
inline std::string* DebugOptions::mutable_xla_gpu_asm_extra_flags() {
  std::string* _s = _internal_mutable_xla_gpu_asm_extra_flags();
  // @@protoc_insertion_point(field_mutable:xla.DebugOptions.xla_gpu_asm_extra_flags)
  return _s;
}
inline const std::string& DebugOptions::_internal_xla_gpu_asm_extra_flags() const {
  return xla_gpu_asm_extra_flags_.Get();
}
inline void DebugOptions::_internal_set_xla_gpu_asm_extra_flags(const std::string& value) {
  
  xla_gpu_asm_extra_flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DebugOptions::_internal_mutable_xla_gpu_asm_extra_flags() {
  
  return xla_gpu_asm_extra_flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DebugOptions::release_xla_gpu_asm_extra_flags() {
  // @@protoc_insertion_point(field_release:xla.DebugOptions.xla_gpu_asm_extra_flags)
  return xla_gpu_asm_extra_flags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DebugOptions::set_allocated_xla_gpu_asm_extra_flags(std::string* xla_gpu_asm_extra_flags) {
  if (xla_gpu_asm_extra_flags != nullptr) {
    
  } else {
    
  }
  xla_gpu_asm_extra_flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xla_gpu_asm_extra_flags,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xla.DebugOptions.xla_gpu_asm_extra_flags)
}

// int32 xla_multiheap_size_constraint_per_heap = 142;
inline void DebugOptions::clear_xla_multiheap_size_constraint_per_heap() {
  xla_multiheap_size_constraint_per_heap_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::_internal_xla_multiheap_size_constraint_per_heap() const {
  return xla_multiheap_size_constraint_per_heap_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::xla_multiheap_size_constraint_per_heap() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_multiheap_size_constraint_per_heap)
  return _internal_xla_multiheap_size_constraint_per_heap();
}
inline void DebugOptions::_internal_set_xla_multiheap_size_constraint_per_heap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xla_multiheap_size_constraint_per_heap_ = value;
}
inline void DebugOptions::set_xla_multiheap_size_constraint_per_heap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xla_multiheap_size_constraint_per_heap(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_multiheap_size_constraint_per_heap)
}

// bool xla_detailed_logging_and_dumping = 143;
inline void DebugOptions::clear_xla_detailed_logging_and_dumping() {
  xla_detailed_logging_and_dumping_ = false;
}
inline bool DebugOptions::_internal_xla_detailed_logging_and_dumping() const {
  return xla_detailed_logging_and_dumping_;
}
inline bool DebugOptions::xla_detailed_logging_and_dumping() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_detailed_logging_and_dumping)
  return _internal_xla_detailed_logging_and_dumping();
}
inline void DebugOptions::_internal_set_xla_detailed_logging_and_dumping(bool value) {
  
  xla_detailed_logging_and_dumping_ = value;
}
inline void DebugOptions::set_xla_detailed_logging_and_dumping(bool value) {
  _internal_set_xla_detailed_logging_and_dumping(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_detailed_logging_and_dumping)
}

// int32 xla_gpu_force_compilation_parallelism = 147;
inline void DebugOptions::clear_xla_gpu_force_compilation_parallelism() {
  xla_gpu_force_compilation_parallelism_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::_internal_xla_gpu_force_compilation_parallelism() const {
  return xla_gpu_force_compilation_parallelism_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::xla_gpu_force_compilation_parallelism() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_force_compilation_parallelism)
  return _internal_xla_gpu_force_compilation_parallelism();
}
inline void DebugOptions::_internal_set_xla_gpu_force_compilation_parallelism(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xla_gpu_force_compilation_parallelism_ = value;
}
inline void DebugOptions::set_xla_gpu_force_compilation_parallelism(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xla_gpu_force_compilation_parallelism(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_force_compilation_parallelism)
}

// bool xla_gpu_deterministic_ops = 148;
inline void DebugOptions::clear_xla_gpu_deterministic_ops() {
  xla_gpu_deterministic_ops_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_deterministic_ops() const {
  return xla_gpu_deterministic_ops_;
}
inline bool DebugOptions::xla_gpu_deterministic_ops() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_deterministic_ops)
  return _internal_xla_gpu_deterministic_ops();
}
inline void DebugOptions::_internal_set_xla_gpu_deterministic_ops(bool value) {
  
  xla_gpu_deterministic_ops_ = value;
}
inline void DebugOptions::set_xla_gpu_deterministic_ops(bool value) {
  _internal_set_xla_gpu_deterministic_ops(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_deterministic_ops)
}

// repeated string xla_gpu_llvm_ir_file = 150;
inline int DebugOptions::_internal_xla_gpu_llvm_ir_file_size() const {
  return xla_gpu_llvm_ir_file_.size();
}
inline int DebugOptions::xla_gpu_llvm_ir_file_size() const {
  return _internal_xla_gpu_llvm_ir_file_size();
}
inline void DebugOptions::clear_xla_gpu_llvm_ir_file() {
  xla_gpu_llvm_ir_file_.Clear();
}
inline std::string* DebugOptions::add_xla_gpu_llvm_ir_file() {
  std::string* _s = _internal_add_xla_gpu_llvm_ir_file();
  // @@protoc_insertion_point(field_add_mutable:xla.DebugOptions.xla_gpu_llvm_ir_file)
  return _s;
}
inline const std::string& DebugOptions::_internal_xla_gpu_llvm_ir_file(int index) const {
  return xla_gpu_llvm_ir_file_.Get(index);
}
inline const std::string& DebugOptions::xla_gpu_llvm_ir_file(int index) const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_llvm_ir_file)
  return _internal_xla_gpu_llvm_ir_file(index);
}
inline std::string* DebugOptions::mutable_xla_gpu_llvm_ir_file(int index) {
  // @@protoc_insertion_point(field_mutable:xla.DebugOptions.xla_gpu_llvm_ir_file)
  return xla_gpu_llvm_ir_file_.Mutable(index);
}
inline void DebugOptions::set_xla_gpu_llvm_ir_file(int index, const std::string& value) {
  xla_gpu_llvm_ir_file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_llvm_ir_file)
}
inline void DebugOptions::set_xla_gpu_llvm_ir_file(int index, std::string&& value) {
  xla_gpu_llvm_ir_file_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_llvm_ir_file)
}
inline void DebugOptions::set_xla_gpu_llvm_ir_file(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  xla_gpu_llvm_ir_file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xla.DebugOptions.xla_gpu_llvm_ir_file)
}
inline void DebugOptions::set_xla_gpu_llvm_ir_file(int index, const char* value, size_t size) {
  xla_gpu_llvm_ir_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xla.DebugOptions.xla_gpu_llvm_ir_file)
}
inline std::string* DebugOptions::_internal_add_xla_gpu_llvm_ir_file() {
  return xla_gpu_llvm_ir_file_.Add();
}
inline void DebugOptions::add_xla_gpu_llvm_ir_file(const std::string& value) {
  xla_gpu_llvm_ir_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xla.DebugOptions.xla_gpu_llvm_ir_file)
}
inline void DebugOptions::add_xla_gpu_llvm_ir_file(std::string&& value) {
  xla_gpu_llvm_ir_file_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xla.DebugOptions.xla_gpu_llvm_ir_file)
}
inline void DebugOptions::add_xla_gpu_llvm_ir_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  xla_gpu_llvm_ir_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xla.DebugOptions.xla_gpu_llvm_ir_file)
}
inline void DebugOptions::add_xla_gpu_llvm_ir_file(const char* value, size_t size) {
  xla_gpu_llvm_ir_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xla.DebugOptions.xla_gpu_llvm_ir_file)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DebugOptions::xla_gpu_llvm_ir_file() const {
  // @@protoc_insertion_point(field_list:xla.DebugOptions.xla_gpu_llvm_ir_file)
  return xla_gpu_llvm_ir_file_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DebugOptions::mutable_xla_gpu_llvm_ir_file() {
  // @@protoc_insertion_point(field_mutable_list:xla.DebugOptions.xla_gpu_llvm_ir_file)
  return &xla_gpu_llvm_ir_file_;
}

// bool xla_gpu_enable_async_all_reduce = 152;
inline void DebugOptions::clear_xla_gpu_enable_async_all_reduce() {
  xla_gpu_enable_async_all_reduce_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_enable_async_all_reduce() const {
  return xla_gpu_enable_async_all_reduce_;
}
inline bool DebugOptions::xla_gpu_enable_async_all_reduce() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_enable_async_all_reduce)
  return _internal_xla_gpu_enable_async_all_reduce();
}
inline void DebugOptions::_internal_set_xla_gpu_enable_async_all_reduce(bool value) {
  
  xla_gpu_enable_async_all_reduce_ = value;
}
inline void DebugOptions::set_xla_gpu_enable_async_all_reduce(bool value) {
  _internal_set_xla_gpu_enable_async_all_reduce(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_enable_async_all_reduce)
}

// int64 xla_gpu_all_reduce_combine_threshold_bytes = 157;
inline void DebugOptions::clear_xla_gpu_all_reduce_combine_threshold_bytes() {
  xla_gpu_all_reduce_combine_threshold_bytes_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DebugOptions::_internal_xla_gpu_all_reduce_combine_threshold_bytes() const {
  return xla_gpu_all_reduce_combine_threshold_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DebugOptions::xla_gpu_all_reduce_combine_threshold_bytes() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_all_reduce_combine_threshold_bytes)
  return _internal_xla_gpu_all_reduce_combine_threshold_bytes();
}
inline void DebugOptions::_internal_set_xla_gpu_all_reduce_combine_threshold_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  xla_gpu_all_reduce_combine_threshold_bytes_ = value;
}
inline void DebugOptions::set_xla_gpu_all_reduce_combine_threshold_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_xla_gpu_all_reduce_combine_threshold_bytes(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_all_reduce_combine_threshold_bytes)
}

// bool xla_gpu_all_reduce_contiguous = 158;
inline void DebugOptions::clear_xla_gpu_all_reduce_contiguous() {
  xla_gpu_all_reduce_contiguous_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_all_reduce_contiguous() const {
  return xla_gpu_all_reduce_contiguous_;
}
inline bool DebugOptions::xla_gpu_all_reduce_contiguous() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_all_reduce_contiguous)
  return _internal_xla_gpu_all_reduce_contiguous();
}
inline void DebugOptions::_internal_set_xla_gpu_all_reduce_contiguous(bool value) {
  
  xla_gpu_all_reduce_contiguous_ = value;
}
inline void DebugOptions::set_xla_gpu_all_reduce_contiguous(bool value) {
  _internal_set_xla_gpu_all_reduce_contiguous(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_all_reduce_contiguous)
}

// int32 xla_gpu_all_reduce_blueconnect_num_devices_per_host = 159;
inline void DebugOptions::clear_xla_gpu_all_reduce_blueconnect_num_devices_per_host() {
  xla_gpu_all_reduce_blueconnect_num_devices_per_host_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::_internal_xla_gpu_all_reduce_blueconnect_num_devices_per_host() const {
  return xla_gpu_all_reduce_blueconnect_num_devices_per_host_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DebugOptions::xla_gpu_all_reduce_blueconnect_num_devices_per_host() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_all_reduce_blueconnect_num_devices_per_host)
  return _internal_xla_gpu_all_reduce_blueconnect_num_devices_per_host();
}
inline void DebugOptions::_internal_set_xla_gpu_all_reduce_blueconnect_num_devices_per_host(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xla_gpu_all_reduce_blueconnect_num_devices_per_host_ = value;
}
inline void DebugOptions::set_xla_gpu_all_reduce_blueconnect_num_devices_per_host(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xla_gpu_all_reduce_blueconnect_num_devices_per_host(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_all_reduce_blueconnect_num_devices_per_host)
}

// bool xla_gpu_enable_cudnn_frontend = 160;
inline void DebugOptions::clear_xla_gpu_enable_cudnn_frontend() {
  xla_gpu_enable_cudnn_frontend_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_enable_cudnn_frontend() const {
  return xla_gpu_enable_cudnn_frontend_;
}
inline bool DebugOptions::xla_gpu_enable_cudnn_frontend() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_enable_cudnn_frontend)
  return _internal_xla_gpu_enable_cudnn_frontend();
}
inline void DebugOptions::_internal_set_xla_gpu_enable_cudnn_frontend(bool value) {
  
  xla_gpu_enable_cudnn_frontend_ = value;
}
inline void DebugOptions::set_xla_gpu_enable_cudnn_frontend(bool value) {
  _internal_set_xla_gpu_enable_cudnn_frontend(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_enable_cudnn_frontend)
}

// bool xla_dump_disable_metadata = 153;
inline void DebugOptions::clear_xla_dump_disable_metadata() {
  xla_dump_disable_metadata_ = false;
}
inline bool DebugOptions::_internal_xla_dump_disable_metadata() const {
  return xla_dump_disable_metadata_;
}
inline bool DebugOptions::xla_dump_disable_metadata() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_disable_metadata)
  return _internal_xla_dump_disable_metadata();
}
inline void DebugOptions::_internal_set_xla_dump_disable_metadata(bool value) {
  
  xla_dump_disable_metadata_ = value;
}
inline void DebugOptions::set_xla_dump_disable_metadata(bool value) {
  _internal_set_xla_dump_disable_metadata(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_disable_metadata)
}

// string xla_dump_hlo_pipeline_re = 154;
inline void DebugOptions::clear_xla_dump_hlo_pipeline_re() {
  xla_dump_hlo_pipeline_re_.ClearToEmpty();
}
inline const std::string& DebugOptions::xla_dump_hlo_pipeline_re() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_dump_hlo_pipeline_re)
  return _internal_xla_dump_hlo_pipeline_re();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DebugOptions::set_xla_dump_hlo_pipeline_re(ArgT0&& arg0, ArgT... args) {
 
 xla_dump_hlo_pipeline_re_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_dump_hlo_pipeline_re)
}
inline std::string* DebugOptions::mutable_xla_dump_hlo_pipeline_re() {
  std::string* _s = _internal_mutable_xla_dump_hlo_pipeline_re();
  // @@protoc_insertion_point(field_mutable:xla.DebugOptions.xla_dump_hlo_pipeline_re)
  return _s;
}
inline const std::string& DebugOptions::_internal_xla_dump_hlo_pipeline_re() const {
  return xla_dump_hlo_pipeline_re_.Get();
}
inline void DebugOptions::_internal_set_xla_dump_hlo_pipeline_re(const std::string& value) {
  
  xla_dump_hlo_pipeline_re_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DebugOptions::_internal_mutable_xla_dump_hlo_pipeline_re() {
  
  return xla_dump_hlo_pipeline_re_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DebugOptions::release_xla_dump_hlo_pipeline_re() {
  // @@protoc_insertion_point(field_release:xla.DebugOptions.xla_dump_hlo_pipeline_re)
  return xla_dump_hlo_pipeline_re_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DebugOptions::set_allocated_xla_dump_hlo_pipeline_re(std::string* xla_dump_hlo_pipeline_re) {
  if (xla_dump_hlo_pipeline_re != nullptr) {
    
  } else {
    
  }
  xla_dump_hlo_pipeline_re_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xla_dump_hlo_pipeline_re,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xla.DebugOptions.xla_dump_hlo_pipeline_re)
}

// bool xla_gpu_strict_conv_algorithm_picker = 156;
inline void DebugOptions::clear_xla_gpu_strict_conv_algorithm_picker() {
  xla_gpu_strict_conv_algorithm_picker_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_strict_conv_algorithm_picker() const {
  return xla_gpu_strict_conv_algorithm_picker_;
}
inline bool DebugOptions::xla_gpu_strict_conv_algorithm_picker() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_strict_conv_algorithm_picker)
  return _internal_xla_gpu_strict_conv_algorithm_picker();
}
inline void DebugOptions::_internal_set_xla_gpu_strict_conv_algorithm_picker(bool value) {
  
  xla_gpu_strict_conv_algorithm_picker_ = value;
}
inline void DebugOptions::set_xla_gpu_strict_conv_algorithm_picker(bool value) {
  _internal_set_xla_gpu_strict_conv_algorithm_picker(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_strict_conv_algorithm_picker)
}

// bool xla_gpu_enable_xla_runtime_executable = 169;
inline void DebugOptions::clear_xla_gpu_enable_xla_runtime_executable() {
  xla_gpu_enable_xla_runtime_executable_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_enable_xla_runtime_executable() const {
  return xla_gpu_enable_xla_runtime_executable_;
}
inline bool DebugOptions::xla_gpu_enable_xla_runtime_executable() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_enable_xla_runtime_executable)
  return _internal_xla_gpu_enable_xla_runtime_executable();
}
inline void DebugOptions::_internal_set_xla_gpu_enable_xla_runtime_executable(bool value) {
  
  xla_gpu_enable_xla_runtime_executable_ = value;
}
inline void DebugOptions::set_xla_gpu_enable_xla_runtime_executable(bool value) {
  _internal_set_xla_gpu_enable_xla_runtime_executable(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_enable_xla_runtime_executable)
}

// int64 xla_gpu_nccl_termination_timeout_seconds = 163;
inline void DebugOptions::clear_xla_gpu_nccl_termination_timeout_seconds() {
  xla_gpu_nccl_termination_timeout_seconds_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DebugOptions::_internal_xla_gpu_nccl_termination_timeout_seconds() const {
  return xla_gpu_nccl_termination_timeout_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DebugOptions::xla_gpu_nccl_termination_timeout_seconds() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_nccl_termination_timeout_seconds)
  return _internal_xla_gpu_nccl_termination_timeout_seconds();
}
inline void DebugOptions::_internal_set_xla_gpu_nccl_termination_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  xla_gpu_nccl_termination_timeout_seconds_ = value;
}
inline void DebugOptions::set_xla_gpu_nccl_termination_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_xla_gpu_nccl_termination_timeout_seconds(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_nccl_termination_timeout_seconds)
}

// bool xla_gpu_enable_shared_constants = 165;
inline void DebugOptions::clear_xla_gpu_enable_shared_constants() {
  xla_gpu_enable_shared_constants_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_enable_shared_constants() const {
  return xla_gpu_enable_shared_constants_;
}
inline bool DebugOptions::xla_gpu_enable_shared_constants() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_enable_shared_constants)
  return _internal_xla_gpu_enable_shared_constants();
}
inline void DebugOptions::_internal_set_xla_gpu_enable_shared_constants(bool value) {
  
  xla_gpu_enable_shared_constants_ = value;
}
inline void DebugOptions::set_xla_gpu_enable_shared_constants(bool value) {
  _internal_set_xla_gpu_enable_shared_constants(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_enable_shared_constants)
}

// bool xla_gpu_enable_cublaslt = 166;
inline void DebugOptions::clear_xla_gpu_enable_cublaslt() {
  xla_gpu_enable_cublaslt_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_enable_cublaslt() const {
  return xla_gpu_enable_cublaslt_;
}
inline bool DebugOptions::xla_gpu_enable_cublaslt() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_enable_cublaslt)
  return _internal_xla_gpu_enable_cublaslt();
}
inline void DebugOptions::_internal_set_xla_gpu_enable_cublaslt(bool value) {
  
  xla_gpu_enable_cublaslt_ = value;
}
inline void DebugOptions::set_xla_gpu_enable_cublaslt(bool value) {
  _internal_set_xla_gpu_enable_cublaslt(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_enable_cublaslt)
}

// int64 xla_gpu_redzone_scratch_max_megabytes = 167;
inline void DebugOptions::clear_xla_gpu_redzone_scratch_max_megabytes() {
  xla_gpu_redzone_scratch_max_megabytes_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DebugOptions::_internal_xla_gpu_redzone_scratch_max_megabytes() const {
  return xla_gpu_redzone_scratch_max_megabytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DebugOptions::xla_gpu_redzone_scratch_max_megabytes() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_redzone_scratch_max_megabytes)
  return _internal_xla_gpu_redzone_scratch_max_megabytes();
}
inline void DebugOptions::_internal_set_xla_gpu_redzone_scratch_max_megabytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  xla_gpu_redzone_scratch_max_megabytes_ = value;
}
inline void DebugOptions::set_xla_gpu_redzone_scratch_max_megabytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_xla_gpu_redzone_scratch_max_megabytes(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_redzone_scratch_max_megabytes)
}

// bool xla_gpu_simplify_all_fp_conversions = 168;
inline void DebugOptions::clear_xla_gpu_simplify_all_fp_conversions() {
  xla_gpu_simplify_all_fp_conversions_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_simplify_all_fp_conversions() const {
  return xla_gpu_simplify_all_fp_conversions_;
}
inline bool DebugOptions::xla_gpu_simplify_all_fp_conversions() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_simplify_all_fp_conversions)
  return _internal_xla_gpu_simplify_all_fp_conversions();
}
inline void DebugOptions::_internal_set_xla_gpu_simplify_all_fp_conversions(bool value) {
  
  xla_gpu_simplify_all_fp_conversions_ = value;
}
inline void DebugOptions::set_xla_gpu_simplify_all_fp_conversions(bool value) {
  _internal_set_xla_gpu_simplify_all_fp_conversions(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_simplify_all_fp_conversions)
}

// bool xla_gpu_normalize_layouts = 172;
inline void DebugOptions::clear_xla_gpu_normalize_layouts() {
  xla_gpu_normalize_layouts_ = false;
}
inline bool DebugOptions::_internal_xla_gpu_normalize_layouts() const {
  return xla_gpu_normalize_layouts_;
}
inline bool DebugOptions::xla_gpu_normalize_layouts() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_gpu_normalize_layouts)
  return _internal_xla_gpu_normalize_layouts();
}
inline void DebugOptions::_internal_set_xla_gpu_normalize_layouts(bool value) {
  
  xla_gpu_normalize_layouts_ = value;
}
inline void DebugOptions::set_xla_gpu_normalize_layouts(bool value) {
  _internal_set_xla_gpu_normalize_layouts(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_gpu_normalize_layouts)
}

// bool xla_cpu_use_acl = 174;
inline void DebugOptions::clear_xla_cpu_use_acl() {
  xla_cpu_use_acl_ = false;
}
inline bool DebugOptions::_internal_xla_cpu_use_acl() const {
  return xla_cpu_use_acl_;
}
inline bool DebugOptions::xla_cpu_use_acl() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_cpu_use_acl)
  return _internal_xla_cpu_use_acl();
}
inline void DebugOptions::_internal_set_xla_cpu_use_acl(bool value) {
  
  xla_cpu_use_acl_ = value;
}
inline void DebugOptions::set_xla_cpu_use_acl(bool value) {
  _internal_set_xla_cpu_use_acl(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_cpu_use_acl)
}

// bool xla_cpu_strict_dot_conv_math = 175;
inline void DebugOptions::clear_xla_cpu_strict_dot_conv_math() {
  xla_cpu_strict_dot_conv_math_ = false;
}
inline bool DebugOptions::_internal_xla_cpu_strict_dot_conv_math() const {
  return xla_cpu_strict_dot_conv_math_;
}
inline bool DebugOptions::xla_cpu_strict_dot_conv_math() const {
  // @@protoc_insertion_point(field_get:xla.DebugOptions.xla_cpu_strict_dot_conv_math)
  return _internal_xla_cpu_strict_dot_conv_math();
}
inline void DebugOptions::_internal_set_xla_cpu_strict_dot_conv_math(bool value) {
  
  xla_cpu_strict_dot_conv_math_ = value;
}
inline void DebugOptions::set_xla_cpu_strict_dot_conv_math(bool value) {
  _internal_set_xla_cpu_strict_dot_conv_math(value);
  // @@protoc_insertion_point(field_set:xla.DebugOptions.xla_cpu_strict_dot_conv_math)
}

// map<string, string> xla_backend_extra_options = 500;
inline int DebugOptions::_internal_xla_backend_extra_options_size() const {
  return xla_backend_extra_options_.size();
}
inline int DebugOptions::xla_backend_extra_options_size() const {
  return _internal_xla_backend_extra_options_size();
}
inline void DebugOptions::clear_xla_backend_extra_options() {
  xla_backend_extra_options_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DebugOptions::_internal_xla_backend_extra_options() const {
  return xla_backend_extra_options_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DebugOptions::xla_backend_extra_options() const {
  // @@protoc_insertion_point(field_map:xla.DebugOptions.xla_backend_extra_options)
  return _internal_xla_backend_extra_options();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DebugOptions::_internal_mutable_xla_backend_extra_options() {
  return xla_backend_extra_options_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DebugOptions::mutable_xla_backend_extra_options() {
  // @@protoc_insertion_point(field_mutable_map:xla.DebugOptions.xla_backend_extra_options)
  return _internal_mutable_xla_backend_extra_options();
}

// -------------------------------------------------------------------

// ExecutionOptions

// .xla.ShapeProto shape_with_output_layout = 2;
inline bool ExecutionOptions::_internal_has_shape_with_output_layout() const {
  return this != internal_default_instance() && shape_with_output_layout_ != nullptr;
}
inline bool ExecutionOptions::has_shape_with_output_layout() const {
  return _internal_has_shape_with_output_layout();
}
inline const ::xla::ShapeProto& ExecutionOptions::_internal_shape_with_output_layout() const {
  const ::xla::ShapeProto* p = shape_with_output_layout_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ShapeProto&>(
      ::xla::_ShapeProto_default_instance_);
}
inline const ::xla::ShapeProto& ExecutionOptions::shape_with_output_layout() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.shape_with_output_layout)
  return _internal_shape_with_output_layout();
}
inline void ExecutionOptions::unsafe_arena_set_allocated_shape_with_output_layout(
    ::xla::ShapeProto* shape_with_output_layout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_with_output_layout_);
  }
  shape_with_output_layout_ = shape_with_output_layout;
  if (shape_with_output_layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ExecutionOptions.shape_with_output_layout)
}
inline ::xla::ShapeProto* ExecutionOptions::release_shape_with_output_layout() {
  
  ::xla::ShapeProto* temp = shape_with_output_layout_;
  shape_with_output_layout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ShapeProto* ExecutionOptions::unsafe_arena_release_shape_with_output_layout() {
  // @@protoc_insertion_point(field_release:xla.ExecutionOptions.shape_with_output_layout)
  
  ::xla::ShapeProto* temp = shape_with_output_layout_;
  shape_with_output_layout_ = nullptr;
  return temp;
}
inline ::xla::ShapeProto* ExecutionOptions::_internal_mutable_shape_with_output_layout() {
  
  if (shape_with_output_layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ShapeProto>(GetArenaForAllocation());
    shape_with_output_layout_ = p;
  }
  return shape_with_output_layout_;
}
inline ::xla::ShapeProto* ExecutionOptions::mutable_shape_with_output_layout() {
  ::xla::ShapeProto* _msg = _internal_mutable_shape_with_output_layout();
  // @@protoc_insertion_point(field_mutable:xla.ExecutionOptions.shape_with_output_layout)
  return _msg;
}
inline void ExecutionOptions::set_allocated_shape_with_output_layout(::xla::ShapeProto* shape_with_output_layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_with_output_layout_);
  }
  if (shape_with_output_layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_with_output_layout));
    if (message_arena != submessage_arena) {
      shape_with_output_layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape_with_output_layout, submessage_arena);
    }
    
  } else {
    
  }
  shape_with_output_layout_ = shape_with_output_layout;
  // @@protoc_insertion_point(field_set_allocated:xla.ExecutionOptions.shape_with_output_layout)
}

// uint64 seed = 3;
inline void ExecutionOptions::clear_seed() {
  seed_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExecutionOptions::_internal_seed() const {
  return seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExecutionOptions::seed() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.seed)
  return _internal_seed();
}
inline void ExecutionOptions::_internal_set_seed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seed_ = value;
}
inline void ExecutionOptions::set_seed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:xla.ExecutionOptions.seed)
}

// .xla.DebugOptions debug_options = 4;
inline bool ExecutionOptions::_internal_has_debug_options() const {
  return this != internal_default_instance() && debug_options_ != nullptr;
}
inline bool ExecutionOptions::has_debug_options() const {
  return _internal_has_debug_options();
}
inline void ExecutionOptions::clear_debug_options() {
  if (GetArenaForAllocation() == nullptr && debug_options_ != nullptr) {
    delete debug_options_;
  }
  debug_options_ = nullptr;
}
inline const ::xla::DebugOptions& ExecutionOptions::_internal_debug_options() const {
  const ::xla::DebugOptions* p = debug_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::DebugOptions&>(
      ::xla::_DebugOptions_default_instance_);
}
inline const ::xla::DebugOptions& ExecutionOptions::debug_options() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.debug_options)
  return _internal_debug_options();
}
inline void ExecutionOptions::unsafe_arena_set_allocated_debug_options(
    ::xla::DebugOptions* debug_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_options_);
  }
  debug_options_ = debug_options;
  if (debug_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ExecutionOptions.debug_options)
}
inline ::xla::DebugOptions* ExecutionOptions::release_debug_options() {
  
  ::xla::DebugOptions* temp = debug_options_;
  debug_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::DebugOptions* ExecutionOptions::unsafe_arena_release_debug_options() {
  // @@protoc_insertion_point(field_release:xla.ExecutionOptions.debug_options)
  
  ::xla::DebugOptions* temp = debug_options_;
  debug_options_ = nullptr;
  return temp;
}
inline ::xla::DebugOptions* ExecutionOptions::_internal_mutable_debug_options() {
  
  if (debug_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::DebugOptions>(GetArenaForAllocation());
    debug_options_ = p;
  }
  return debug_options_;
}
inline ::xla::DebugOptions* ExecutionOptions::mutable_debug_options() {
  ::xla::DebugOptions* _msg = _internal_mutable_debug_options();
  // @@protoc_insertion_point(field_mutable:xla.ExecutionOptions.debug_options)
  return _msg;
}
inline void ExecutionOptions::set_allocated_debug_options(::xla::DebugOptions* debug_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete debug_options_;
  }
  if (debug_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xla::DebugOptions>::GetOwningArena(debug_options);
    if (message_arena != submessage_arena) {
      debug_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_options, submessage_arena);
    }
    
  } else {
    
  }
  debug_options_ = debug_options;
  // @@protoc_insertion_point(field_set_allocated:xla.ExecutionOptions.debug_options)
}

// repeated .xla.DeviceHandle device_handles = 5;
inline int ExecutionOptions::_internal_device_handles_size() const {
  return device_handles_.size();
}
inline int ExecutionOptions::device_handles_size() const {
  return _internal_device_handles_size();
}
inline ::xla::DeviceHandle* ExecutionOptions::mutable_device_handles(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ExecutionOptions.device_handles)
  return device_handles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceHandle >*
ExecutionOptions::mutable_device_handles() {
  // @@protoc_insertion_point(field_mutable_list:xla.ExecutionOptions.device_handles)
  return &device_handles_;
}
inline const ::xla::DeviceHandle& ExecutionOptions::_internal_device_handles(int index) const {
  return device_handles_.Get(index);
}
inline const ::xla::DeviceHandle& ExecutionOptions::device_handles(int index) const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.device_handles)
  return _internal_device_handles(index);
}
inline ::xla::DeviceHandle* ExecutionOptions::_internal_add_device_handles() {
  return device_handles_.Add();
}
inline ::xla::DeviceHandle* ExecutionOptions::add_device_handles() {
  ::xla::DeviceHandle* _add = _internal_add_device_handles();
  // @@protoc_insertion_point(field_add:xla.ExecutionOptions.device_handles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceHandle >&
ExecutionOptions::device_handles() const {
  // @@protoc_insertion_point(field_list:xla.ExecutionOptions.device_handles)
  return device_handles_;
}

// int32 num_replicas = 6;
inline void ExecutionOptions::clear_num_replicas() {
  num_replicas_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecutionOptions::_internal_num_replicas() const {
  return num_replicas_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecutionOptions::num_replicas() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.num_replicas)
  return _internal_num_replicas();
}
inline void ExecutionOptions::_internal_set_num_replicas(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_replicas_ = value;
}
inline void ExecutionOptions::set_num_replicas(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_replicas(value);
  // @@protoc_insertion_point(field_set:xla.ExecutionOptions.num_replicas)
}

// .xla.DeviceAssignmentProto device_assignment = 7;
inline bool ExecutionOptions::_internal_has_device_assignment() const {
  return this != internal_default_instance() && device_assignment_ != nullptr;
}
inline bool ExecutionOptions::has_device_assignment() const {
  return _internal_has_device_assignment();
}
inline const ::xla::DeviceAssignmentProto& ExecutionOptions::_internal_device_assignment() const {
  const ::xla::DeviceAssignmentProto* p = device_assignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::DeviceAssignmentProto&>(
      ::xla::_DeviceAssignmentProto_default_instance_);
}
inline const ::xla::DeviceAssignmentProto& ExecutionOptions::device_assignment() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.device_assignment)
  return _internal_device_assignment();
}
inline void ExecutionOptions::unsafe_arena_set_allocated_device_assignment(
    ::xla::DeviceAssignmentProto* device_assignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_assignment_);
  }
  device_assignment_ = device_assignment;
  if (device_assignment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ExecutionOptions.device_assignment)
}
inline ::xla::DeviceAssignmentProto* ExecutionOptions::release_device_assignment() {
  
  ::xla::DeviceAssignmentProto* temp = device_assignment_;
  device_assignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::DeviceAssignmentProto* ExecutionOptions::unsafe_arena_release_device_assignment() {
  // @@protoc_insertion_point(field_release:xla.ExecutionOptions.device_assignment)
  
  ::xla::DeviceAssignmentProto* temp = device_assignment_;
  device_assignment_ = nullptr;
  return temp;
}
inline ::xla::DeviceAssignmentProto* ExecutionOptions::_internal_mutable_device_assignment() {
  
  if (device_assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::DeviceAssignmentProto>(GetArenaForAllocation());
    device_assignment_ = p;
  }
  return device_assignment_;
}
inline ::xla::DeviceAssignmentProto* ExecutionOptions::mutable_device_assignment() {
  ::xla::DeviceAssignmentProto* _msg = _internal_mutable_device_assignment();
  // @@protoc_insertion_point(field_mutable:xla.ExecutionOptions.device_assignment)
  return _msg;
}
inline void ExecutionOptions::set_allocated_device_assignment(::xla::DeviceAssignmentProto* device_assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_assignment_);
  }
  if (device_assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_assignment));
    if (message_arena != submessage_arena) {
      device_assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_assignment, submessage_arena);
    }
    
  } else {
    
  }
  device_assignment_ = device_assignment;
  // @@protoc_insertion_point(field_set_allocated:xla.ExecutionOptions.device_assignment)
}

// bool alias_passthrough_params = 8;
inline void ExecutionOptions::clear_alias_passthrough_params() {
  alias_passthrough_params_ = false;
}
inline bool ExecutionOptions::_internal_alias_passthrough_params() const {
  return alias_passthrough_params_;
}
inline bool ExecutionOptions::alias_passthrough_params() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.alias_passthrough_params)
  return _internal_alias_passthrough_params();
}
inline void ExecutionOptions::_internal_set_alias_passthrough_params(bool value) {
  
  alias_passthrough_params_ = value;
}
inline void ExecutionOptions::set_alias_passthrough_params(bool value) {
  _internal_set_alias_passthrough_params(value);
  // @@protoc_insertion_point(field_set:xla.ExecutionOptions.alias_passthrough_params)
}

// int32 num_partitions = 9;
inline void ExecutionOptions::clear_num_partitions() {
  num_partitions_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecutionOptions::_internal_num_partitions() const {
  return num_partitions_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecutionOptions::num_partitions() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.num_partitions)
  return _internal_num_partitions();
}
inline void ExecutionOptions::_internal_set_num_partitions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_partitions_ = value;
}
inline void ExecutionOptions::set_num_partitions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_partitions(value);
  // @@protoc_insertion_point(field_set:xla.ExecutionOptions.num_partitions)
}

// int32 launch_id = 10;
inline void ExecutionOptions::clear_launch_id() {
  launch_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecutionOptions::_internal_launch_id() const {
  return launch_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecutionOptions::launch_id() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.launch_id)
  return _internal_launch_id();
}
inline void ExecutionOptions::_internal_set_launch_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  launch_id_ = value;
}
inline void ExecutionOptions::set_launch_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_launch_id(value);
  // @@protoc_insertion_point(field_set:xla.ExecutionOptions.launch_id)
}

// bool use_spmd_partitioning = 11;
inline void ExecutionOptions::clear_use_spmd_partitioning() {
  use_spmd_partitioning_ = false;
}
inline bool ExecutionOptions::_internal_use_spmd_partitioning() const {
  return use_spmd_partitioning_;
}
inline bool ExecutionOptions::use_spmd_partitioning() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.use_spmd_partitioning)
  return _internal_use_spmd_partitioning();
}
inline void ExecutionOptions::_internal_set_use_spmd_partitioning(bool value) {
  
  use_spmd_partitioning_ = value;
}
inline void ExecutionOptions::set_use_spmd_partitioning(bool value) {
  _internal_set_use_spmd_partitioning(value);
  // @@protoc_insertion_point(field_set:xla.ExecutionOptions.use_spmd_partitioning)
}

// bool use_auto_spmd_partitioning = 15;
inline void ExecutionOptions::clear_use_auto_spmd_partitioning() {
  use_auto_spmd_partitioning_ = false;
}
inline bool ExecutionOptions::_internal_use_auto_spmd_partitioning() const {
  return use_auto_spmd_partitioning_;
}
inline bool ExecutionOptions::use_auto_spmd_partitioning() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.use_auto_spmd_partitioning)
  return _internal_use_auto_spmd_partitioning();
}
inline void ExecutionOptions::_internal_set_use_auto_spmd_partitioning(bool value) {
  
  use_auto_spmd_partitioning_ = value;
}
inline void ExecutionOptions::set_use_auto_spmd_partitioning(bool value) {
  _internal_set_use_auto_spmd_partitioning(value);
  // @@protoc_insertion_point(field_set:xla.ExecutionOptions.use_auto_spmd_partitioning)
}

// repeated int64 auto_spmd_partitioning_mesh_shape = 16;
inline int ExecutionOptions::_internal_auto_spmd_partitioning_mesh_shape_size() const {
  return auto_spmd_partitioning_mesh_shape_.size();
}
inline int ExecutionOptions::auto_spmd_partitioning_mesh_shape_size() const {
  return _internal_auto_spmd_partitioning_mesh_shape_size();
}
inline void ExecutionOptions::clear_auto_spmd_partitioning_mesh_shape() {
  auto_spmd_partitioning_mesh_shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecutionOptions::_internal_auto_spmd_partitioning_mesh_shape(int index) const {
  return auto_spmd_partitioning_mesh_shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecutionOptions::auto_spmd_partitioning_mesh_shape(int index) const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.auto_spmd_partitioning_mesh_shape)
  return _internal_auto_spmd_partitioning_mesh_shape(index);
}
inline void ExecutionOptions::set_auto_spmd_partitioning_mesh_shape(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  auto_spmd_partitioning_mesh_shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.ExecutionOptions.auto_spmd_partitioning_mesh_shape)
}
inline void ExecutionOptions::_internal_add_auto_spmd_partitioning_mesh_shape(::PROTOBUF_NAMESPACE_ID::int64 value) {
  auto_spmd_partitioning_mesh_shape_.Add(value);
}
inline void ExecutionOptions::add_auto_spmd_partitioning_mesh_shape(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_auto_spmd_partitioning_mesh_shape(value);
  // @@protoc_insertion_point(field_add:xla.ExecutionOptions.auto_spmd_partitioning_mesh_shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ExecutionOptions::_internal_auto_spmd_partitioning_mesh_shape() const {
  return auto_spmd_partitioning_mesh_shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ExecutionOptions::auto_spmd_partitioning_mesh_shape() const {
  // @@protoc_insertion_point(field_list:xla.ExecutionOptions.auto_spmd_partitioning_mesh_shape)
  return _internal_auto_spmd_partitioning_mesh_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ExecutionOptions::_internal_mutable_auto_spmd_partitioning_mesh_shape() {
  return &auto_spmd_partitioning_mesh_shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ExecutionOptions::mutable_auto_spmd_partitioning_mesh_shape() {
  // @@protoc_insertion_point(field_mutable_list:xla.ExecutionOptions.auto_spmd_partitioning_mesh_shape)
  return _internal_mutable_auto_spmd_partitioning_mesh_shape();
}

// repeated int64 auto_spmd_partitioning_mesh_ids = 17;
inline int ExecutionOptions::_internal_auto_spmd_partitioning_mesh_ids_size() const {
  return auto_spmd_partitioning_mesh_ids_.size();
}
inline int ExecutionOptions::auto_spmd_partitioning_mesh_ids_size() const {
  return _internal_auto_spmd_partitioning_mesh_ids_size();
}
inline void ExecutionOptions::clear_auto_spmd_partitioning_mesh_ids() {
  auto_spmd_partitioning_mesh_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecutionOptions::_internal_auto_spmd_partitioning_mesh_ids(int index) const {
  return auto_spmd_partitioning_mesh_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecutionOptions::auto_spmd_partitioning_mesh_ids(int index) const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.auto_spmd_partitioning_mesh_ids)
  return _internal_auto_spmd_partitioning_mesh_ids(index);
}
inline void ExecutionOptions::set_auto_spmd_partitioning_mesh_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  auto_spmd_partitioning_mesh_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.ExecutionOptions.auto_spmd_partitioning_mesh_ids)
}
inline void ExecutionOptions::_internal_add_auto_spmd_partitioning_mesh_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  auto_spmd_partitioning_mesh_ids_.Add(value);
}
inline void ExecutionOptions::add_auto_spmd_partitioning_mesh_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_auto_spmd_partitioning_mesh_ids(value);
  // @@protoc_insertion_point(field_add:xla.ExecutionOptions.auto_spmd_partitioning_mesh_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ExecutionOptions::_internal_auto_spmd_partitioning_mesh_ids() const {
  return auto_spmd_partitioning_mesh_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ExecutionOptions::auto_spmd_partitioning_mesh_ids() const {
  // @@protoc_insertion_point(field_list:xla.ExecutionOptions.auto_spmd_partitioning_mesh_ids)
  return _internal_auto_spmd_partitioning_mesh_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ExecutionOptions::_internal_mutable_auto_spmd_partitioning_mesh_ids() {
  return &auto_spmd_partitioning_mesh_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ExecutionOptions::mutable_auto_spmd_partitioning_mesh_ids() {
  // @@protoc_insertion_point(field_mutable_list:xla.ExecutionOptions.auto_spmd_partitioning_mesh_ids)
  return _internal_mutable_auto_spmd_partitioning_mesh_ids();
}

// bool deduplicate_hlo = 12;
inline void ExecutionOptions::clear_deduplicate_hlo() {
  deduplicate_hlo_ = false;
}
inline bool ExecutionOptions::_internal_deduplicate_hlo() const {
  return deduplicate_hlo_;
}
inline bool ExecutionOptions::deduplicate_hlo() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.deduplicate_hlo)
  return _internal_deduplicate_hlo();
}
inline void ExecutionOptions::_internal_set_deduplicate_hlo(bool value) {
  
  deduplicate_hlo_ = value;
}
inline void ExecutionOptions::set_deduplicate_hlo(bool value) {
  _internal_set_deduplicate_hlo(value);
  // @@protoc_insertion_point(field_set:xla.ExecutionOptions.deduplicate_hlo)
}

// bool allow_spmd_sharding_propagation_to_output = 14;
inline void ExecutionOptions::clear_allow_spmd_sharding_propagation_to_output() {
  allow_spmd_sharding_propagation_to_output_ = false;
}
inline bool ExecutionOptions::_internal_allow_spmd_sharding_propagation_to_output() const {
  return allow_spmd_sharding_propagation_to_output_;
}
inline bool ExecutionOptions::allow_spmd_sharding_propagation_to_output() const {
  // @@protoc_insertion_point(field_get:xla.ExecutionOptions.allow_spmd_sharding_propagation_to_output)
  return _internal_allow_spmd_sharding_propagation_to_output();
}
inline void ExecutionOptions::_internal_set_allow_spmd_sharding_propagation_to_output(bool value) {
  
  allow_spmd_sharding_propagation_to_output_ = value;
}
inline void ExecutionOptions::set_allow_spmd_sharding_propagation_to_output(bool value) {
  _internal_set_allow_spmd_sharding_propagation_to_output(value);
  // @@protoc_insertion_point(field_set:xla.ExecutionOptions.allow_spmd_sharding_propagation_to_output)
}

// -------------------------------------------------------------------

// GetDeviceHandlesRequest

// int64 device_count = 1;
inline void GetDeviceHandlesRequest::clear_device_count() {
  device_count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDeviceHandlesRequest::_internal_device_count() const {
  return device_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDeviceHandlesRequest::device_count() const {
  // @@protoc_insertion_point(field_get:xla.GetDeviceHandlesRequest.device_count)
  return _internal_device_count();
}
inline void GetDeviceHandlesRequest::_internal_set_device_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  device_count_ = value;
}
inline void GetDeviceHandlesRequest::set_device_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_device_count(value);
  // @@protoc_insertion_point(field_set:xla.GetDeviceHandlesRequest.device_count)
}

// -------------------------------------------------------------------

// GetDeviceHandlesResponse

// repeated .xla.DeviceHandle device_handles = 1;
inline int GetDeviceHandlesResponse::_internal_device_handles_size() const {
  return device_handles_.size();
}
inline int GetDeviceHandlesResponse::device_handles_size() const {
  return _internal_device_handles_size();
}
inline ::xla::DeviceHandle* GetDeviceHandlesResponse::mutable_device_handles(int index) {
  // @@protoc_insertion_point(field_mutable:xla.GetDeviceHandlesResponse.device_handles)
  return device_handles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceHandle >*
GetDeviceHandlesResponse::mutable_device_handles() {
  // @@protoc_insertion_point(field_mutable_list:xla.GetDeviceHandlesResponse.device_handles)
  return &device_handles_;
}
inline const ::xla::DeviceHandle& GetDeviceHandlesResponse::_internal_device_handles(int index) const {
  return device_handles_.Get(index);
}
inline const ::xla::DeviceHandle& GetDeviceHandlesResponse::device_handles(int index) const {
  // @@protoc_insertion_point(field_get:xla.GetDeviceHandlesResponse.device_handles)
  return _internal_device_handles(index);
}
inline ::xla::DeviceHandle* GetDeviceHandlesResponse::_internal_add_device_handles() {
  return device_handles_.Add();
}
inline ::xla::DeviceHandle* GetDeviceHandlesResponse::add_device_handles() {
  ::xla::DeviceHandle* _add = _internal_add_device_handles();
  // @@protoc_insertion_point(field_add:xla.GetDeviceHandlesResponse.device_handles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceHandle >&
GetDeviceHandlesResponse::device_handles() const {
  // @@protoc_insertion_point(field_list:xla.GetDeviceHandlesResponse.device_handles)
  return device_handles_;
}

// -------------------------------------------------------------------

// TransferToClientRequest

// .xla.GlobalDataHandle data = 1;
inline bool TransferToClientRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool TransferToClientRequest::has_data() const {
  return _internal_has_data();
}
inline const ::xla::GlobalDataHandle& TransferToClientRequest::_internal_data() const {
  const ::xla::GlobalDataHandle* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::GlobalDataHandle&>(
      ::xla::_GlobalDataHandle_default_instance_);
}
inline const ::xla::GlobalDataHandle& TransferToClientRequest::data() const {
  // @@protoc_insertion_point(field_get:xla.TransferToClientRequest.data)
  return _internal_data();
}
inline void TransferToClientRequest::unsafe_arena_set_allocated_data(
    ::xla::GlobalDataHandle* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TransferToClientRequest.data)
}
inline ::xla::GlobalDataHandle* TransferToClientRequest::release_data() {
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::GlobalDataHandle* TransferToClientRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:xla.TransferToClientRequest.data)
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::xla::GlobalDataHandle* TransferToClientRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::GlobalDataHandle>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::xla::GlobalDataHandle* TransferToClientRequest::mutable_data() {
  ::xla::GlobalDataHandle* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:xla.TransferToClientRequest.data)
  return _msg;
}
inline void TransferToClientRequest::set_allocated_data(::xla::GlobalDataHandle* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToClientRequest.data)
}

// .xla.ShapeProto shape_with_layout = 2;
inline bool TransferToClientRequest::_internal_has_shape_with_layout() const {
  return this != internal_default_instance() && shape_with_layout_ != nullptr;
}
inline bool TransferToClientRequest::has_shape_with_layout() const {
  return _internal_has_shape_with_layout();
}
inline const ::xla::ShapeProto& TransferToClientRequest::_internal_shape_with_layout() const {
  const ::xla::ShapeProto* p = shape_with_layout_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ShapeProto&>(
      ::xla::_ShapeProto_default_instance_);
}
inline const ::xla::ShapeProto& TransferToClientRequest::shape_with_layout() const {
  // @@protoc_insertion_point(field_get:xla.TransferToClientRequest.shape_with_layout)
  return _internal_shape_with_layout();
}
inline void TransferToClientRequest::unsafe_arena_set_allocated_shape_with_layout(
    ::xla::ShapeProto* shape_with_layout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_with_layout_);
  }
  shape_with_layout_ = shape_with_layout;
  if (shape_with_layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TransferToClientRequest.shape_with_layout)
}
inline ::xla::ShapeProto* TransferToClientRequest::release_shape_with_layout() {
  
  ::xla::ShapeProto* temp = shape_with_layout_;
  shape_with_layout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ShapeProto* TransferToClientRequest::unsafe_arena_release_shape_with_layout() {
  // @@protoc_insertion_point(field_release:xla.TransferToClientRequest.shape_with_layout)
  
  ::xla::ShapeProto* temp = shape_with_layout_;
  shape_with_layout_ = nullptr;
  return temp;
}
inline ::xla::ShapeProto* TransferToClientRequest::_internal_mutable_shape_with_layout() {
  
  if (shape_with_layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ShapeProto>(GetArenaForAllocation());
    shape_with_layout_ = p;
  }
  return shape_with_layout_;
}
inline ::xla::ShapeProto* TransferToClientRequest::mutable_shape_with_layout() {
  ::xla::ShapeProto* _msg = _internal_mutable_shape_with_layout();
  // @@protoc_insertion_point(field_mutable:xla.TransferToClientRequest.shape_with_layout)
  return _msg;
}
inline void TransferToClientRequest::set_allocated_shape_with_layout(::xla::ShapeProto* shape_with_layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_with_layout_);
  }
  if (shape_with_layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_with_layout));
    if (message_arena != submessage_arena) {
      shape_with_layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape_with_layout, submessage_arena);
    }
    
  } else {
    
  }
  shape_with_layout_ = shape_with_layout;
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToClientRequest.shape_with_layout)
}

// -------------------------------------------------------------------

// TransferToClientResponse

// .xla.LiteralProto literal = 1;
inline bool TransferToClientResponse::_internal_has_literal() const {
  return this != internal_default_instance() && literal_ != nullptr;
}
inline bool TransferToClientResponse::has_literal() const {
  return _internal_has_literal();
}
inline const ::xla::LiteralProto& TransferToClientResponse::_internal_literal() const {
  const ::xla::LiteralProto* p = literal_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::LiteralProto&>(
      ::xla::_LiteralProto_default_instance_);
}
inline const ::xla::LiteralProto& TransferToClientResponse::literal() const {
  // @@protoc_insertion_point(field_get:xla.TransferToClientResponse.literal)
  return _internal_literal();
}
inline void TransferToClientResponse::unsafe_arena_set_allocated_literal(
    ::xla::LiteralProto* literal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal_);
  }
  literal_ = literal;
  if (literal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TransferToClientResponse.literal)
}
inline ::xla::LiteralProto* TransferToClientResponse::release_literal() {
  
  ::xla::LiteralProto* temp = literal_;
  literal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::LiteralProto* TransferToClientResponse::unsafe_arena_release_literal() {
  // @@protoc_insertion_point(field_release:xla.TransferToClientResponse.literal)
  
  ::xla::LiteralProto* temp = literal_;
  literal_ = nullptr;
  return temp;
}
inline ::xla::LiteralProto* TransferToClientResponse::_internal_mutable_literal() {
  
  if (literal_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::LiteralProto>(GetArenaForAllocation());
    literal_ = p;
  }
  return literal_;
}
inline ::xla::LiteralProto* TransferToClientResponse::mutable_literal() {
  ::xla::LiteralProto* _msg = _internal_mutable_literal();
  // @@protoc_insertion_point(field_mutable:xla.TransferToClientResponse.literal)
  return _msg;
}
inline void TransferToClientResponse::set_allocated_literal(::xla::LiteralProto* literal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal_);
  }
  if (literal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal));
    if (message_arena != submessage_arena) {
      literal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, literal, submessage_arena);
    }
    
  } else {
    
  }
  literal_ = literal;
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToClientResponse.literal)
}

// -------------------------------------------------------------------

// TransferToServerRequest

// .xla.LiteralProto literal = 1;
inline bool TransferToServerRequest::_internal_has_literal() const {
  return this != internal_default_instance() && literal_ != nullptr;
}
inline bool TransferToServerRequest::has_literal() const {
  return _internal_has_literal();
}
inline const ::xla::LiteralProto& TransferToServerRequest::_internal_literal() const {
  const ::xla::LiteralProto* p = literal_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::LiteralProto&>(
      ::xla::_LiteralProto_default_instance_);
}
inline const ::xla::LiteralProto& TransferToServerRequest::literal() const {
  // @@protoc_insertion_point(field_get:xla.TransferToServerRequest.literal)
  return _internal_literal();
}
inline void TransferToServerRequest::unsafe_arena_set_allocated_literal(
    ::xla::LiteralProto* literal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal_);
  }
  literal_ = literal;
  if (literal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TransferToServerRequest.literal)
}
inline ::xla::LiteralProto* TransferToServerRequest::release_literal() {
  
  ::xla::LiteralProto* temp = literal_;
  literal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::LiteralProto* TransferToServerRequest::unsafe_arena_release_literal() {
  // @@protoc_insertion_point(field_release:xla.TransferToServerRequest.literal)
  
  ::xla::LiteralProto* temp = literal_;
  literal_ = nullptr;
  return temp;
}
inline ::xla::LiteralProto* TransferToServerRequest::_internal_mutable_literal() {
  
  if (literal_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::LiteralProto>(GetArenaForAllocation());
    literal_ = p;
  }
  return literal_;
}
inline ::xla::LiteralProto* TransferToServerRequest::mutable_literal() {
  ::xla::LiteralProto* _msg = _internal_mutable_literal();
  // @@protoc_insertion_point(field_mutable:xla.TransferToServerRequest.literal)
  return _msg;
}
inline void TransferToServerRequest::set_allocated_literal(::xla::LiteralProto* literal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal_);
  }
  if (literal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal));
    if (message_arena != submessage_arena) {
      literal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, literal, submessage_arena);
    }
    
  } else {
    
  }
  literal_ = literal;
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToServerRequest.literal)
}

// .xla.DeviceHandle device_handle = 2;
inline bool TransferToServerRequest::_internal_has_device_handle() const {
  return this != internal_default_instance() && device_handle_ != nullptr;
}
inline bool TransferToServerRequest::has_device_handle() const {
  return _internal_has_device_handle();
}
inline const ::xla::DeviceHandle& TransferToServerRequest::_internal_device_handle() const {
  const ::xla::DeviceHandle* p = device_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::DeviceHandle&>(
      ::xla::_DeviceHandle_default_instance_);
}
inline const ::xla::DeviceHandle& TransferToServerRequest::device_handle() const {
  // @@protoc_insertion_point(field_get:xla.TransferToServerRequest.device_handle)
  return _internal_device_handle();
}
inline void TransferToServerRequest::unsafe_arena_set_allocated_device_handle(
    ::xla::DeviceHandle* device_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_handle_);
  }
  device_handle_ = device_handle;
  if (device_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TransferToServerRequest.device_handle)
}
inline ::xla::DeviceHandle* TransferToServerRequest::release_device_handle() {
  
  ::xla::DeviceHandle* temp = device_handle_;
  device_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::DeviceHandle* TransferToServerRequest::unsafe_arena_release_device_handle() {
  // @@protoc_insertion_point(field_release:xla.TransferToServerRequest.device_handle)
  
  ::xla::DeviceHandle* temp = device_handle_;
  device_handle_ = nullptr;
  return temp;
}
inline ::xla::DeviceHandle* TransferToServerRequest::_internal_mutable_device_handle() {
  
  if (device_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::DeviceHandle>(GetArenaForAllocation());
    device_handle_ = p;
  }
  return device_handle_;
}
inline ::xla::DeviceHandle* TransferToServerRequest::mutable_device_handle() {
  ::xla::DeviceHandle* _msg = _internal_mutable_device_handle();
  // @@protoc_insertion_point(field_mutable:xla.TransferToServerRequest.device_handle)
  return _msg;
}
inline void TransferToServerRequest::set_allocated_device_handle(::xla::DeviceHandle* device_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_handle_);
  }
  if (device_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_handle));
    if (message_arena != submessage_arena) {
      device_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_handle, submessage_arena);
    }
    
  } else {
    
  }
  device_handle_ = device_handle;
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToServerRequest.device_handle)
}

// -------------------------------------------------------------------

// TransferToServerResponse

// .xla.GlobalDataHandle data = 1;
inline bool TransferToServerResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool TransferToServerResponse::has_data() const {
  return _internal_has_data();
}
inline const ::xla::GlobalDataHandle& TransferToServerResponse::_internal_data() const {
  const ::xla::GlobalDataHandle* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::GlobalDataHandle&>(
      ::xla::_GlobalDataHandle_default_instance_);
}
inline const ::xla::GlobalDataHandle& TransferToServerResponse::data() const {
  // @@protoc_insertion_point(field_get:xla.TransferToServerResponse.data)
  return _internal_data();
}
inline void TransferToServerResponse::unsafe_arena_set_allocated_data(
    ::xla::GlobalDataHandle* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TransferToServerResponse.data)
}
inline ::xla::GlobalDataHandle* TransferToServerResponse::release_data() {
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::GlobalDataHandle* TransferToServerResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:xla.TransferToServerResponse.data)
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::xla::GlobalDataHandle* TransferToServerResponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::GlobalDataHandle>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::xla::GlobalDataHandle* TransferToServerResponse::mutable_data() {
  ::xla::GlobalDataHandle* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:xla.TransferToServerResponse.data)
  return _msg;
}
inline void TransferToServerResponse::set_allocated_data(::xla::GlobalDataHandle* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToServerResponse.data)
}

// -------------------------------------------------------------------

// TransferToInfeedRequest

// .xla.LiteralProto literal = 1;
inline bool TransferToInfeedRequest::_internal_has_literal() const {
  return this != internal_default_instance() && literal_ != nullptr;
}
inline bool TransferToInfeedRequest::has_literal() const {
  return _internal_has_literal();
}
inline const ::xla::LiteralProto& TransferToInfeedRequest::_internal_literal() const {
  const ::xla::LiteralProto* p = literal_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::LiteralProto&>(
      ::xla::_LiteralProto_default_instance_);
}
inline const ::xla::LiteralProto& TransferToInfeedRequest::literal() const {
  // @@protoc_insertion_point(field_get:xla.TransferToInfeedRequest.literal)
  return _internal_literal();
}
inline void TransferToInfeedRequest::unsafe_arena_set_allocated_literal(
    ::xla::LiteralProto* literal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal_);
  }
  literal_ = literal;
  if (literal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TransferToInfeedRequest.literal)
}
inline ::xla::LiteralProto* TransferToInfeedRequest::release_literal() {
  
  ::xla::LiteralProto* temp = literal_;
  literal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::LiteralProto* TransferToInfeedRequest::unsafe_arena_release_literal() {
  // @@protoc_insertion_point(field_release:xla.TransferToInfeedRequest.literal)
  
  ::xla::LiteralProto* temp = literal_;
  literal_ = nullptr;
  return temp;
}
inline ::xla::LiteralProto* TransferToInfeedRequest::_internal_mutable_literal() {
  
  if (literal_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::LiteralProto>(GetArenaForAllocation());
    literal_ = p;
  }
  return literal_;
}
inline ::xla::LiteralProto* TransferToInfeedRequest::mutable_literal() {
  ::xla::LiteralProto* _msg = _internal_mutable_literal();
  // @@protoc_insertion_point(field_mutable:xla.TransferToInfeedRequest.literal)
  return _msg;
}
inline void TransferToInfeedRequest::set_allocated_literal(::xla::LiteralProto* literal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal_);
  }
  if (literal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal));
    if (message_arena != submessage_arena) {
      literal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, literal, submessage_arena);
    }
    
  } else {
    
  }
  literal_ = literal;
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToInfeedRequest.literal)
}

// int64 replica_id = 2;
inline void TransferToInfeedRequest::clear_replica_id() {
  replica_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransferToInfeedRequest::_internal_replica_id() const {
  return replica_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransferToInfeedRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:xla.TransferToInfeedRequest.replica_id)
  return _internal_replica_id();
}
inline void TransferToInfeedRequest::_internal_set_replica_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  replica_id_ = value;
}
inline void TransferToInfeedRequest::set_replica_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:xla.TransferToInfeedRequest.replica_id)
}

// .xla.DeviceHandle device_handle = 3;
inline bool TransferToInfeedRequest::_internal_has_device_handle() const {
  return this != internal_default_instance() && device_handle_ != nullptr;
}
inline bool TransferToInfeedRequest::has_device_handle() const {
  return _internal_has_device_handle();
}
inline const ::xla::DeviceHandle& TransferToInfeedRequest::_internal_device_handle() const {
  const ::xla::DeviceHandle* p = device_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::DeviceHandle&>(
      ::xla::_DeviceHandle_default_instance_);
}
inline const ::xla::DeviceHandle& TransferToInfeedRequest::device_handle() const {
  // @@protoc_insertion_point(field_get:xla.TransferToInfeedRequest.device_handle)
  return _internal_device_handle();
}
inline void TransferToInfeedRequest::unsafe_arena_set_allocated_device_handle(
    ::xla::DeviceHandle* device_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_handle_);
  }
  device_handle_ = device_handle;
  if (device_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TransferToInfeedRequest.device_handle)
}
inline ::xla::DeviceHandle* TransferToInfeedRequest::release_device_handle() {
  
  ::xla::DeviceHandle* temp = device_handle_;
  device_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::DeviceHandle* TransferToInfeedRequest::unsafe_arena_release_device_handle() {
  // @@protoc_insertion_point(field_release:xla.TransferToInfeedRequest.device_handle)
  
  ::xla::DeviceHandle* temp = device_handle_;
  device_handle_ = nullptr;
  return temp;
}
inline ::xla::DeviceHandle* TransferToInfeedRequest::_internal_mutable_device_handle() {
  
  if (device_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::DeviceHandle>(GetArenaForAllocation());
    device_handle_ = p;
  }
  return device_handle_;
}
inline ::xla::DeviceHandle* TransferToInfeedRequest::mutable_device_handle() {
  ::xla::DeviceHandle* _msg = _internal_mutable_device_handle();
  // @@protoc_insertion_point(field_mutable:xla.TransferToInfeedRequest.device_handle)
  return _msg;
}
inline void TransferToInfeedRequest::set_allocated_device_handle(::xla::DeviceHandle* device_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_handle_);
  }
  if (device_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_handle));
    if (message_arena != submessage_arena) {
      device_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_handle, submessage_arena);
    }
    
  } else {
    
  }
  device_handle_ = device_handle;
  // @@protoc_insertion_point(field_set_allocated:xla.TransferToInfeedRequest.device_handle)
}

// -------------------------------------------------------------------

// TransferToInfeedResponse

// -------------------------------------------------------------------

// TransferFromOutfeedRequest

// .xla.ShapeProto shape_with_layout = 1;
inline bool TransferFromOutfeedRequest::_internal_has_shape_with_layout() const {
  return this != internal_default_instance() && shape_with_layout_ != nullptr;
}
inline bool TransferFromOutfeedRequest::has_shape_with_layout() const {
  return _internal_has_shape_with_layout();
}
inline const ::xla::ShapeProto& TransferFromOutfeedRequest::_internal_shape_with_layout() const {
  const ::xla::ShapeProto* p = shape_with_layout_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ShapeProto&>(
      ::xla::_ShapeProto_default_instance_);
}
inline const ::xla::ShapeProto& TransferFromOutfeedRequest::shape_with_layout() const {
  // @@protoc_insertion_point(field_get:xla.TransferFromOutfeedRequest.shape_with_layout)
  return _internal_shape_with_layout();
}
inline void TransferFromOutfeedRequest::unsafe_arena_set_allocated_shape_with_layout(
    ::xla::ShapeProto* shape_with_layout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_with_layout_);
  }
  shape_with_layout_ = shape_with_layout;
  if (shape_with_layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TransferFromOutfeedRequest.shape_with_layout)
}
inline ::xla::ShapeProto* TransferFromOutfeedRequest::release_shape_with_layout() {
  
  ::xla::ShapeProto* temp = shape_with_layout_;
  shape_with_layout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ShapeProto* TransferFromOutfeedRequest::unsafe_arena_release_shape_with_layout() {
  // @@protoc_insertion_point(field_release:xla.TransferFromOutfeedRequest.shape_with_layout)
  
  ::xla::ShapeProto* temp = shape_with_layout_;
  shape_with_layout_ = nullptr;
  return temp;
}
inline ::xla::ShapeProto* TransferFromOutfeedRequest::_internal_mutable_shape_with_layout() {
  
  if (shape_with_layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ShapeProto>(GetArenaForAllocation());
    shape_with_layout_ = p;
  }
  return shape_with_layout_;
}
inline ::xla::ShapeProto* TransferFromOutfeedRequest::mutable_shape_with_layout() {
  ::xla::ShapeProto* _msg = _internal_mutable_shape_with_layout();
  // @@protoc_insertion_point(field_mutable:xla.TransferFromOutfeedRequest.shape_with_layout)
  return _msg;
}
inline void TransferFromOutfeedRequest::set_allocated_shape_with_layout(::xla::ShapeProto* shape_with_layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_with_layout_);
  }
  if (shape_with_layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_with_layout));
    if (message_arena != submessage_arena) {
      shape_with_layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape_with_layout, submessage_arena);
    }
    
  } else {
    
  }
  shape_with_layout_ = shape_with_layout;
  // @@protoc_insertion_point(field_set_allocated:xla.TransferFromOutfeedRequest.shape_with_layout)
}

// int64 replica_id = 2;
inline void TransferFromOutfeedRequest::clear_replica_id() {
  replica_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransferFromOutfeedRequest::_internal_replica_id() const {
  return replica_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransferFromOutfeedRequest::replica_id() const {
  // @@protoc_insertion_point(field_get:xla.TransferFromOutfeedRequest.replica_id)
  return _internal_replica_id();
}
inline void TransferFromOutfeedRequest::_internal_set_replica_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  replica_id_ = value;
}
inline void TransferFromOutfeedRequest::set_replica_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_replica_id(value);
  // @@protoc_insertion_point(field_set:xla.TransferFromOutfeedRequest.replica_id)
}

// .xla.DeviceHandle device_handle = 3;
inline bool TransferFromOutfeedRequest::_internal_has_device_handle() const {
  return this != internal_default_instance() && device_handle_ != nullptr;
}
inline bool TransferFromOutfeedRequest::has_device_handle() const {
  return _internal_has_device_handle();
}
inline const ::xla::DeviceHandle& TransferFromOutfeedRequest::_internal_device_handle() const {
  const ::xla::DeviceHandle* p = device_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::DeviceHandle&>(
      ::xla::_DeviceHandle_default_instance_);
}
inline const ::xla::DeviceHandle& TransferFromOutfeedRequest::device_handle() const {
  // @@protoc_insertion_point(field_get:xla.TransferFromOutfeedRequest.device_handle)
  return _internal_device_handle();
}
inline void TransferFromOutfeedRequest::unsafe_arena_set_allocated_device_handle(
    ::xla::DeviceHandle* device_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_handle_);
  }
  device_handle_ = device_handle;
  if (device_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TransferFromOutfeedRequest.device_handle)
}
inline ::xla::DeviceHandle* TransferFromOutfeedRequest::release_device_handle() {
  
  ::xla::DeviceHandle* temp = device_handle_;
  device_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::DeviceHandle* TransferFromOutfeedRequest::unsafe_arena_release_device_handle() {
  // @@protoc_insertion_point(field_release:xla.TransferFromOutfeedRequest.device_handle)
  
  ::xla::DeviceHandle* temp = device_handle_;
  device_handle_ = nullptr;
  return temp;
}
inline ::xla::DeviceHandle* TransferFromOutfeedRequest::_internal_mutable_device_handle() {
  
  if (device_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::DeviceHandle>(GetArenaForAllocation());
    device_handle_ = p;
  }
  return device_handle_;
}
inline ::xla::DeviceHandle* TransferFromOutfeedRequest::mutable_device_handle() {
  ::xla::DeviceHandle* _msg = _internal_mutable_device_handle();
  // @@protoc_insertion_point(field_mutable:xla.TransferFromOutfeedRequest.device_handle)
  return _msg;
}
inline void TransferFromOutfeedRequest::set_allocated_device_handle(::xla::DeviceHandle* device_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_handle_);
  }
  if (device_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_handle));
    if (message_arena != submessage_arena) {
      device_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_handle, submessage_arena);
    }
    
  } else {
    
  }
  device_handle_ = device_handle;
  // @@protoc_insertion_point(field_set_allocated:xla.TransferFromOutfeedRequest.device_handle)
}

// -------------------------------------------------------------------

// TransferFromOutfeedResponse

// .xla.LiteralProto literal = 1;
inline bool TransferFromOutfeedResponse::_internal_has_literal() const {
  return this != internal_default_instance() && literal_ != nullptr;
}
inline bool TransferFromOutfeedResponse::has_literal() const {
  return _internal_has_literal();
}
inline const ::xla::LiteralProto& TransferFromOutfeedResponse::_internal_literal() const {
  const ::xla::LiteralProto* p = literal_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::LiteralProto&>(
      ::xla::_LiteralProto_default_instance_);
}
inline const ::xla::LiteralProto& TransferFromOutfeedResponse::literal() const {
  // @@protoc_insertion_point(field_get:xla.TransferFromOutfeedResponse.literal)
  return _internal_literal();
}
inline void TransferFromOutfeedResponse::unsafe_arena_set_allocated_literal(
    ::xla::LiteralProto* literal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal_);
  }
  literal_ = literal;
  if (literal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.TransferFromOutfeedResponse.literal)
}
inline ::xla::LiteralProto* TransferFromOutfeedResponse::release_literal() {
  
  ::xla::LiteralProto* temp = literal_;
  literal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::LiteralProto* TransferFromOutfeedResponse::unsafe_arena_release_literal() {
  // @@protoc_insertion_point(field_release:xla.TransferFromOutfeedResponse.literal)
  
  ::xla::LiteralProto* temp = literal_;
  literal_ = nullptr;
  return temp;
}
inline ::xla::LiteralProto* TransferFromOutfeedResponse::_internal_mutable_literal() {
  
  if (literal_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::LiteralProto>(GetArenaForAllocation());
    literal_ = p;
  }
  return literal_;
}
inline ::xla::LiteralProto* TransferFromOutfeedResponse::mutable_literal() {
  ::xla::LiteralProto* _msg = _internal_mutable_literal();
  // @@protoc_insertion_point(field_mutable:xla.TransferFromOutfeedResponse.literal)
  return _msg;
}
inline void TransferFromOutfeedResponse::set_allocated_literal(::xla::LiteralProto* literal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal_);
  }
  if (literal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal));
    if (message_arena != submessage_arena) {
      literal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, literal, submessage_arena);
    }
    
  } else {
    
  }
  literal_ = literal;
  // @@protoc_insertion_point(field_set_allocated:xla.TransferFromOutfeedResponse.literal)
}

// -------------------------------------------------------------------

// ResetDeviceRequest

// .xla.DeviceHandle device_handle = 1;
inline bool ResetDeviceRequest::_internal_has_device_handle() const {
  return this != internal_default_instance() && device_handle_ != nullptr;
}
inline bool ResetDeviceRequest::has_device_handle() const {
  return _internal_has_device_handle();
}
inline const ::xla::DeviceHandle& ResetDeviceRequest::_internal_device_handle() const {
  const ::xla::DeviceHandle* p = device_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::DeviceHandle&>(
      ::xla::_DeviceHandle_default_instance_);
}
inline const ::xla::DeviceHandle& ResetDeviceRequest::device_handle() const {
  // @@protoc_insertion_point(field_get:xla.ResetDeviceRequest.device_handle)
  return _internal_device_handle();
}
inline void ResetDeviceRequest::unsafe_arena_set_allocated_device_handle(
    ::xla::DeviceHandle* device_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_handle_);
  }
  device_handle_ = device_handle;
  if (device_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ResetDeviceRequest.device_handle)
}
inline ::xla::DeviceHandle* ResetDeviceRequest::release_device_handle() {
  
  ::xla::DeviceHandle* temp = device_handle_;
  device_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::DeviceHandle* ResetDeviceRequest::unsafe_arena_release_device_handle() {
  // @@protoc_insertion_point(field_release:xla.ResetDeviceRequest.device_handle)
  
  ::xla::DeviceHandle* temp = device_handle_;
  device_handle_ = nullptr;
  return temp;
}
inline ::xla::DeviceHandle* ResetDeviceRequest::_internal_mutable_device_handle() {
  
  if (device_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::DeviceHandle>(GetArenaForAllocation());
    device_handle_ = p;
  }
  return device_handle_;
}
inline ::xla::DeviceHandle* ResetDeviceRequest::mutable_device_handle() {
  ::xla::DeviceHandle* _msg = _internal_mutable_device_handle();
  // @@protoc_insertion_point(field_mutable:xla.ResetDeviceRequest.device_handle)
  return _msg;
}
inline void ResetDeviceRequest::set_allocated_device_handle(::xla::DeviceHandle* device_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_handle_);
  }
  if (device_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_handle));
    if (message_arena != submessage_arena) {
      device_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_handle, submessage_arena);
    }
    
  } else {
    
  }
  device_handle_ = device_handle;
  // @@protoc_insertion_point(field_set_allocated:xla.ResetDeviceRequest.device_handle)
}

// -------------------------------------------------------------------

// ResetDeviceResponse

// -------------------------------------------------------------------

// ComputationGraphStatsRequest

// .xla.HloModuleProto computation = 1;
inline bool ComputationGraphStatsRequest::_internal_has_computation() const {
  return this != internal_default_instance() && computation_ != nullptr;
}
inline bool ComputationGraphStatsRequest::has_computation() const {
  return _internal_has_computation();
}
inline const ::xla::HloModuleProto& ComputationGraphStatsRequest::_internal_computation() const {
  const ::xla::HloModuleProto* p = computation_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::HloModuleProto&>(
      ::xla::_HloModuleProto_default_instance_);
}
inline const ::xla::HloModuleProto& ComputationGraphStatsRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.ComputationGraphStatsRequest.computation)
  return _internal_computation();
}
inline void ComputationGraphStatsRequest::unsafe_arena_set_allocated_computation(
    ::xla::HloModuleProto* computation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(computation_);
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ComputationGraphStatsRequest.computation)
}
inline ::xla::HloModuleProto* ComputationGraphStatsRequest::release_computation() {
  
  ::xla::HloModuleProto* temp = computation_;
  computation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::HloModuleProto* ComputationGraphStatsRequest::unsafe_arena_release_computation() {
  // @@protoc_insertion_point(field_release:xla.ComputationGraphStatsRequest.computation)
  
  ::xla::HloModuleProto* temp = computation_;
  computation_ = nullptr;
  return temp;
}
inline ::xla::HloModuleProto* ComputationGraphStatsRequest::_internal_mutable_computation() {
  
  if (computation_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::HloModuleProto>(GetArenaForAllocation());
    computation_ = p;
  }
  return computation_;
}
inline ::xla::HloModuleProto* ComputationGraphStatsRequest::mutable_computation() {
  ::xla::HloModuleProto* _msg = _internal_mutable_computation();
  // @@protoc_insertion_point(field_mutable:xla.ComputationGraphStatsRequest.computation)
  return _msg;
}
inline void ComputationGraphStatsRequest::set_allocated_computation(::xla::HloModuleProto* computation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(computation_);
  }
  if (computation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(computation));
    if (message_arena != submessage_arena) {
      computation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, computation, submessage_arena);
    }
    
  } else {
    
  }
  computation_ = computation;
  // @@protoc_insertion_point(field_set_allocated:xla.ComputationGraphStatsRequest.computation)
}

// .xla.DebugOptions debug_options = 2;
inline bool ComputationGraphStatsRequest::_internal_has_debug_options() const {
  return this != internal_default_instance() && debug_options_ != nullptr;
}
inline bool ComputationGraphStatsRequest::has_debug_options() const {
  return _internal_has_debug_options();
}
inline void ComputationGraphStatsRequest::clear_debug_options() {
  if (GetArenaForAllocation() == nullptr && debug_options_ != nullptr) {
    delete debug_options_;
  }
  debug_options_ = nullptr;
}
inline const ::xla::DebugOptions& ComputationGraphStatsRequest::_internal_debug_options() const {
  const ::xla::DebugOptions* p = debug_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::DebugOptions&>(
      ::xla::_DebugOptions_default_instance_);
}
inline const ::xla::DebugOptions& ComputationGraphStatsRequest::debug_options() const {
  // @@protoc_insertion_point(field_get:xla.ComputationGraphStatsRequest.debug_options)
  return _internal_debug_options();
}
inline void ComputationGraphStatsRequest::unsafe_arena_set_allocated_debug_options(
    ::xla::DebugOptions* debug_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_options_);
  }
  debug_options_ = debug_options;
  if (debug_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ComputationGraphStatsRequest.debug_options)
}
inline ::xla::DebugOptions* ComputationGraphStatsRequest::release_debug_options() {
  
  ::xla::DebugOptions* temp = debug_options_;
  debug_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::DebugOptions* ComputationGraphStatsRequest::unsafe_arena_release_debug_options() {
  // @@protoc_insertion_point(field_release:xla.ComputationGraphStatsRequest.debug_options)
  
  ::xla::DebugOptions* temp = debug_options_;
  debug_options_ = nullptr;
  return temp;
}
inline ::xla::DebugOptions* ComputationGraphStatsRequest::_internal_mutable_debug_options() {
  
  if (debug_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::DebugOptions>(GetArenaForAllocation());
    debug_options_ = p;
  }
  return debug_options_;
}
inline ::xla::DebugOptions* ComputationGraphStatsRequest::mutable_debug_options() {
  ::xla::DebugOptions* _msg = _internal_mutable_debug_options();
  // @@protoc_insertion_point(field_mutable:xla.ComputationGraphStatsRequest.debug_options)
  return _msg;
}
inline void ComputationGraphStatsRequest::set_allocated_debug_options(::xla::DebugOptions* debug_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete debug_options_;
  }
  if (debug_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xla::DebugOptions>::GetOwningArena(debug_options);
    if (message_arena != submessage_arena) {
      debug_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_options, submessage_arena);
    }
    
  } else {
    
  }
  debug_options_ = debug_options;
  // @@protoc_insertion_point(field_set_allocated:xla.ComputationGraphStatsRequest.debug_options)
}

// -------------------------------------------------------------------

// ComputationStatsResponse

// .xla.ComputationStats stats = 1;
inline bool ComputationStatsResponse::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool ComputationStatsResponse::has_stats() const {
  return _internal_has_stats();
}
inline const ::xla::ComputationStats& ComputationStatsResponse::_internal_stats() const {
  const ::xla::ComputationStats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ComputationStats&>(
      ::xla::_ComputationStats_default_instance_);
}
inline const ::xla::ComputationStats& ComputationStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:xla.ComputationStatsResponse.stats)
  return _internal_stats();
}
inline void ComputationStatsResponse::unsafe_arena_set_allocated_stats(
    ::xla::ComputationStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ComputationStatsResponse.stats)
}
inline ::xla::ComputationStats* ComputationStatsResponse::release_stats() {
  
  ::xla::ComputationStats* temp = stats_;
  stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ComputationStats* ComputationStatsResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:xla.ComputationStatsResponse.stats)
  
  ::xla::ComputationStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::xla::ComputationStats* ComputationStatsResponse::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ComputationStats>(GetArenaForAllocation());
    stats_ = p;
  }
  return stats_;
}
inline ::xla::ComputationStats* ComputationStatsResponse::mutable_stats() {
  ::xla::ComputationStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:xla.ComputationStatsResponse.stats)
  return _msg;
}
inline void ComputationStatsResponse::set_allocated_stats(::xla::ComputationStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats));
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:xla.ComputationStatsResponse.stats)
}

// -------------------------------------------------------------------

// CreateChannelHandleRequest

// .xla.ChannelHandle.ChannelType channel_type = 1;
inline void CreateChannelHandleRequest::clear_channel_type() {
  channel_type_ = 0;
}
inline ::xla::ChannelHandle_ChannelType CreateChannelHandleRequest::_internal_channel_type() const {
  return static_cast< ::xla::ChannelHandle_ChannelType >(channel_type_);
}
inline ::xla::ChannelHandle_ChannelType CreateChannelHandleRequest::channel_type() const {
  // @@protoc_insertion_point(field_get:xla.CreateChannelHandleRequest.channel_type)
  return _internal_channel_type();
}
inline void CreateChannelHandleRequest::_internal_set_channel_type(::xla::ChannelHandle_ChannelType value) {
  
  channel_type_ = value;
}
inline void CreateChannelHandleRequest::set_channel_type(::xla::ChannelHandle_ChannelType value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:xla.CreateChannelHandleRequest.channel_type)
}

// -------------------------------------------------------------------

// CreateChannelHandleResponse

// .xla.ChannelHandle channel = 1;
inline bool CreateChannelHandleResponse::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool CreateChannelHandleResponse::has_channel() const {
  return _internal_has_channel();
}
inline const ::xla::ChannelHandle& CreateChannelHandleResponse::_internal_channel() const {
  const ::xla::ChannelHandle* p = channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ChannelHandle&>(
      ::xla::_ChannelHandle_default_instance_);
}
inline const ::xla::ChannelHandle& CreateChannelHandleResponse::channel() const {
  // @@protoc_insertion_point(field_get:xla.CreateChannelHandleResponse.channel)
  return _internal_channel();
}
inline void CreateChannelHandleResponse::unsafe_arena_set_allocated_channel(
    ::xla::ChannelHandle* channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.CreateChannelHandleResponse.channel)
}
inline ::xla::ChannelHandle* CreateChannelHandleResponse::release_channel() {
  
  ::xla::ChannelHandle* temp = channel_;
  channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ChannelHandle* CreateChannelHandleResponse::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:xla.CreateChannelHandleResponse.channel)
  
  ::xla::ChannelHandle* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::xla::ChannelHandle* CreateChannelHandleResponse::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ChannelHandle>(GetArenaForAllocation());
    channel_ = p;
  }
  return channel_;
}
inline ::xla::ChannelHandle* CreateChannelHandleResponse::mutable_channel() {
  ::xla::ChannelHandle* _msg = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:xla.CreateChannelHandleResponse.channel)
  return _msg;
}
inline void CreateChannelHandleResponse::set_allocated_channel(::xla::ChannelHandle* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel));
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:xla.CreateChannelHandleResponse.channel)
}

// -------------------------------------------------------------------

// UnregisterRequest

// repeated .xla.GlobalDataHandle data = 1;
inline int UnregisterRequest::_internal_data_size() const {
  return data_.size();
}
inline int UnregisterRequest::data_size() const {
  return _internal_data_size();
}
inline ::xla::GlobalDataHandle* UnregisterRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:xla.UnregisterRequest.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >*
UnregisterRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:xla.UnregisterRequest.data)
  return &data_;
}
inline const ::xla::GlobalDataHandle& UnregisterRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::xla::GlobalDataHandle& UnregisterRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:xla.UnregisterRequest.data)
  return _internal_data(index);
}
inline ::xla::GlobalDataHandle* UnregisterRequest::_internal_add_data() {
  return data_.Add();
}
inline ::xla::GlobalDataHandle* UnregisterRequest::add_data() {
  ::xla::GlobalDataHandle* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:xla.UnregisterRequest.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >&
UnregisterRequest::data() const {
  // @@protoc_insertion_point(field_list:xla.UnregisterRequest.data)
  return data_;
}

// -------------------------------------------------------------------

// UnregisterResponse

// -------------------------------------------------------------------

// CompileRequest

// .xla.HloModuleProto computation = 1;
inline bool CompileRequest::_internal_has_computation() const {
  return this != internal_default_instance() && computation_ != nullptr;
}
inline bool CompileRequest::has_computation() const {
  return _internal_has_computation();
}
inline const ::xla::HloModuleProto& CompileRequest::_internal_computation() const {
  const ::xla::HloModuleProto* p = computation_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::HloModuleProto&>(
      ::xla::_HloModuleProto_default_instance_);
}
inline const ::xla::HloModuleProto& CompileRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.CompileRequest.computation)
  return _internal_computation();
}
inline void CompileRequest::unsafe_arena_set_allocated_computation(
    ::xla::HloModuleProto* computation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(computation_);
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.CompileRequest.computation)
}
inline ::xla::HloModuleProto* CompileRequest::release_computation() {
  
  ::xla::HloModuleProto* temp = computation_;
  computation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::HloModuleProto* CompileRequest::unsafe_arena_release_computation() {
  // @@protoc_insertion_point(field_release:xla.CompileRequest.computation)
  
  ::xla::HloModuleProto* temp = computation_;
  computation_ = nullptr;
  return temp;
}
inline ::xla::HloModuleProto* CompileRequest::_internal_mutable_computation() {
  
  if (computation_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::HloModuleProto>(GetArenaForAllocation());
    computation_ = p;
  }
  return computation_;
}
inline ::xla::HloModuleProto* CompileRequest::mutable_computation() {
  ::xla::HloModuleProto* _msg = _internal_mutable_computation();
  // @@protoc_insertion_point(field_mutable:xla.CompileRequest.computation)
  return _msg;
}
inline void CompileRequest::set_allocated_computation(::xla::HloModuleProto* computation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(computation_);
  }
  if (computation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(computation));
    if (message_arena != submessage_arena) {
      computation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, computation, submessage_arena);
    }
    
  } else {
    
  }
  computation_ = computation;
  // @@protoc_insertion_point(field_set_allocated:xla.CompileRequest.computation)
}

// .xla.ExecutionOptions execution_options = 2;
inline bool CompileRequest::_internal_has_execution_options() const {
  return this != internal_default_instance() && execution_options_ != nullptr;
}
inline bool CompileRequest::has_execution_options() const {
  return _internal_has_execution_options();
}
inline void CompileRequest::clear_execution_options() {
  if (GetArenaForAllocation() == nullptr && execution_options_ != nullptr) {
    delete execution_options_;
  }
  execution_options_ = nullptr;
}
inline const ::xla::ExecutionOptions& CompileRequest::_internal_execution_options() const {
  const ::xla::ExecutionOptions* p = execution_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ExecutionOptions&>(
      ::xla::_ExecutionOptions_default_instance_);
}
inline const ::xla::ExecutionOptions& CompileRequest::execution_options() const {
  // @@protoc_insertion_point(field_get:xla.CompileRequest.execution_options)
  return _internal_execution_options();
}
inline void CompileRequest::unsafe_arena_set_allocated_execution_options(
    ::xla::ExecutionOptions* execution_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_options_);
  }
  execution_options_ = execution_options;
  if (execution_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.CompileRequest.execution_options)
}
inline ::xla::ExecutionOptions* CompileRequest::release_execution_options() {
  
  ::xla::ExecutionOptions* temp = execution_options_;
  execution_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ExecutionOptions* CompileRequest::unsafe_arena_release_execution_options() {
  // @@protoc_insertion_point(field_release:xla.CompileRequest.execution_options)
  
  ::xla::ExecutionOptions* temp = execution_options_;
  execution_options_ = nullptr;
  return temp;
}
inline ::xla::ExecutionOptions* CompileRequest::_internal_mutable_execution_options() {
  
  if (execution_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ExecutionOptions>(GetArenaForAllocation());
    execution_options_ = p;
  }
  return execution_options_;
}
inline ::xla::ExecutionOptions* CompileRequest::mutable_execution_options() {
  ::xla::ExecutionOptions* _msg = _internal_mutable_execution_options();
  // @@protoc_insertion_point(field_mutable:xla.CompileRequest.execution_options)
  return _msg;
}
inline void CompileRequest::set_allocated_execution_options(::xla::ExecutionOptions* execution_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete execution_options_;
  }
  if (execution_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xla::ExecutionOptions>::GetOwningArena(execution_options);
    if (message_arena != submessage_arena) {
      execution_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_options, submessage_arena);
    }
    
  } else {
    
  }
  execution_options_ = execution_options;
  // @@protoc_insertion_point(field_set_allocated:xla.CompileRequest.execution_options)
}

// repeated .xla.ShapeProto input_shape_with_layout = 3;
inline int CompileRequest::_internal_input_shape_with_layout_size() const {
  return input_shape_with_layout_.size();
}
inline int CompileRequest::input_shape_with_layout_size() const {
  return _internal_input_shape_with_layout_size();
}
inline ::xla::ShapeProto* CompileRequest::mutable_input_shape_with_layout(int index) {
  // @@protoc_insertion_point(field_mutable:xla.CompileRequest.input_shape_with_layout)
  return input_shape_with_layout_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto >*
CompileRequest::mutable_input_shape_with_layout() {
  // @@protoc_insertion_point(field_mutable_list:xla.CompileRequest.input_shape_with_layout)
  return &input_shape_with_layout_;
}
inline const ::xla::ShapeProto& CompileRequest::_internal_input_shape_with_layout(int index) const {
  return input_shape_with_layout_.Get(index);
}
inline const ::xla::ShapeProto& CompileRequest::input_shape_with_layout(int index) const {
  // @@protoc_insertion_point(field_get:xla.CompileRequest.input_shape_with_layout)
  return _internal_input_shape_with_layout(index);
}
inline ::xla::ShapeProto* CompileRequest::_internal_add_input_shape_with_layout() {
  return input_shape_with_layout_.Add();
}
inline ::xla::ShapeProto* CompileRequest::add_input_shape_with_layout() {
  ::xla::ShapeProto* _add = _internal_add_input_shape_with_layout();
  // @@protoc_insertion_point(field_add:xla.CompileRequest.input_shape_with_layout)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto >&
CompileRequest::input_shape_with_layout() const {
  // @@protoc_insertion_point(field_list:xla.CompileRequest.input_shape_with_layout)
  return input_shape_with_layout_;
}

// -------------------------------------------------------------------

// CompileResponse

// .xla.ExecutionHandle handle = 1;
inline bool CompileResponse::_internal_has_handle() const {
  return this != internal_default_instance() && handle_ != nullptr;
}
inline bool CompileResponse::has_handle() const {
  return _internal_has_handle();
}
inline const ::xla::ExecutionHandle& CompileResponse::_internal_handle() const {
  const ::xla::ExecutionHandle* p = handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ExecutionHandle&>(
      ::xla::_ExecutionHandle_default_instance_);
}
inline const ::xla::ExecutionHandle& CompileResponse::handle() const {
  // @@protoc_insertion_point(field_get:xla.CompileResponse.handle)
  return _internal_handle();
}
inline void CompileResponse::unsafe_arena_set_allocated_handle(
    ::xla::ExecutionHandle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  handle_ = handle;
  if (handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.CompileResponse.handle)
}
inline ::xla::ExecutionHandle* CompileResponse::release_handle() {
  
  ::xla::ExecutionHandle* temp = handle_;
  handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ExecutionHandle* CompileResponse::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:xla.CompileResponse.handle)
  
  ::xla::ExecutionHandle* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::xla::ExecutionHandle* CompileResponse::_internal_mutable_handle() {
  
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ExecutionHandle>(GetArenaForAllocation());
    handle_ = p;
  }
  return handle_;
}
inline ::xla::ExecutionHandle* CompileResponse::mutable_handle() {
  ::xla::ExecutionHandle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:xla.CompileResponse.handle)
  return _msg;
}
inline void CompileResponse::set_allocated_handle(::xla::ExecutionHandle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    
  } else {
    
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:xla.CompileResponse.handle)
}

// -------------------------------------------------------------------

// ExecuteRequest

// .xla.ExecutionHandle handle = 1;
inline bool ExecuteRequest::_internal_has_handle() const {
  return this != internal_default_instance() && handle_ != nullptr;
}
inline bool ExecuteRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::xla::ExecutionHandle& ExecuteRequest::_internal_handle() const {
  const ::xla::ExecutionHandle* p = handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ExecutionHandle&>(
      ::xla::_ExecutionHandle_default_instance_);
}
inline const ::xla::ExecutionHandle& ExecuteRequest::handle() const {
  // @@protoc_insertion_point(field_get:xla.ExecuteRequest.handle)
  return _internal_handle();
}
inline void ExecuteRequest::unsafe_arena_set_allocated_handle(
    ::xla::ExecutionHandle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  handle_ = handle;
  if (handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ExecuteRequest.handle)
}
inline ::xla::ExecutionHandle* ExecuteRequest::release_handle() {
  
  ::xla::ExecutionHandle* temp = handle_;
  handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ExecutionHandle* ExecuteRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:xla.ExecuteRequest.handle)
  
  ::xla::ExecutionHandle* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::xla::ExecutionHandle* ExecuteRequest::_internal_mutable_handle() {
  
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ExecutionHandle>(GetArenaForAllocation());
    handle_ = p;
  }
  return handle_;
}
inline ::xla::ExecutionHandle* ExecuteRequest::mutable_handle() {
  ::xla::ExecutionHandle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:xla.ExecuteRequest.handle)
  return _msg;
}
inline void ExecuteRequest::set_allocated_handle(::xla::ExecutionHandle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    
  } else {
    
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:xla.ExecuteRequest.handle)
}

// repeated .xla.GlobalDataHandle arguments = 2;
inline int ExecuteRequest::_internal_arguments_size() const {
  return arguments_.size();
}
inline int ExecuteRequest::arguments_size() const {
  return _internal_arguments_size();
}
inline ::xla::GlobalDataHandle* ExecuteRequest::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ExecuteRequest.arguments)
  return arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >*
ExecuteRequest::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:xla.ExecuteRequest.arguments)
  return &arguments_;
}
inline const ::xla::GlobalDataHandle& ExecuteRequest::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const ::xla::GlobalDataHandle& ExecuteRequest::arguments(int index) const {
  // @@protoc_insertion_point(field_get:xla.ExecuteRequest.arguments)
  return _internal_arguments(index);
}
inline ::xla::GlobalDataHandle* ExecuteRequest::_internal_add_arguments() {
  return arguments_.Add();
}
inline ::xla::GlobalDataHandle* ExecuteRequest::add_arguments() {
  ::xla::GlobalDataHandle* _add = _internal_add_arguments();
  // @@protoc_insertion_point(field_add:xla.ExecuteRequest.arguments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >&
ExecuteRequest::arguments() const {
  // @@protoc_insertion_point(field_list:xla.ExecuteRequest.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// ExecuteGraphRequest

// .xla.HloModuleProto computation = 1;
inline bool ExecuteGraphRequest::_internal_has_computation() const {
  return this != internal_default_instance() && computation_ != nullptr;
}
inline bool ExecuteGraphRequest::has_computation() const {
  return _internal_has_computation();
}
inline const ::xla::HloModuleProto& ExecuteGraphRequest::_internal_computation() const {
  const ::xla::HloModuleProto* p = computation_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::HloModuleProto&>(
      ::xla::_HloModuleProto_default_instance_);
}
inline const ::xla::HloModuleProto& ExecuteGraphRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.ExecuteGraphRequest.computation)
  return _internal_computation();
}
inline void ExecuteGraphRequest::unsafe_arena_set_allocated_computation(
    ::xla::HloModuleProto* computation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(computation_);
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ExecuteGraphRequest.computation)
}
inline ::xla::HloModuleProto* ExecuteGraphRequest::release_computation() {
  
  ::xla::HloModuleProto* temp = computation_;
  computation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::HloModuleProto* ExecuteGraphRequest::unsafe_arena_release_computation() {
  // @@protoc_insertion_point(field_release:xla.ExecuteGraphRequest.computation)
  
  ::xla::HloModuleProto* temp = computation_;
  computation_ = nullptr;
  return temp;
}
inline ::xla::HloModuleProto* ExecuteGraphRequest::_internal_mutable_computation() {
  
  if (computation_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::HloModuleProto>(GetArenaForAllocation());
    computation_ = p;
  }
  return computation_;
}
inline ::xla::HloModuleProto* ExecuteGraphRequest::mutable_computation() {
  ::xla::HloModuleProto* _msg = _internal_mutable_computation();
  // @@protoc_insertion_point(field_mutable:xla.ExecuteGraphRequest.computation)
  return _msg;
}
inline void ExecuteGraphRequest::set_allocated_computation(::xla::HloModuleProto* computation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(computation_);
  }
  if (computation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(computation));
    if (message_arena != submessage_arena) {
      computation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, computation, submessage_arena);
    }
    
  } else {
    
  }
  computation_ = computation;
  // @@protoc_insertion_point(field_set_allocated:xla.ExecuteGraphRequest.computation)
}

// repeated .xla.GlobalDataHandle arguments = 2;
inline int ExecuteGraphRequest::_internal_arguments_size() const {
  return arguments_.size();
}
inline int ExecuteGraphRequest::arguments_size() const {
  return _internal_arguments_size();
}
inline ::xla::GlobalDataHandle* ExecuteGraphRequest::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ExecuteGraphRequest.arguments)
  return arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >*
ExecuteGraphRequest::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:xla.ExecuteGraphRequest.arguments)
  return &arguments_;
}
inline const ::xla::GlobalDataHandle& ExecuteGraphRequest::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const ::xla::GlobalDataHandle& ExecuteGraphRequest::arguments(int index) const {
  // @@protoc_insertion_point(field_get:xla.ExecuteGraphRequest.arguments)
  return _internal_arguments(index);
}
inline ::xla::GlobalDataHandle* ExecuteGraphRequest::_internal_add_arguments() {
  return arguments_.Add();
}
inline ::xla::GlobalDataHandle* ExecuteGraphRequest::add_arguments() {
  ::xla::GlobalDataHandle* _add = _internal_add_arguments();
  // @@protoc_insertion_point(field_add:xla.ExecuteGraphRequest.arguments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >&
ExecuteGraphRequest::arguments() const {
  // @@protoc_insertion_point(field_list:xla.ExecuteGraphRequest.arguments)
  return arguments_;
}

// .xla.ExecutionOptions execution_options = 3;
inline bool ExecuteGraphRequest::_internal_has_execution_options() const {
  return this != internal_default_instance() && execution_options_ != nullptr;
}
inline bool ExecuteGraphRequest::has_execution_options() const {
  return _internal_has_execution_options();
}
inline void ExecuteGraphRequest::clear_execution_options() {
  if (GetArenaForAllocation() == nullptr && execution_options_ != nullptr) {
    delete execution_options_;
  }
  execution_options_ = nullptr;
}
inline const ::xla::ExecutionOptions& ExecuteGraphRequest::_internal_execution_options() const {
  const ::xla::ExecutionOptions* p = execution_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ExecutionOptions&>(
      ::xla::_ExecutionOptions_default_instance_);
}
inline const ::xla::ExecutionOptions& ExecuteGraphRequest::execution_options() const {
  // @@protoc_insertion_point(field_get:xla.ExecuteGraphRequest.execution_options)
  return _internal_execution_options();
}
inline void ExecuteGraphRequest::unsafe_arena_set_allocated_execution_options(
    ::xla::ExecutionOptions* execution_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_options_);
  }
  execution_options_ = execution_options;
  if (execution_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ExecuteGraphRequest.execution_options)
}
inline ::xla::ExecutionOptions* ExecuteGraphRequest::release_execution_options() {
  
  ::xla::ExecutionOptions* temp = execution_options_;
  execution_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ExecutionOptions* ExecuteGraphRequest::unsafe_arena_release_execution_options() {
  // @@protoc_insertion_point(field_release:xla.ExecuteGraphRequest.execution_options)
  
  ::xla::ExecutionOptions* temp = execution_options_;
  execution_options_ = nullptr;
  return temp;
}
inline ::xla::ExecutionOptions* ExecuteGraphRequest::_internal_mutable_execution_options() {
  
  if (execution_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ExecutionOptions>(GetArenaForAllocation());
    execution_options_ = p;
  }
  return execution_options_;
}
inline ::xla::ExecutionOptions* ExecuteGraphRequest::mutable_execution_options() {
  ::xla::ExecutionOptions* _msg = _internal_mutable_execution_options();
  // @@protoc_insertion_point(field_mutable:xla.ExecuteGraphRequest.execution_options)
  return _msg;
}
inline void ExecuteGraphRequest::set_allocated_execution_options(::xla::ExecutionOptions* execution_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete execution_options_;
  }
  if (execution_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xla::ExecutionOptions>::GetOwningArena(execution_options);
    if (message_arena != submessage_arena) {
      execution_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_options, submessage_arena);
    }
    
  } else {
    
  }
  execution_options_ = execution_options;
  // @@protoc_insertion_point(field_set_allocated:xla.ExecuteGraphRequest.execution_options)
}

// -------------------------------------------------------------------

// ExecuteGraphParallelRequest

// repeated .xla.ExecuteGraphRequest requests = 1;
inline int ExecuteGraphParallelRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int ExecuteGraphParallelRequest::requests_size() const {
  return _internal_requests_size();
}
inline void ExecuteGraphParallelRequest::clear_requests() {
  requests_.Clear();
}
inline ::xla::ExecuteGraphRequest* ExecuteGraphParallelRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ExecuteGraphParallelRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ExecuteGraphRequest >*
ExecuteGraphParallelRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:xla.ExecuteGraphParallelRequest.requests)
  return &requests_;
}
inline const ::xla::ExecuteGraphRequest& ExecuteGraphParallelRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::xla::ExecuteGraphRequest& ExecuteGraphParallelRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:xla.ExecuteGraphParallelRequest.requests)
  return _internal_requests(index);
}
inline ::xla::ExecuteGraphRequest* ExecuteGraphParallelRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::xla::ExecuteGraphRequest* ExecuteGraphParallelRequest::add_requests() {
  ::xla::ExecuteGraphRequest* _add = _internal_add_requests();
  // @@protoc_insertion_point(field_add:xla.ExecuteGraphParallelRequest.requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ExecuteGraphRequest >&
ExecuteGraphParallelRequest::requests() const {
  // @@protoc_insertion_point(field_list:xla.ExecuteGraphParallelRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// ExecuteResponse

// .xla.GlobalDataHandle output = 1;
inline bool ExecuteResponse::_internal_has_output() const {
  return this != internal_default_instance() && output_ != nullptr;
}
inline bool ExecuteResponse::has_output() const {
  return _internal_has_output();
}
inline const ::xla::GlobalDataHandle& ExecuteResponse::_internal_output() const {
  const ::xla::GlobalDataHandle* p = output_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::GlobalDataHandle&>(
      ::xla::_GlobalDataHandle_default_instance_);
}
inline const ::xla::GlobalDataHandle& ExecuteResponse::output() const {
  // @@protoc_insertion_point(field_get:xla.ExecuteResponse.output)
  return _internal_output();
}
inline void ExecuteResponse::unsafe_arena_set_allocated_output(
    ::xla::GlobalDataHandle* output) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ExecuteResponse.output)
}
inline ::xla::GlobalDataHandle* ExecuteResponse::release_output() {
  
  ::xla::GlobalDataHandle* temp = output_;
  output_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::GlobalDataHandle* ExecuteResponse::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:xla.ExecuteResponse.output)
  
  ::xla::GlobalDataHandle* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::xla::GlobalDataHandle* ExecuteResponse::_internal_mutable_output() {
  
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::GlobalDataHandle>(GetArenaForAllocation());
    output_ = p;
  }
  return output_;
}
inline ::xla::GlobalDataHandle* ExecuteResponse::mutable_output() {
  ::xla::GlobalDataHandle* _msg = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:xla.ExecuteResponse.output)
  return _msg;
}
inline void ExecuteResponse::set_allocated_output(::xla::GlobalDataHandle* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output));
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:xla.ExecuteResponse.output)
}

// .xla.ExecutionProfile profile = 2;
inline bool ExecuteResponse::_internal_has_profile() const {
  return this != internal_default_instance() && profile_ != nullptr;
}
inline bool ExecuteResponse::has_profile() const {
  return _internal_has_profile();
}
inline const ::xla::ExecutionProfile& ExecuteResponse::_internal_profile() const {
  const ::xla::ExecutionProfile* p = profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ExecutionProfile&>(
      ::xla::_ExecutionProfile_default_instance_);
}
inline const ::xla::ExecutionProfile& ExecuteResponse::profile() const {
  // @@protoc_insertion_point(field_get:xla.ExecuteResponse.profile)
  return _internal_profile();
}
inline void ExecuteResponse::unsafe_arena_set_allocated_profile(
    ::xla::ExecutionProfile* profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_);
  }
  profile_ = profile;
  if (profile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ExecuteResponse.profile)
}
inline ::xla::ExecutionProfile* ExecuteResponse::release_profile() {
  
  ::xla::ExecutionProfile* temp = profile_;
  profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ExecutionProfile* ExecuteResponse::unsafe_arena_release_profile() {
  // @@protoc_insertion_point(field_release:xla.ExecuteResponse.profile)
  
  ::xla::ExecutionProfile* temp = profile_;
  profile_ = nullptr;
  return temp;
}
inline ::xla::ExecutionProfile* ExecuteResponse::_internal_mutable_profile() {
  
  if (profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ExecutionProfile>(GetArenaForAllocation());
    profile_ = p;
  }
  return profile_;
}
inline ::xla::ExecutionProfile* ExecuteResponse::mutable_profile() {
  ::xla::ExecutionProfile* _msg = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:xla.ExecuteResponse.profile)
  return _msg;
}
inline void ExecuteResponse::set_allocated_profile(::xla::ExecutionProfile* profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_);
  }
  if (profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile));
    if (message_arena != submessage_arena) {
      profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile, submessage_arena);
    }
    
  } else {
    
  }
  profile_ = profile;
  // @@protoc_insertion_point(field_set_allocated:xla.ExecuteResponse.profile)
}

// -------------------------------------------------------------------

// ExecuteParallelResponse

// repeated .xla.ExecuteResponse responses = 1;
inline int ExecuteParallelResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int ExecuteParallelResponse::responses_size() const {
  return _internal_responses_size();
}
inline void ExecuteParallelResponse::clear_responses() {
  responses_.Clear();
}
inline ::xla::ExecuteResponse* ExecuteParallelResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:xla.ExecuteParallelResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ExecuteResponse >*
ExecuteParallelResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:xla.ExecuteParallelResponse.responses)
  return &responses_;
}
inline const ::xla::ExecuteResponse& ExecuteParallelResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::xla::ExecuteResponse& ExecuteParallelResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:xla.ExecuteParallelResponse.responses)
  return _internal_responses(index);
}
inline ::xla::ExecuteResponse* ExecuteParallelResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::xla::ExecuteResponse* ExecuteParallelResponse::add_responses() {
  ::xla::ExecuteResponse* _add = _internal_add_responses();
  // @@protoc_insertion_point(field_add:xla.ExecuteParallelResponse.responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ExecuteResponse >&
ExecuteParallelResponse::responses() const {
  // @@protoc_insertion_point(field_list:xla.ExecuteParallelResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// WaitForExecutionRequest

// .xla.ExecutionHandle execution = 1;
inline bool WaitForExecutionRequest::_internal_has_execution() const {
  return this != internal_default_instance() && execution_ != nullptr;
}
inline bool WaitForExecutionRequest::has_execution() const {
  return _internal_has_execution();
}
inline const ::xla::ExecutionHandle& WaitForExecutionRequest::_internal_execution() const {
  const ::xla::ExecutionHandle* p = execution_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ExecutionHandle&>(
      ::xla::_ExecutionHandle_default_instance_);
}
inline const ::xla::ExecutionHandle& WaitForExecutionRequest::execution() const {
  // @@protoc_insertion_point(field_get:xla.WaitForExecutionRequest.execution)
  return _internal_execution();
}
inline void WaitForExecutionRequest::unsafe_arena_set_allocated_execution(
    ::xla::ExecutionHandle* execution) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_);
  }
  execution_ = execution;
  if (execution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.WaitForExecutionRequest.execution)
}
inline ::xla::ExecutionHandle* WaitForExecutionRequest::release_execution() {
  
  ::xla::ExecutionHandle* temp = execution_;
  execution_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ExecutionHandle* WaitForExecutionRequest::unsafe_arena_release_execution() {
  // @@protoc_insertion_point(field_release:xla.WaitForExecutionRequest.execution)
  
  ::xla::ExecutionHandle* temp = execution_;
  execution_ = nullptr;
  return temp;
}
inline ::xla::ExecutionHandle* WaitForExecutionRequest::_internal_mutable_execution() {
  
  if (execution_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ExecutionHandle>(GetArenaForAllocation());
    execution_ = p;
  }
  return execution_;
}
inline ::xla::ExecutionHandle* WaitForExecutionRequest::mutable_execution() {
  ::xla::ExecutionHandle* _msg = _internal_mutable_execution();
  // @@protoc_insertion_point(field_mutable:xla.WaitForExecutionRequest.execution)
  return _msg;
}
inline void WaitForExecutionRequest::set_allocated_execution(::xla::ExecutionHandle* execution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_);
  }
  if (execution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution));
    if (message_arena != submessage_arena) {
      execution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution, submessage_arena);
    }
    
  } else {
    
  }
  execution_ = execution;
  // @@protoc_insertion_point(field_set_allocated:xla.WaitForExecutionRequest.execution)
}

// -------------------------------------------------------------------

// WaitForExecutionResponse

// .xla.GlobalDataHandle output = 1;
inline bool WaitForExecutionResponse::_internal_has_output() const {
  return this != internal_default_instance() && output_ != nullptr;
}
inline bool WaitForExecutionResponse::has_output() const {
  return _internal_has_output();
}
inline const ::xla::GlobalDataHandle& WaitForExecutionResponse::_internal_output() const {
  const ::xla::GlobalDataHandle* p = output_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::GlobalDataHandle&>(
      ::xla::_GlobalDataHandle_default_instance_);
}
inline const ::xla::GlobalDataHandle& WaitForExecutionResponse::output() const {
  // @@protoc_insertion_point(field_get:xla.WaitForExecutionResponse.output)
  return _internal_output();
}
inline void WaitForExecutionResponse::unsafe_arena_set_allocated_output(
    ::xla::GlobalDataHandle* output) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.WaitForExecutionResponse.output)
}
inline ::xla::GlobalDataHandle* WaitForExecutionResponse::release_output() {
  
  ::xla::GlobalDataHandle* temp = output_;
  output_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::GlobalDataHandle* WaitForExecutionResponse::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:xla.WaitForExecutionResponse.output)
  
  ::xla::GlobalDataHandle* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::xla::GlobalDataHandle* WaitForExecutionResponse::_internal_mutable_output() {
  
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::GlobalDataHandle>(GetArenaForAllocation());
    output_ = p;
  }
  return output_;
}
inline ::xla::GlobalDataHandle* WaitForExecutionResponse::mutable_output() {
  ::xla::GlobalDataHandle* _msg = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:xla.WaitForExecutionResponse.output)
  return _msg;
}
inline void WaitForExecutionResponse::set_allocated_output(::xla::GlobalDataHandle* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output));
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:xla.WaitForExecutionResponse.output)
}

// .xla.ExecutionProfile profile = 2;
inline bool WaitForExecutionResponse::_internal_has_profile() const {
  return this != internal_default_instance() && profile_ != nullptr;
}
inline bool WaitForExecutionResponse::has_profile() const {
  return _internal_has_profile();
}
inline const ::xla::ExecutionProfile& WaitForExecutionResponse::_internal_profile() const {
  const ::xla::ExecutionProfile* p = profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ExecutionProfile&>(
      ::xla::_ExecutionProfile_default_instance_);
}
inline const ::xla::ExecutionProfile& WaitForExecutionResponse::profile() const {
  // @@protoc_insertion_point(field_get:xla.WaitForExecutionResponse.profile)
  return _internal_profile();
}
inline void WaitForExecutionResponse::unsafe_arena_set_allocated_profile(
    ::xla::ExecutionProfile* profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_);
  }
  profile_ = profile;
  if (profile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.WaitForExecutionResponse.profile)
}
inline ::xla::ExecutionProfile* WaitForExecutionResponse::release_profile() {
  
  ::xla::ExecutionProfile* temp = profile_;
  profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ExecutionProfile* WaitForExecutionResponse::unsafe_arena_release_profile() {
  // @@protoc_insertion_point(field_release:xla.WaitForExecutionResponse.profile)
  
  ::xla::ExecutionProfile* temp = profile_;
  profile_ = nullptr;
  return temp;
}
inline ::xla::ExecutionProfile* WaitForExecutionResponse::_internal_mutable_profile() {
  
  if (profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ExecutionProfile>(GetArenaForAllocation());
    profile_ = p;
  }
  return profile_;
}
inline ::xla::ExecutionProfile* WaitForExecutionResponse::mutable_profile() {
  ::xla::ExecutionProfile* _msg = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:xla.WaitForExecutionResponse.profile)
  return _msg;
}
inline void WaitForExecutionResponse::set_allocated_profile(::xla::ExecutionProfile* profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_);
  }
  if (profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile));
    if (message_arena != submessage_arena) {
      profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile, submessage_arena);
    }
    
  } else {
    
  }
  profile_ = profile;
  // @@protoc_insertion_point(field_set_allocated:xla.WaitForExecutionResponse.profile)
}

// -------------------------------------------------------------------

// ComputeConstantGraphRequest

// .xla.HloModuleProto computation = 1;
inline bool ComputeConstantGraphRequest::_internal_has_computation() const {
  return this != internal_default_instance() && computation_ != nullptr;
}
inline bool ComputeConstantGraphRequest::has_computation() const {
  return _internal_has_computation();
}
inline const ::xla::HloModuleProto& ComputeConstantGraphRequest::_internal_computation() const {
  const ::xla::HloModuleProto* p = computation_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::HloModuleProto&>(
      ::xla::_HloModuleProto_default_instance_);
}
inline const ::xla::HloModuleProto& ComputeConstantGraphRequest::computation() const {
  // @@protoc_insertion_point(field_get:xla.ComputeConstantGraphRequest.computation)
  return _internal_computation();
}
inline void ComputeConstantGraphRequest::unsafe_arena_set_allocated_computation(
    ::xla::HloModuleProto* computation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(computation_);
  }
  computation_ = computation;
  if (computation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ComputeConstantGraphRequest.computation)
}
inline ::xla::HloModuleProto* ComputeConstantGraphRequest::release_computation() {
  
  ::xla::HloModuleProto* temp = computation_;
  computation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::HloModuleProto* ComputeConstantGraphRequest::unsafe_arena_release_computation() {
  // @@protoc_insertion_point(field_release:xla.ComputeConstantGraphRequest.computation)
  
  ::xla::HloModuleProto* temp = computation_;
  computation_ = nullptr;
  return temp;
}
inline ::xla::HloModuleProto* ComputeConstantGraphRequest::_internal_mutable_computation() {
  
  if (computation_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::HloModuleProto>(GetArenaForAllocation());
    computation_ = p;
  }
  return computation_;
}
inline ::xla::HloModuleProto* ComputeConstantGraphRequest::mutable_computation() {
  ::xla::HloModuleProto* _msg = _internal_mutable_computation();
  // @@protoc_insertion_point(field_mutable:xla.ComputeConstantGraphRequest.computation)
  return _msg;
}
inline void ComputeConstantGraphRequest::set_allocated_computation(::xla::HloModuleProto* computation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(computation_);
  }
  if (computation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(computation));
    if (message_arena != submessage_arena) {
      computation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, computation, submessage_arena);
    }
    
  } else {
    
  }
  computation_ = computation;
  // @@protoc_insertion_point(field_set_allocated:xla.ComputeConstantGraphRequest.computation)
}

// .xla.LayoutProto output_layout = 2;
inline bool ComputeConstantGraphRequest::_internal_has_output_layout() const {
  return this != internal_default_instance() && output_layout_ != nullptr;
}
inline bool ComputeConstantGraphRequest::has_output_layout() const {
  return _internal_has_output_layout();
}
inline const ::xla::LayoutProto& ComputeConstantGraphRequest::_internal_output_layout() const {
  const ::xla::LayoutProto* p = output_layout_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::LayoutProto&>(
      ::xla::_LayoutProto_default_instance_);
}
inline const ::xla::LayoutProto& ComputeConstantGraphRequest::output_layout() const {
  // @@protoc_insertion_point(field_get:xla.ComputeConstantGraphRequest.output_layout)
  return _internal_output_layout();
}
inline void ComputeConstantGraphRequest::unsafe_arena_set_allocated_output_layout(
    ::xla::LayoutProto* output_layout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_layout_);
  }
  output_layout_ = output_layout;
  if (output_layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ComputeConstantGraphRequest.output_layout)
}
inline ::xla::LayoutProto* ComputeConstantGraphRequest::release_output_layout() {
  
  ::xla::LayoutProto* temp = output_layout_;
  output_layout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::LayoutProto* ComputeConstantGraphRequest::unsafe_arena_release_output_layout() {
  // @@protoc_insertion_point(field_release:xla.ComputeConstantGraphRequest.output_layout)
  
  ::xla::LayoutProto* temp = output_layout_;
  output_layout_ = nullptr;
  return temp;
}
inline ::xla::LayoutProto* ComputeConstantGraphRequest::_internal_mutable_output_layout() {
  
  if (output_layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::LayoutProto>(GetArenaForAllocation());
    output_layout_ = p;
  }
  return output_layout_;
}
inline ::xla::LayoutProto* ComputeConstantGraphRequest::mutable_output_layout() {
  ::xla::LayoutProto* _msg = _internal_mutable_output_layout();
  // @@protoc_insertion_point(field_mutable:xla.ComputeConstantGraphRequest.output_layout)
  return _msg;
}
inline void ComputeConstantGraphRequest::set_allocated_output_layout(::xla::LayoutProto* output_layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_layout_);
  }
  if (output_layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_layout));
    if (message_arena != submessage_arena) {
      output_layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_layout, submessage_arena);
    }
    
  } else {
    
  }
  output_layout_ = output_layout;
  // @@protoc_insertion_point(field_set_allocated:xla.ComputeConstantGraphRequest.output_layout)
}

// -------------------------------------------------------------------

// ComputeConstantResponse

// .xla.LiteralProto literal = 1;
inline bool ComputeConstantResponse::_internal_has_literal() const {
  return this != internal_default_instance() && literal_ != nullptr;
}
inline bool ComputeConstantResponse::has_literal() const {
  return _internal_has_literal();
}
inline const ::xla::LiteralProto& ComputeConstantResponse::_internal_literal() const {
  const ::xla::LiteralProto* p = literal_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::LiteralProto&>(
      ::xla::_LiteralProto_default_instance_);
}
inline const ::xla::LiteralProto& ComputeConstantResponse::literal() const {
  // @@protoc_insertion_point(field_get:xla.ComputeConstantResponse.literal)
  return _internal_literal();
}
inline void ComputeConstantResponse::unsafe_arena_set_allocated_literal(
    ::xla::LiteralProto* literal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal_);
  }
  literal_ = literal;
  if (literal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.ComputeConstantResponse.literal)
}
inline ::xla::LiteralProto* ComputeConstantResponse::release_literal() {
  
  ::xla::LiteralProto* temp = literal_;
  literal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::LiteralProto* ComputeConstantResponse::unsafe_arena_release_literal() {
  // @@protoc_insertion_point(field_release:xla.ComputeConstantResponse.literal)
  
  ::xla::LiteralProto* temp = literal_;
  literal_ = nullptr;
  return temp;
}
inline ::xla::LiteralProto* ComputeConstantResponse::_internal_mutable_literal() {
  
  if (literal_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::LiteralProto>(GetArenaForAllocation());
    literal_ = p;
  }
  return literal_;
}
inline ::xla::LiteralProto* ComputeConstantResponse::mutable_literal() {
  ::xla::LiteralProto* _msg = _internal_mutable_literal();
  // @@protoc_insertion_point(field_mutable:xla.ComputeConstantResponse.literal)
  return _msg;
}
inline void ComputeConstantResponse::set_allocated_literal(::xla::LiteralProto* literal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal_);
  }
  if (literal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(literal));
    if (message_arena != submessage_arena) {
      literal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, literal, submessage_arena);
    }
    
  } else {
    
  }
  literal_ = literal;
  // @@protoc_insertion_point(field_set_allocated:xla.ComputeConstantResponse.literal)
}

// -------------------------------------------------------------------

// DeconstructTupleRequest

// .xla.GlobalDataHandle tuple_handle = 2;
inline bool DeconstructTupleRequest::_internal_has_tuple_handle() const {
  return this != internal_default_instance() && tuple_handle_ != nullptr;
}
inline bool DeconstructTupleRequest::has_tuple_handle() const {
  return _internal_has_tuple_handle();
}
inline const ::xla::GlobalDataHandle& DeconstructTupleRequest::_internal_tuple_handle() const {
  const ::xla::GlobalDataHandle* p = tuple_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::GlobalDataHandle&>(
      ::xla::_GlobalDataHandle_default_instance_);
}
inline const ::xla::GlobalDataHandle& DeconstructTupleRequest::tuple_handle() const {
  // @@protoc_insertion_point(field_get:xla.DeconstructTupleRequest.tuple_handle)
  return _internal_tuple_handle();
}
inline void DeconstructTupleRequest::unsafe_arena_set_allocated_tuple_handle(
    ::xla::GlobalDataHandle* tuple_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuple_handle_);
  }
  tuple_handle_ = tuple_handle;
  if (tuple_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.DeconstructTupleRequest.tuple_handle)
}
inline ::xla::GlobalDataHandle* DeconstructTupleRequest::release_tuple_handle() {
  
  ::xla::GlobalDataHandle* temp = tuple_handle_;
  tuple_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::GlobalDataHandle* DeconstructTupleRequest::unsafe_arena_release_tuple_handle() {
  // @@protoc_insertion_point(field_release:xla.DeconstructTupleRequest.tuple_handle)
  
  ::xla::GlobalDataHandle* temp = tuple_handle_;
  tuple_handle_ = nullptr;
  return temp;
}
inline ::xla::GlobalDataHandle* DeconstructTupleRequest::_internal_mutable_tuple_handle() {
  
  if (tuple_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::GlobalDataHandle>(GetArenaForAllocation());
    tuple_handle_ = p;
  }
  return tuple_handle_;
}
inline ::xla::GlobalDataHandle* DeconstructTupleRequest::mutable_tuple_handle() {
  ::xla::GlobalDataHandle* _msg = _internal_mutable_tuple_handle();
  // @@protoc_insertion_point(field_mutable:xla.DeconstructTupleRequest.tuple_handle)
  return _msg;
}
inline void DeconstructTupleRequest::set_allocated_tuple_handle(::xla::GlobalDataHandle* tuple_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuple_handle_);
  }
  if (tuple_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuple_handle));
    if (message_arena != submessage_arena) {
      tuple_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuple_handle, submessage_arena);
    }
    
  } else {
    
  }
  tuple_handle_ = tuple_handle;
  // @@protoc_insertion_point(field_set_allocated:xla.DeconstructTupleRequest.tuple_handle)
}

// -------------------------------------------------------------------

// DeconstructTupleResponse

// repeated .xla.GlobalDataHandle element_handles = 1;
inline int DeconstructTupleResponse::_internal_element_handles_size() const {
  return element_handles_.size();
}
inline int DeconstructTupleResponse::element_handles_size() const {
  return _internal_element_handles_size();
}
inline ::xla::GlobalDataHandle* DeconstructTupleResponse::mutable_element_handles(int index) {
  // @@protoc_insertion_point(field_mutable:xla.DeconstructTupleResponse.element_handles)
  return element_handles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >*
DeconstructTupleResponse::mutable_element_handles() {
  // @@protoc_insertion_point(field_mutable_list:xla.DeconstructTupleResponse.element_handles)
  return &element_handles_;
}
inline const ::xla::GlobalDataHandle& DeconstructTupleResponse::_internal_element_handles(int index) const {
  return element_handles_.Get(index);
}
inline const ::xla::GlobalDataHandle& DeconstructTupleResponse::element_handles(int index) const {
  // @@protoc_insertion_point(field_get:xla.DeconstructTupleResponse.element_handles)
  return _internal_element_handles(index);
}
inline ::xla::GlobalDataHandle* DeconstructTupleResponse::_internal_add_element_handles() {
  return element_handles_.Add();
}
inline ::xla::GlobalDataHandle* DeconstructTupleResponse::add_element_handles() {
  ::xla::GlobalDataHandle* _add = _internal_add_element_handles();
  // @@protoc_insertion_point(field_add:xla.DeconstructTupleResponse.element_handles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >&
DeconstructTupleResponse::element_handles() const {
  // @@protoc_insertion_point(field_list:xla.DeconstructTupleResponse.element_handles)
  return element_handles_;
}

// -------------------------------------------------------------------

// LoadDataRequest

// string columnio_tablet_path = 1;
inline void LoadDataRequest::clear_columnio_tablet_path() {
  columnio_tablet_path_.ClearToEmpty();
}
inline const std::string& LoadDataRequest::columnio_tablet_path() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataRequest.columnio_tablet_path)
  return _internal_columnio_tablet_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadDataRequest::set_columnio_tablet_path(ArgT0&& arg0, ArgT... args) {
 
 columnio_tablet_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.LoadDataRequest.columnio_tablet_path)
}
inline std::string* LoadDataRequest::mutable_columnio_tablet_path() {
  std::string* _s = _internal_mutable_columnio_tablet_path();
  // @@protoc_insertion_point(field_mutable:xla.LoadDataRequest.columnio_tablet_path)
  return _s;
}
inline const std::string& LoadDataRequest::_internal_columnio_tablet_path() const {
  return columnio_tablet_path_.Get();
}
inline void LoadDataRequest::_internal_set_columnio_tablet_path(const std::string& value) {
  
  columnio_tablet_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoadDataRequest::_internal_mutable_columnio_tablet_path() {
  
  return columnio_tablet_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoadDataRequest::release_columnio_tablet_path() {
  // @@protoc_insertion_point(field_release:xla.LoadDataRequest.columnio_tablet_path)
  return columnio_tablet_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoadDataRequest::set_allocated_columnio_tablet_path(std::string* columnio_tablet_path) {
  if (columnio_tablet_path != nullptr) {
    
  } else {
    
  }
  columnio_tablet_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), columnio_tablet_path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xla.LoadDataRequest.columnio_tablet_path)
}

// string columnio_field = 2;
inline void LoadDataRequest::clear_columnio_field() {
  columnio_field_.ClearToEmpty();
}
inline const std::string& LoadDataRequest::columnio_field() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataRequest.columnio_field)
  return _internal_columnio_field();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadDataRequest::set_columnio_field(ArgT0&& arg0, ArgT... args) {
 
 columnio_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.LoadDataRequest.columnio_field)
}
inline std::string* LoadDataRequest::mutable_columnio_field() {
  std::string* _s = _internal_mutable_columnio_field();
  // @@protoc_insertion_point(field_mutable:xla.LoadDataRequest.columnio_field)
  return _s;
}
inline const std::string& LoadDataRequest::_internal_columnio_field() const {
  return columnio_field_.Get();
}
inline void LoadDataRequest::_internal_set_columnio_field(const std::string& value) {
  
  columnio_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoadDataRequest::_internal_mutable_columnio_field() {
  
  return columnio_field_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoadDataRequest::release_columnio_field() {
  // @@protoc_insertion_point(field_release:xla.LoadDataRequest.columnio_field)
  return columnio_field_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoadDataRequest::set_allocated_columnio_field(std::string* columnio_field) {
  if (columnio_field != nullptr) {
    
  } else {
    
  }
  columnio_field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), columnio_field,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xla.LoadDataRequest.columnio_field)
}

// .xla.ShapeProto element_shape = 3;
inline bool LoadDataRequest::_internal_has_element_shape() const {
  return this != internal_default_instance() && element_shape_ != nullptr;
}
inline bool LoadDataRequest::has_element_shape() const {
  return _internal_has_element_shape();
}
inline const ::xla::ShapeProto& LoadDataRequest::_internal_element_shape() const {
  const ::xla::ShapeProto* p = element_shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ShapeProto&>(
      ::xla::_ShapeProto_default_instance_);
}
inline const ::xla::ShapeProto& LoadDataRequest::element_shape() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataRequest.element_shape)
  return _internal_element_shape();
}
inline void LoadDataRequest::unsafe_arena_set_allocated_element_shape(
    ::xla::ShapeProto* element_shape) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(element_shape_);
  }
  element_shape_ = element_shape;
  if (element_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.LoadDataRequest.element_shape)
}
inline ::xla::ShapeProto* LoadDataRequest::release_element_shape() {
  
  ::xla::ShapeProto* temp = element_shape_;
  element_shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ShapeProto* LoadDataRequest::unsafe_arena_release_element_shape() {
  // @@protoc_insertion_point(field_release:xla.LoadDataRequest.element_shape)
  
  ::xla::ShapeProto* temp = element_shape_;
  element_shape_ = nullptr;
  return temp;
}
inline ::xla::ShapeProto* LoadDataRequest::_internal_mutable_element_shape() {
  
  if (element_shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ShapeProto>(GetArenaForAllocation());
    element_shape_ = p;
  }
  return element_shape_;
}
inline ::xla::ShapeProto* LoadDataRequest::mutable_element_shape() {
  ::xla::ShapeProto* _msg = _internal_mutable_element_shape();
  // @@protoc_insertion_point(field_mutable:xla.LoadDataRequest.element_shape)
  return _msg;
}
inline void LoadDataRequest::set_allocated_element_shape(::xla::ShapeProto* element_shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(element_shape_);
  }
  if (element_shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(element_shape));
    if (message_arena != submessage_arena) {
      element_shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element_shape, submessage_arena);
    }
    
  } else {
    
  }
  element_shape_ = element_shape;
  // @@protoc_insertion_point(field_set_allocated:xla.LoadDataRequest.element_shape)
}

// int64 offset = 4;
inline void LoadDataRequest::clear_offset() {
  offset_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadDataRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadDataRequest::offset() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataRequest.offset)
  return _internal_offset();
}
inline void LoadDataRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void LoadDataRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:xla.LoadDataRequest.offset)
}

// int64 limit = 5;
inline void LoadDataRequest::clear_limit() {
  limit_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadDataRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadDataRequest::limit() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataRequest.limit)
  return _internal_limit();
}
inline void LoadDataRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void LoadDataRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:xla.LoadDataRequest.limit)
}

// bool zip = 6;
inline void LoadDataRequest::clear_zip() {
  zip_ = false;
}
inline bool LoadDataRequest::_internal_zip() const {
  return zip_;
}
inline bool LoadDataRequest::zip() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataRequest.zip)
  return _internal_zip();
}
inline void LoadDataRequest::_internal_set_zip(bool value) {
  
  zip_ = value;
}
inline void LoadDataRequest::set_zip(bool value) {
  _internal_set_zip(value);
  // @@protoc_insertion_point(field_set:xla.LoadDataRequest.zip)
}

// -------------------------------------------------------------------

// LoadDataResponse

// .xla.GlobalDataHandle data = 1;
inline bool LoadDataResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool LoadDataResponse::has_data() const {
  return _internal_has_data();
}
inline const ::xla::GlobalDataHandle& LoadDataResponse::_internal_data() const {
  const ::xla::GlobalDataHandle* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::GlobalDataHandle&>(
      ::xla::_GlobalDataHandle_default_instance_);
}
inline const ::xla::GlobalDataHandle& LoadDataResponse::data() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataResponse.data)
  return _internal_data();
}
inline void LoadDataResponse::unsafe_arena_set_allocated_data(
    ::xla::GlobalDataHandle* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.LoadDataResponse.data)
}
inline ::xla::GlobalDataHandle* LoadDataResponse::release_data() {
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::GlobalDataHandle* LoadDataResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:xla.LoadDataResponse.data)
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::xla::GlobalDataHandle* LoadDataResponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::GlobalDataHandle>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::xla::GlobalDataHandle* LoadDataResponse::mutable_data() {
  ::xla::GlobalDataHandle* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:xla.LoadDataResponse.data)
  return _msg;
}
inline void LoadDataResponse::set_allocated_data(::xla::GlobalDataHandle* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:xla.LoadDataResponse.data)
}

// .xla.ShapeProto data_shape = 2;
inline bool LoadDataResponse::_internal_has_data_shape() const {
  return this != internal_default_instance() && data_shape_ != nullptr;
}
inline bool LoadDataResponse::has_data_shape() const {
  return _internal_has_data_shape();
}
inline const ::xla::ShapeProto& LoadDataResponse::_internal_data_shape() const {
  const ::xla::ShapeProto* p = data_shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ShapeProto&>(
      ::xla::_ShapeProto_default_instance_);
}
inline const ::xla::ShapeProto& LoadDataResponse::data_shape() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataResponse.data_shape)
  return _internal_data_shape();
}
inline void LoadDataResponse::unsafe_arena_set_allocated_data_shape(
    ::xla::ShapeProto* data_shape) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_shape_);
  }
  data_shape_ = data_shape;
  if (data_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.LoadDataResponse.data_shape)
}
inline ::xla::ShapeProto* LoadDataResponse::release_data_shape() {
  
  ::xla::ShapeProto* temp = data_shape_;
  data_shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ShapeProto* LoadDataResponse::unsafe_arena_release_data_shape() {
  // @@protoc_insertion_point(field_release:xla.LoadDataResponse.data_shape)
  
  ::xla::ShapeProto* temp = data_shape_;
  data_shape_ = nullptr;
  return temp;
}
inline ::xla::ShapeProto* LoadDataResponse::_internal_mutable_data_shape() {
  
  if (data_shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ShapeProto>(GetArenaForAllocation());
    data_shape_ = p;
  }
  return data_shape_;
}
inline ::xla::ShapeProto* LoadDataResponse::mutable_data_shape() {
  ::xla::ShapeProto* _msg = _internal_mutable_data_shape();
  // @@protoc_insertion_point(field_mutable:xla.LoadDataResponse.data_shape)
  return _msg;
}
inline void LoadDataResponse::set_allocated_data_shape(::xla::ShapeProto* data_shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_shape_);
  }
  if (data_shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_shape));
    if (message_arena != submessage_arena) {
      data_shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_shape, submessage_arena);
    }
    
  } else {
    
  }
  data_shape_ = data_shape;
  // @@protoc_insertion_point(field_set_allocated:xla.LoadDataResponse.data_shape)
}

// int64 available_rows = 3;
inline void LoadDataResponse::clear_available_rows() {
  available_rows_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadDataResponse::_internal_available_rows() const {
  return available_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadDataResponse::available_rows() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataResponse.available_rows)
  return _internal_available_rows();
}
inline void LoadDataResponse::_internal_set_available_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  available_rows_ = value;
}
inline void LoadDataResponse::set_available_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_available_rows(value);
  // @@protoc_insertion_point(field_set:xla.LoadDataResponse.available_rows)
}

// int64 rows_loaded = 4;
inline void LoadDataResponse::clear_rows_loaded() {
  rows_loaded_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadDataResponse::_internal_rows_loaded() const {
  return rows_loaded_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadDataResponse::rows_loaded() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataResponse.rows_loaded)
  return _internal_rows_loaded();
}
inline void LoadDataResponse::_internal_set_rows_loaded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rows_loaded_ = value;
}
inline void LoadDataResponse::set_rows_loaded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rows_loaded(value);
  // @@protoc_insertion_point(field_set:xla.LoadDataResponse.rows_loaded)
}

// int64 nanoseconds = 5;
inline void LoadDataResponse::clear_nanoseconds() {
  nanoseconds_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadDataResponse::_internal_nanoseconds() const {
  return nanoseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoadDataResponse::nanoseconds() const {
  // @@protoc_insertion_point(field_get:xla.LoadDataResponse.nanoseconds)
  return _internal_nanoseconds();
}
inline void LoadDataResponse::_internal_set_nanoseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  nanoseconds_ = value;
}
inline void LoadDataResponse::set_nanoseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_nanoseconds(value);
  // @@protoc_insertion_point(field_set:xla.LoadDataResponse.nanoseconds)
}

// -------------------------------------------------------------------

// GetShapeRequest

// .xla.GlobalDataHandle data = 1;
inline bool GetShapeRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool GetShapeRequest::has_data() const {
  return _internal_has_data();
}
inline const ::xla::GlobalDataHandle& GetShapeRequest::_internal_data() const {
  const ::xla::GlobalDataHandle* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::GlobalDataHandle&>(
      ::xla::_GlobalDataHandle_default_instance_);
}
inline const ::xla::GlobalDataHandle& GetShapeRequest::data() const {
  // @@protoc_insertion_point(field_get:xla.GetShapeRequest.data)
  return _internal_data();
}
inline void GetShapeRequest::unsafe_arena_set_allocated_data(
    ::xla::GlobalDataHandle* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.GetShapeRequest.data)
}
inline ::xla::GlobalDataHandle* GetShapeRequest::release_data() {
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::GlobalDataHandle* GetShapeRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:xla.GetShapeRequest.data)
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::xla::GlobalDataHandle* GetShapeRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::GlobalDataHandle>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::xla::GlobalDataHandle* GetShapeRequest::mutable_data() {
  ::xla::GlobalDataHandle* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:xla.GetShapeRequest.data)
  return _msg;
}
inline void GetShapeRequest::set_allocated_data(::xla::GlobalDataHandle* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:xla.GetShapeRequest.data)
}

// -------------------------------------------------------------------

// GetShapeResponse

// .xla.ShapeProto shape = 1;
inline bool GetShapeResponse::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool GetShapeResponse::has_shape() const {
  return _internal_has_shape();
}
inline const ::xla::ShapeProto& GetShapeResponse::_internal_shape() const {
  const ::xla::ShapeProto* p = shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ShapeProto&>(
      ::xla::_ShapeProto_default_instance_);
}
inline const ::xla::ShapeProto& GetShapeResponse::shape() const {
  // @@protoc_insertion_point(field_get:xla.GetShapeResponse.shape)
  return _internal_shape();
}
inline void GetShapeResponse::unsafe_arena_set_allocated_shape(
    ::xla::ShapeProto* shape) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.GetShapeResponse.shape)
}
inline ::xla::ShapeProto* GetShapeResponse::release_shape() {
  
  ::xla::ShapeProto* temp = shape_;
  shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ShapeProto* GetShapeResponse::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:xla.GetShapeResponse.shape)
  
  ::xla::ShapeProto* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::xla::ShapeProto* GetShapeResponse::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ShapeProto>(GetArenaForAllocation());
    shape_ = p;
  }
  return shape_;
}
inline ::xla::ShapeProto* GetShapeResponse::mutable_shape() {
  ::xla::ShapeProto* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:xla.GetShapeResponse.shape)
  return _msg;
}
inline void GetShapeResponse::set_allocated_shape(::xla::ShapeProto* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape));
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:xla.GetShapeResponse.shape)
}

// -------------------------------------------------------------------

// UnpackRequest

// .xla.GlobalDataHandle data = 1;
inline bool UnpackRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool UnpackRequest::has_data() const {
  return _internal_has_data();
}
inline const ::xla::GlobalDataHandle& UnpackRequest::_internal_data() const {
  const ::xla::GlobalDataHandle* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::GlobalDataHandle&>(
      ::xla::_GlobalDataHandle_default_instance_);
}
inline const ::xla::GlobalDataHandle& UnpackRequest::data() const {
  // @@protoc_insertion_point(field_get:xla.UnpackRequest.data)
  return _internal_data();
}
inline void UnpackRequest::unsafe_arena_set_allocated_data(
    ::xla::GlobalDataHandle* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.UnpackRequest.data)
}
inline ::xla::GlobalDataHandle* UnpackRequest::release_data() {
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::GlobalDataHandle* UnpackRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:xla.UnpackRequest.data)
  
  ::xla::GlobalDataHandle* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::xla::GlobalDataHandle* UnpackRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::GlobalDataHandle>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::xla::GlobalDataHandle* UnpackRequest::mutable_data() {
  ::xla::GlobalDataHandle* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:xla.UnpackRequest.data)
  return _msg;
}
inline void UnpackRequest::set_allocated_data(::xla::GlobalDataHandle* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:xla.UnpackRequest.data)
}

// -------------------------------------------------------------------

// UnpackResponse

// repeated .xla.GlobalDataHandle tied_data = 1;
inline int UnpackResponse::_internal_tied_data_size() const {
  return tied_data_.size();
}
inline int UnpackResponse::tied_data_size() const {
  return _internal_tied_data_size();
}
inline ::xla::GlobalDataHandle* UnpackResponse::mutable_tied_data(int index) {
  // @@protoc_insertion_point(field_mutable:xla.UnpackResponse.tied_data)
  return tied_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >*
UnpackResponse::mutable_tied_data() {
  // @@protoc_insertion_point(field_mutable_list:xla.UnpackResponse.tied_data)
  return &tied_data_;
}
inline const ::xla::GlobalDataHandle& UnpackResponse::_internal_tied_data(int index) const {
  return tied_data_.Get(index);
}
inline const ::xla::GlobalDataHandle& UnpackResponse::tied_data(int index) const {
  // @@protoc_insertion_point(field_get:xla.UnpackResponse.tied_data)
  return _internal_tied_data(index);
}
inline ::xla::GlobalDataHandle* UnpackResponse::_internal_add_tied_data() {
  return tied_data_.Add();
}
inline ::xla::GlobalDataHandle* UnpackResponse::add_tied_data() {
  ::xla::GlobalDataHandle* _add = _internal_add_tied_data();
  // @@protoc_insertion_point(field_add:xla.UnpackResponse.tied_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::GlobalDataHandle >&
UnpackResponse::tied_data() const {
  // @@protoc_insertion_point(field_list:xla.UnpackResponse.tied_data)
  return tied_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xla

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xla::DebugOptions_ShapeChecks> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xla::DebugOptions_ShapeChecks>() {
  return ::xla::DebugOptions_ShapeChecks_descriptor();
}
template <> struct is_proto_enum< ::xla::DebugOptions_StepMarkerLocation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xla::DebugOptions_StepMarkerLocation>() {
  return ::xla::DebugOptions_StepMarkerLocation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fxla_2eproto
