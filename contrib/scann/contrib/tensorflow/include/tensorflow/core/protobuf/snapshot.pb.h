// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/snapshot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/tensor.pb.h"
#include "tensorflow/core/framework/tensor_shape.pb.h"
#include "tensorflow/core/framework/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto;
namespace tensorflow {
namespace data {
namespace experimental {
class SnapshotMetadataRecord;
struct SnapshotMetadataRecordDefaultTypeInternal;
extern SnapshotMetadataRecordDefaultTypeInternal _SnapshotMetadataRecord_default_instance_;
class SnapshotRecord;
struct SnapshotRecordDefaultTypeInternal;
extern SnapshotRecordDefaultTypeInternal _SnapshotRecord_default_instance_;
class SnapshotTensorMetadata;
struct SnapshotTensorMetadataDefaultTypeInternal;
extern SnapshotTensorMetadataDefaultTypeInternal _SnapshotTensorMetadata_default_instance_;
class TensorMetadata;
struct TensorMetadataDefaultTypeInternal;
extern TensorMetadataDefaultTypeInternal _TensorMetadata_default_instance_;
}  // namespace experimental
}  // namespace data
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::data::experimental::SnapshotMetadataRecord* Arena::CreateMaybeMessage<::tensorflow::data::experimental::SnapshotMetadataRecord>(Arena*);
template<> ::tensorflow::data::experimental::SnapshotRecord* Arena::CreateMaybeMessage<::tensorflow::data::experimental::SnapshotRecord>(Arena*);
template<> ::tensorflow::data::experimental::SnapshotTensorMetadata* Arena::CreateMaybeMessage<::tensorflow::data::experimental::SnapshotTensorMetadata>(Arena*);
template<> ::tensorflow::data::experimental::TensorMetadata* Arena::CreateMaybeMessage<::tensorflow::data::experimental::TensorMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace data {
namespace experimental {

// ===================================================================

class SnapshotRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.data.experimental.SnapshotRecord) */ {
 public:
  inline SnapshotRecord() : SnapshotRecord(nullptr) {}
  ~SnapshotRecord() override;
  explicit constexpr SnapshotRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnapshotRecord(const SnapshotRecord& from);
  SnapshotRecord(SnapshotRecord&& from) noexcept
    : SnapshotRecord() {
    *this = ::std::move(from);
  }

  inline SnapshotRecord& operator=(const SnapshotRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotRecord& operator=(SnapshotRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapshotRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapshotRecord* internal_default_instance() {
    return reinterpret_cast<const SnapshotRecord*>(
               &_SnapshotRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SnapshotRecord& a, SnapshotRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotRecord* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotRecord* New() const final {
    return new SnapshotRecord();
  }

  SnapshotRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnapshotRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnapshotRecord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.data.experimental.SnapshotRecord";
  }
  protected:
  explicit SnapshotRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorFieldNumber = 1,
  };
  // repeated .tensorflow.TensorProto tensor = 1;
  int tensor_size() const;
  private:
  int _internal_tensor_size() const;
  public:
  void clear_tensor();
  ::tensorflow::TensorProto* mutable_tensor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >*
      mutable_tensor();
  private:
  const ::tensorflow::TensorProto& _internal_tensor(int index) const;
  ::tensorflow::TensorProto* _internal_add_tensor();
  public:
  const ::tensorflow::TensorProto& tensor(int index) const;
  ::tensorflow::TensorProto* add_tensor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >&
      tensor() const;

  // @@protoc_insertion_point(class_scope:tensorflow.data.experimental.SnapshotRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto > tensor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class SnapshotMetadataRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.data.experimental.SnapshotMetadataRecord) */ {
 public:
  inline SnapshotMetadataRecord() : SnapshotMetadataRecord(nullptr) {}
  ~SnapshotMetadataRecord() override;
  explicit constexpr SnapshotMetadataRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnapshotMetadataRecord(const SnapshotMetadataRecord& from);
  SnapshotMetadataRecord(SnapshotMetadataRecord&& from) noexcept
    : SnapshotMetadataRecord() {
    *this = ::std::move(from);
  }

  inline SnapshotMetadataRecord& operator=(const SnapshotMetadataRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotMetadataRecord& operator=(SnapshotMetadataRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapshotMetadataRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapshotMetadataRecord* internal_default_instance() {
    return reinterpret_cast<const SnapshotMetadataRecord*>(
               &_SnapshotMetadataRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SnapshotMetadataRecord& a, SnapshotMetadataRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotMetadataRecord* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotMetadataRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotMetadataRecord* New() const final {
    return new SnapshotMetadataRecord();
  }

  SnapshotMetadataRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotMetadataRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnapshotMetadataRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnapshotMetadataRecord& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotMetadataRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.data.experimental.SnapshotMetadataRecord";
  }
  protected:
  explicit SnapshotMetadataRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDtypeFieldNumber = 5,
    kGraphHashFieldNumber = 1,
    kRunIdFieldNumber = 2,
    kCreationTimestampFieldNumber = 3,
    kVersionFieldNumber = 4,
    kNumElementsFieldNumber = 6,
    kFinalizedFieldNumber = 1000,
  };
  // repeated .tensorflow.DataType dtype = 5;
  int dtype_size() const;
  private:
  int _internal_dtype_size() const;
  public:
  void clear_dtype();
  private:
  ::tensorflow::DataType _internal_dtype(int index) const;
  void _internal_add_dtype(::tensorflow::DataType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_dtype();
  public:
  ::tensorflow::DataType dtype(int index) const;
  void set_dtype(int index, ::tensorflow::DataType value);
  void add_dtype(::tensorflow::DataType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& dtype() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_dtype();

  // string graph_hash = 1;
  void clear_graph_hash();
  const std::string& graph_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_graph_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_graph_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_graph_hash();
  void set_allocated_graph_hash(std::string* graph_hash);
  private:
  const std::string& _internal_graph_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_graph_hash(const std::string& value);
  std::string* _internal_mutable_graph_hash();
  public:

  // string run_id = 2;
  void clear_run_id();
  const std::string& run_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_run_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_run_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_run_id();
  void set_allocated_run_id(std::string* run_id);
  private:
  const std::string& _internal_run_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_run_id(const std::string& value);
  std::string* _internal_mutable_run_id();
  public:

  // int64 creation_timestamp = 3;
  void clear_creation_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_timestamp() const;
  void set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_creation_timestamp() const;
  void _internal_set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 version = 4;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_elements = 6;
  void clear_num_elements();
  ::PROTOBUF_NAMESPACE_ID::int64 num_elements() const;
  void set_num_elements(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_elements() const;
  void _internal_set_num_elements(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool finalized = 1000;
  void clear_finalized();
  bool finalized() const;
  void set_finalized(bool value);
  private:
  bool _internal_finalized() const;
  void _internal_set_finalized(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.data.experimental.SnapshotMetadataRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> dtype_;
  mutable std::atomic<int> _dtype_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr graph_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_elements_;
  bool finalized_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class TensorMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.data.experimental.TensorMetadata) */ {
 public:
  inline TensorMetadata() : TensorMetadata(nullptr) {}
  ~TensorMetadata() override;
  explicit constexpr TensorMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TensorMetadata(const TensorMetadata& from);
  TensorMetadata(TensorMetadata&& from) noexcept
    : TensorMetadata() {
    *this = ::std::move(from);
  }

  inline TensorMetadata& operator=(const TensorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorMetadata& operator=(TensorMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TensorMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const TensorMetadata* internal_default_instance() {
    return reinterpret_cast<const TensorMetadata*>(
               &_TensorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TensorMetadata& a, TensorMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorMetadata* New() const final {
    return new TensorMetadata();
  }

  TensorMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TensorMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TensorMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.data.experimental.TensorMetadata";
  }
  protected:
  explicit TensorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorShapeFieldNumber = 2,
    kTensorSizeBytesFieldNumber = 3,
  };
  // .tensorflow.TensorShapeProto tensor_shape = 2;
  bool has_tensor_shape() const;
  private:
  bool _internal_has_tensor_shape() const;
  public:
  void clear_tensor_shape();
  const ::tensorflow::TensorShapeProto& tensor_shape() const;
  PROTOBUF_MUST_USE_RESULT ::tensorflow::TensorShapeProto* release_tensor_shape();
  ::tensorflow::TensorShapeProto* mutable_tensor_shape();
  void set_allocated_tensor_shape(::tensorflow::TensorShapeProto* tensor_shape);
  private:
  const ::tensorflow::TensorShapeProto& _internal_tensor_shape() const;
  ::tensorflow::TensorShapeProto* _internal_mutable_tensor_shape();
  public:
  void unsafe_arena_set_allocated_tensor_shape(
      ::tensorflow::TensorShapeProto* tensor_shape);
  ::tensorflow::TensorShapeProto* unsafe_arena_release_tensor_shape();

  // int64 tensor_size_bytes = 3;
  void clear_tensor_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 tensor_size_bytes() const;
  void set_tensor_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tensor_size_bytes() const;
  void _internal_set_tensor_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.data.experimental.TensorMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::TensorShapeProto* tensor_shape_;
  ::PROTOBUF_NAMESPACE_ID::int64 tensor_size_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class SnapshotTensorMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.data.experimental.SnapshotTensorMetadata) */ {
 public:
  inline SnapshotTensorMetadata() : SnapshotTensorMetadata(nullptr) {}
  ~SnapshotTensorMetadata() override;
  explicit constexpr SnapshotTensorMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnapshotTensorMetadata(const SnapshotTensorMetadata& from);
  SnapshotTensorMetadata(SnapshotTensorMetadata&& from) noexcept
    : SnapshotTensorMetadata() {
    *this = ::std::move(from);
  }

  inline SnapshotTensorMetadata& operator=(const SnapshotTensorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotTensorMetadata& operator=(SnapshotTensorMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapshotTensorMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapshotTensorMetadata* internal_default_instance() {
    return reinterpret_cast<const SnapshotTensorMetadata*>(
               &_SnapshotTensorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SnapshotTensorMetadata& a, SnapshotTensorMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotTensorMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotTensorMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotTensorMetadata* New() const final {
    return new SnapshotTensorMetadata();
  }

  SnapshotTensorMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotTensorMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnapshotTensorMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnapshotTensorMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotTensorMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.data.experimental.SnapshotTensorMetadata";
  }
  protected:
  explicit SnapshotTensorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorMetadataFieldNumber = 1,
  };
  // repeated .tensorflow.data.experimental.TensorMetadata tensor_metadata = 1;
  int tensor_metadata_size() const;
  private:
  int _internal_tensor_metadata_size() const;
  public:
  void clear_tensor_metadata();
  ::tensorflow::data::experimental::TensorMetadata* mutable_tensor_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::data::experimental::TensorMetadata >*
      mutable_tensor_metadata();
  private:
  const ::tensorflow::data::experimental::TensorMetadata& _internal_tensor_metadata(int index) const;
  ::tensorflow::data::experimental::TensorMetadata* _internal_add_tensor_metadata();
  public:
  const ::tensorflow::data::experimental::TensorMetadata& tensor_metadata(int index) const;
  ::tensorflow::data::experimental::TensorMetadata* add_tensor_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::data::experimental::TensorMetadata >&
      tensor_metadata() const;

  // @@protoc_insertion_point(class_scope:tensorflow.data.experimental.SnapshotTensorMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::data::experimental::TensorMetadata > tensor_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SnapshotRecord

// repeated .tensorflow.TensorProto tensor = 1;
inline int SnapshotRecord::_internal_tensor_size() const {
  return tensor_.size();
}
inline int SnapshotRecord::tensor_size() const {
  return _internal_tensor_size();
}
inline ::tensorflow::TensorProto* SnapshotRecord::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.SnapshotRecord.tensor)
  return tensor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >*
SnapshotRecord::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.data.experimental.SnapshotRecord.tensor)
  return &tensor_;
}
inline const ::tensorflow::TensorProto& SnapshotRecord::_internal_tensor(int index) const {
  return tensor_.Get(index);
}
inline const ::tensorflow::TensorProto& SnapshotRecord::tensor(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.SnapshotRecord.tensor)
  return _internal_tensor(index);
}
inline ::tensorflow::TensorProto* SnapshotRecord::_internal_add_tensor() {
  return tensor_.Add();
}
inline ::tensorflow::TensorProto* SnapshotRecord::add_tensor() {
  ::tensorflow::TensorProto* _add = _internal_add_tensor();
  // @@protoc_insertion_point(field_add:tensorflow.data.experimental.SnapshotRecord.tensor)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >&
SnapshotRecord::tensor() const {
  // @@protoc_insertion_point(field_list:tensorflow.data.experimental.SnapshotRecord.tensor)
  return tensor_;
}

// -------------------------------------------------------------------

// SnapshotMetadataRecord

// string graph_hash = 1;
inline void SnapshotMetadataRecord::clear_graph_hash() {
  graph_hash_.ClearToEmpty();
}
inline const std::string& SnapshotMetadataRecord::graph_hash() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.SnapshotMetadataRecord.graph_hash)
  return _internal_graph_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnapshotMetadataRecord::set_graph_hash(ArgT0&& arg0, ArgT... args) {
 
 graph_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.SnapshotMetadataRecord.graph_hash)
}
inline std::string* SnapshotMetadataRecord::mutable_graph_hash() {
  std::string* _s = _internal_mutable_graph_hash();
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.SnapshotMetadataRecord.graph_hash)
  return _s;
}
inline const std::string& SnapshotMetadataRecord::_internal_graph_hash() const {
  return graph_hash_.Get();
}
inline void SnapshotMetadataRecord::_internal_set_graph_hash(const std::string& value) {
  
  graph_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SnapshotMetadataRecord::_internal_mutable_graph_hash() {
  
  return graph_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SnapshotMetadataRecord::release_graph_hash() {
  // @@protoc_insertion_point(field_release:tensorflow.data.experimental.SnapshotMetadataRecord.graph_hash)
  return graph_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SnapshotMetadataRecord::set_allocated_graph_hash(std::string* graph_hash) {
  if (graph_hash != nullptr) {
    
  } else {
    
  }
  graph_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), graph_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.experimental.SnapshotMetadataRecord.graph_hash)
}

// string run_id = 2;
inline void SnapshotMetadataRecord::clear_run_id() {
  run_id_.ClearToEmpty();
}
inline const std::string& SnapshotMetadataRecord::run_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.SnapshotMetadataRecord.run_id)
  return _internal_run_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnapshotMetadataRecord::set_run_id(ArgT0&& arg0, ArgT... args) {
 
 run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.SnapshotMetadataRecord.run_id)
}
inline std::string* SnapshotMetadataRecord::mutable_run_id() {
  std::string* _s = _internal_mutable_run_id();
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.SnapshotMetadataRecord.run_id)
  return _s;
}
inline const std::string& SnapshotMetadataRecord::_internal_run_id() const {
  return run_id_.Get();
}
inline void SnapshotMetadataRecord::_internal_set_run_id(const std::string& value) {
  
  run_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SnapshotMetadataRecord::_internal_mutable_run_id() {
  
  return run_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SnapshotMetadataRecord::release_run_id() {
  // @@protoc_insertion_point(field_release:tensorflow.data.experimental.SnapshotMetadataRecord.run_id)
  return run_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SnapshotMetadataRecord::set_allocated_run_id(std::string* run_id) {
  if (run_id != nullptr) {
    
  } else {
    
  }
  run_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.experimental.SnapshotMetadataRecord.run_id)
}

// int64 creation_timestamp = 3;
inline void SnapshotMetadataRecord::clear_creation_timestamp() {
  creation_timestamp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotMetadataRecord::_internal_creation_timestamp() const {
  return creation_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotMetadataRecord::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.SnapshotMetadataRecord.creation_timestamp)
  return _internal_creation_timestamp();
}
inline void SnapshotMetadataRecord::_internal_set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  creation_timestamp_ = value;
}
inline void SnapshotMetadataRecord::set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_creation_timestamp(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.SnapshotMetadataRecord.creation_timestamp)
}

// int64 version = 4;
inline void SnapshotMetadataRecord::clear_version() {
  version_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotMetadataRecord::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotMetadataRecord::version() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.SnapshotMetadataRecord.version)
  return _internal_version();
}
inline void SnapshotMetadataRecord::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
}
inline void SnapshotMetadataRecord::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.SnapshotMetadataRecord.version)
}

// repeated .tensorflow.DataType dtype = 5;
inline int SnapshotMetadataRecord::_internal_dtype_size() const {
  return dtype_.size();
}
inline int SnapshotMetadataRecord::dtype_size() const {
  return _internal_dtype_size();
}
inline void SnapshotMetadataRecord::clear_dtype() {
  dtype_.Clear();
}
inline ::tensorflow::DataType SnapshotMetadataRecord::_internal_dtype(int index) const {
  return static_cast< ::tensorflow::DataType >(dtype_.Get(index));
}
inline ::tensorflow::DataType SnapshotMetadataRecord::dtype(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.SnapshotMetadataRecord.dtype)
  return _internal_dtype(index);
}
inline void SnapshotMetadataRecord::set_dtype(int index, ::tensorflow::DataType value) {
  dtype_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.SnapshotMetadataRecord.dtype)
}
inline void SnapshotMetadataRecord::_internal_add_dtype(::tensorflow::DataType value) {
  dtype_.Add(value);
}
inline void SnapshotMetadataRecord::add_dtype(::tensorflow::DataType value) {
  _internal_add_dtype(value);
  // @@protoc_insertion_point(field_add:tensorflow.data.experimental.SnapshotMetadataRecord.dtype)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SnapshotMetadataRecord::dtype() const {
  // @@protoc_insertion_point(field_list:tensorflow.data.experimental.SnapshotMetadataRecord.dtype)
  return dtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SnapshotMetadataRecord::_internal_mutable_dtype() {
  return &dtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SnapshotMetadataRecord::mutable_dtype() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.data.experimental.SnapshotMetadataRecord.dtype)
  return _internal_mutable_dtype();
}

// int64 num_elements = 6;
inline void SnapshotMetadataRecord::clear_num_elements() {
  num_elements_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotMetadataRecord::_internal_num_elements() const {
  return num_elements_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotMetadataRecord::num_elements() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.SnapshotMetadataRecord.num_elements)
  return _internal_num_elements();
}
inline void SnapshotMetadataRecord::_internal_set_num_elements(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_elements_ = value;
}
inline void SnapshotMetadataRecord::set_num_elements(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_elements(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.SnapshotMetadataRecord.num_elements)
}

// bool finalized = 1000;
inline void SnapshotMetadataRecord::clear_finalized() {
  finalized_ = false;
}
inline bool SnapshotMetadataRecord::_internal_finalized() const {
  return finalized_;
}
inline bool SnapshotMetadataRecord::finalized() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.SnapshotMetadataRecord.finalized)
  return _internal_finalized();
}
inline void SnapshotMetadataRecord::_internal_set_finalized(bool value) {
  
  finalized_ = value;
}
inline void SnapshotMetadataRecord::set_finalized(bool value) {
  _internal_set_finalized(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.SnapshotMetadataRecord.finalized)
}

// -------------------------------------------------------------------

// TensorMetadata

// .tensorflow.TensorShapeProto tensor_shape = 2;
inline bool TensorMetadata::_internal_has_tensor_shape() const {
  return this != internal_default_instance() && tensor_shape_ != nullptr;
}
inline bool TensorMetadata::has_tensor_shape() const {
  return _internal_has_tensor_shape();
}
inline const ::tensorflow::TensorShapeProto& TensorMetadata::_internal_tensor_shape() const {
  const ::tensorflow::TensorShapeProto* p = tensor_shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TensorShapeProto&>(
      ::tensorflow::_TensorShapeProto_default_instance_);
}
inline const ::tensorflow::TensorShapeProto& TensorMetadata::tensor_shape() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.TensorMetadata.tensor_shape)
  return _internal_tensor_shape();
}
inline void TensorMetadata::unsafe_arena_set_allocated_tensor_shape(
    ::tensorflow::TensorShapeProto* tensor_shape) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_shape_);
  }
  tensor_shape_ = tensor_shape;
  if (tensor_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.data.experimental.TensorMetadata.tensor_shape)
}
inline ::tensorflow::TensorShapeProto* TensorMetadata::release_tensor_shape() {
  
  ::tensorflow::TensorShapeProto* temp = tensor_shape_;
  tensor_shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::TensorShapeProto* TensorMetadata::unsafe_arena_release_tensor_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.data.experimental.TensorMetadata.tensor_shape)
  
  ::tensorflow::TensorShapeProto* temp = tensor_shape_;
  tensor_shape_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorShapeProto* TensorMetadata::_internal_mutable_tensor_shape() {
  
  if (tensor_shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::TensorShapeProto>(GetArenaForAllocation());
    tensor_shape_ = p;
  }
  return tensor_shape_;
}
inline ::tensorflow::TensorShapeProto* TensorMetadata::mutable_tensor_shape() {
  ::tensorflow::TensorShapeProto* _msg = _internal_mutable_tensor_shape();
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.TensorMetadata.tensor_shape)
  return _msg;
}
inline void TensorMetadata::set_allocated_tensor_shape(::tensorflow::TensorShapeProto* tensor_shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_shape_);
  }
  if (tensor_shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_shape));
    if (message_arena != submessage_arena) {
      tensor_shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_shape, submessage_arena);
    }
    
  } else {
    
  }
  tensor_shape_ = tensor_shape;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.data.experimental.TensorMetadata.tensor_shape)
}

// int64 tensor_size_bytes = 3;
inline void TensorMetadata::clear_tensor_size_bytes() {
  tensor_size_bytes_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorMetadata::_internal_tensor_size_bytes() const {
  return tensor_size_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorMetadata::tensor_size_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.TensorMetadata.tensor_size_bytes)
  return _internal_tensor_size_bytes();
}
inline void TensorMetadata::_internal_set_tensor_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tensor_size_bytes_ = value;
}
inline void TensorMetadata::set_tensor_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tensor_size_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.data.experimental.TensorMetadata.tensor_size_bytes)
}

// -------------------------------------------------------------------

// SnapshotTensorMetadata

// repeated .tensorflow.data.experimental.TensorMetadata tensor_metadata = 1;
inline int SnapshotTensorMetadata::_internal_tensor_metadata_size() const {
  return tensor_metadata_.size();
}
inline int SnapshotTensorMetadata::tensor_metadata_size() const {
  return _internal_tensor_metadata_size();
}
inline void SnapshotTensorMetadata::clear_tensor_metadata() {
  tensor_metadata_.Clear();
}
inline ::tensorflow::data::experimental::TensorMetadata* SnapshotTensorMetadata::mutable_tensor_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.data.experimental.SnapshotTensorMetadata.tensor_metadata)
  return tensor_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::data::experimental::TensorMetadata >*
SnapshotTensorMetadata::mutable_tensor_metadata() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.data.experimental.SnapshotTensorMetadata.tensor_metadata)
  return &tensor_metadata_;
}
inline const ::tensorflow::data::experimental::TensorMetadata& SnapshotTensorMetadata::_internal_tensor_metadata(int index) const {
  return tensor_metadata_.Get(index);
}
inline const ::tensorflow::data::experimental::TensorMetadata& SnapshotTensorMetadata::tensor_metadata(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.data.experimental.SnapshotTensorMetadata.tensor_metadata)
  return _internal_tensor_metadata(index);
}
inline ::tensorflow::data::experimental::TensorMetadata* SnapshotTensorMetadata::_internal_add_tensor_metadata() {
  return tensor_metadata_.Add();
}
inline ::tensorflow::data::experimental::TensorMetadata* SnapshotTensorMetadata::add_tensor_metadata() {
  ::tensorflow::data::experimental::TensorMetadata* _add = _internal_add_tensor_metadata();
  // @@protoc_insertion_point(field_add:tensorflow.data.experimental.SnapshotTensorMetadata.tensor_metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::data::experimental::TensorMetadata >&
SnapshotTensorMetadata::tensor_metadata() const {
  // @@protoc_insertion_point(field_list:tensorflow.data.experimental.SnapshotTensorMetadata.tensor_metadata)
  return tensor_metadata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace experimental
}  // namespace data
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto
